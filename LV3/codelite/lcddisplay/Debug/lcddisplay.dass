
./Debug/lcddisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f910 	bl	20000228 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <draw_object>:



void draw_object(OBJECT* self) {
20000010:	b5f0      	push	{r4, r5, r6, r7, lr}
20000012:	b087      	sub	sp, #28
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
    SHAPE* shape = self->shape;
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	681b      	ldr	r3, [r3, #0]
2000001c:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < shape->numPoints; i++) {
2000001e:	2317      	movs	r3, #23
20000020:	18fb      	adds	r3, r7, r3
20000022:	2200      	movs	r2, #0
20000024:	701a      	strb	r2, [r3, #0]
20000026:	e033      	b.n	20000090 <draw_object+0x80>
        uint8_t x = shape->points[i].x;
20000028:	2417      	movs	r4, #23
2000002a:	193b      	adds	r3, r7, r4
2000002c:	781a      	ldrb	r2, [r3, #0]
2000002e:	200f      	movs	r0, #15
20000030:	183b      	adds	r3, r7, r0
20000032:	6939      	ldr	r1, [r7, #16]
20000034:	0052      	lsls	r2, r2, #1
20000036:	188a      	adds	r2, r1, r2
20000038:	3203      	adds	r2, #3
2000003a:	7812      	ldrb	r2, [r2, #0]
2000003c:	701a      	strb	r2, [r3, #0]
        uint8_t y = shape->points[i].y;
2000003e:	193b      	adds	r3, r7, r4
20000040:	781a      	ldrb	r2, [r3, #0]
20000042:	250e      	movs	r5, #14
20000044:	197b      	adds	r3, r7, r5
20000046:	6939      	ldr	r1, [r7, #16]
20000048:	0052      	lsls	r2, r2, #1
2000004a:	188a      	adds	r2, r1, r2
2000004c:	3204      	adds	r2, #4
2000004e:	7812      	ldrb	r2, [r2, #0]
20000050:	701a      	strb	r2, [r3, #0]
        uint8_t px = self->position.x;
20000052:	210d      	movs	r1, #13
20000054:	187b      	adds	r3, r7, r1
20000056:	687a      	ldr	r2, [r7, #4]
20000058:	7992      	ldrb	r2, [r2, #6]
2000005a:	701a      	strb	r2, [r3, #0]
        uint8_t py = self->position.y;
2000005c:	260c      	movs	r6, #12
2000005e:	19bb      	adds	r3, r7, r6
20000060:	687a      	ldr	r2, [r7, #4]
20000062:	79d2      	ldrb	r2, [r2, #7]
20000064:	701a      	strb	r2, [r3, #0]
        pixel(x + px, y + py, true);
20000066:	183a      	adds	r2, r7, r0
20000068:	187b      	adds	r3, r7, r1
2000006a:	7812      	ldrb	r2, [r2, #0]
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	18d3      	adds	r3, r2, r3
20000070:	b2d8      	uxtb	r0, r3
20000072:	197a      	adds	r2, r7, r5
20000074:	19bb      	adds	r3, r7, r6
20000076:	7812      	ldrb	r2, [r2, #0]
20000078:	781b      	ldrb	r3, [r3, #0]
2000007a:	18d3      	adds	r3, r2, r3
2000007c:	b2db      	uxtb	r3, r3
2000007e:	2201      	movs	r2, #1
20000080:	0019      	movs	r1, r3
20000082:	f000 fa6b 	bl	2000055c <pixel>
    for (uint8_t i = 0; i < shape->numPoints; i++) {
20000086:	193b      	adds	r3, r7, r4
20000088:	781a      	ldrb	r2, [r3, #0]
2000008a:	193b      	adds	r3, r7, r4
2000008c:	3201      	adds	r2, #1
2000008e:	701a      	strb	r2, [r3, #0]
20000090:	693b      	ldr	r3, [r7, #16]
20000092:	781b      	ldrb	r3, [r3, #0]
20000094:	2217      	movs	r2, #23
20000096:	18ba      	adds	r2, r7, r2
20000098:	7812      	ldrb	r2, [r2, #0]
2000009a:	429a      	cmp	r2, r3
2000009c:	d3c4      	bcc.n	20000028 <draw_object+0x18>
    }
}
2000009e:	46c0      	nop			; (mov r8, r8)
200000a0:	46c0      	nop			; (mov r8, r8)
200000a2:	46bd      	mov	sp, r7
200000a4:	b007      	add	sp, #28
200000a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200000a8 <clear_object>:

void clear_object(OBJECT* self) {
200000a8:	b5f0      	push	{r4, r5, r6, r7, lr}
200000aa:	b087      	sub	sp, #28
200000ac:	af00      	add	r7, sp, #0
200000ae:	6078      	str	r0, [r7, #4]
    SHAPE* shape = self->shape;
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	681b      	ldr	r3, [r3, #0]
200000b4:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < shape->numPoints; i++) {
200000b6:	2317      	movs	r3, #23
200000b8:	18fb      	adds	r3, r7, r3
200000ba:	2200      	movs	r2, #0
200000bc:	701a      	strb	r2, [r3, #0]
200000be:	e033      	b.n	20000128 <clear_object+0x80>
        uint8_t x = shape->points[i].x;
200000c0:	2417      	movs	r4, #23
200000c2:	193b      	adds	r3, r7, r4
200000c4:	781a      	ldrb	r2, [r3, #0]
200000c6:	200f      	movs	r0, #15
200000c8:	183b      	adds	r3, r7, r0
200000ca:	6939      	ldr	r1, [r7, #16]
200000cc:	0052      	lsls	r2, r2, #1
200000ce:	188a      	adds	r2, r1, r2
200000d0:	3203      	adds	r2, #3
200000d2:	7812      	ldrb	r2, [r2, #0]
200000d4:	701a      	strb	r2, [r3, #0]
        uint8_t y = shape->points[i].y;
200000d6:	193b      	adds	r3, r7, r4
200000d8:	781a      	ldrb	r2, [r3, #0]
200000da:	250e      	movs	r5, #14
200000dc:	197b      	adds	r3, r7, r5
200000de:	6939      	ldr	r1, [r7, #16]
200000e0:	0052      	lsls	r2, r2, #1
200000e2:	188a      	adds	r2, r1, r2
200000e4:	3204      	adds	r2, #4
200000e6:	7812      	ldrb	r2, [r2, #0]
200000e8:	701a      	strb	r2, [r3, #0]
        uint8_t px = self->position.x;
200000ea:	210d      	movs	r1, #13
200000ec:	187b      	adds	r3, r7, r1
200000ee:	687a      	ldr	r2, [r7, #4]
200000f0:	7992      	ldrb	r2, [r2, #6]
200000f2:	701a      	strb	r2, [r3, #0]
        uint8_t py = self->position.y;
200000f4:	260c      	movs	r6, #12
200000f6:	19bb      	adds	r3, r7, r6
200000f8:	687a      	ldr	r2, [r7, #4]
200000fa:	79d2      	ldrb	r2, [r2, #7]
200000fc:	701a      	strb	r2, [r3, #0]
        pixel(x + px, y + py, false);
200000fe:	183a      	adds	r2, r7, r0
20000100:	187b      	adds	r3, r7, r1
20000102:	7812      	ldrb	r2, [r2, #0]
20000104:	781b      	ldrb	r3, [r3, #0]
20000106:	18d3      	adds	r3, r2, r3
20000108:	b2d8      	uxtb	r0, r3
2000010a:	197a      	adds	r2, r7, r5
2000010c:	19bb      	adds	r3, r7, r6
2000010e:	7812      	ldrb	r2, [r2, #0]
20000110:	781b      	ldrb	r3, [r3, #0]
20000112:	18d3      	adds	r3, r2, r3
20000114:	b2db      	uxtb	r3, r3
20000116:	2200      	movs	r2, #0
20000118:	0019      	movs	r1, r3
2000011a:	f000 fa1f 	bl	2000055c <pixel>
    for (uint8_t i = 0; i < shape->numPoints; i++) {
2000011e:	193b      	adds	r3, r7, r4
20000120:	781a      	ldrb	r2, [r3, #0]
20000122:	193b      	adds	r3, r7, r4
20000124:	3201      	adds	r2, #1
20000126:	701a      	strb	r2, [r3, #0]
20000128:	693b      	ldr	r3, [r7, #16]
2000012a:	781b      	ldrb	r3, [r3, #0]
2000012c:	2217      	movs	r2, #23
2000012e:	18ba      	adds	r2, r7, r2
20000130:	7812      	ldrb	r2, [r2, #0]
20000132:	429a      	cmp	r2, r3
20000134:	d3c4      	bcc.n	200000c0 <clear_object+0x18>
    }
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46c0      	nop			; (mov r8, r8)
2000013a:	46bd      	mov	sp, r7
2000013c:	b007      	add	sp, #28
2000013e:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000140 <set_speed>:

void set_speed(OBJECT* self, POINT velocity) {
20000140:	b580      	push	{r7, lr}
20000142:	b082      	sub	sp, #8
20000144:	af00      	add	r7, sp, #0
20000146:	6078      	str	r0, [r7, #4]
20000148:	003b      	movs	r3, r7
2000014a:	8019      	strh	r1, [r3, #0]
    self->velocity = velocity;
2000014c:	687b      	ldr	r3, [r7, #4]
2000014e:	003a      	movs	r2, r7
20000150:	8812      	ldrh	r2, [r2, #0]
20000152:	809a      	strh	r2, [r3, #4]
}
20000154:	46c0      	nop			; (mov r8, r8)
20000156:	46bd      	mov	sp, r7
20000158:	b002      	add	sp, #8
2000015a:	bd80      	pop	{r7, pc}

2000015c <move_object>:

void move_object(OBJECT* self) {
2000015c:	b580      	push	{r7, lr}
2000015e:	b084      	sub	sp, #16
20000160:	af00      	add	r7, sp, #0
20000162:	6078      	str	r0, [r7, #4]
    uint8_t newX = self->position.x + self->velocity.x;
20000164:	687b      	ldr	r3, [r7, #4]
20000166:	7999      	ldrb	r1, [r3, #6]
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	791a      	ldrb	r2, [r3, #4]
2000016c:	200e      	movs	r0, #14
2000016e:	183b      	adds	r3, r7, r0
20000170:	188a      	adds	r2, r1, r2
20000172:	701a      	strb	r2, [r3, #0]
    uint8_t newY = self->position.y + self->velocity.y;
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	79d9      	ldrb	r1, [r3, #7]
20000178:	687b      	ldr	r3, [r7, #4]
2000017a:	795a      	ldrb	r2, [r3, #5]
2000017c:	230d      	movs	r3, #13
2000017e:	18fb      	adds	r3, r7, r3
20000180:	188a      	adds	r2, r1, r2
20000182:	701a      	strb	r2, [r3, #0]
    bool shouldIMove = true;
20000184:	230f      	movs	r3, #15
20000186:	18fb      	adds	r3, r7, r3
20000188:	2201      	movs	r2, #1
2000018a:	701a      	strb	r2, [r3, #0]
    
    if (newX < 1 || newX > 128) {
2000018c:	183b      	adds	r3, r7, r0
2000018e:	781b      	ldrb	r3, [r3, #0]
20000190:	2b00      	cmp	r3, #0
20000192:	d003      	beq.n	2000019c <move_object+0x40>
20000194:	183b      	adds	r3, r7, r0
20000196:	781b      	ldrb	r3, [r3, #0]
20000198:	2b80      	cmp	r3, #128	; 0x80
2000019a:	d909      	bls.n	200001b0 <move_object+0x54>
        self->velocity.x = -self->velocity.x;
2000019c:	687b      	ldr	r3, [r7, #4]
2000019e:	791b      	ldrb	r3, [r3, #4]
200001a0:	425b      	negs	r3, r3
200001a2:	b2da      	uxtb	r2, r3
200001a4:	687b      	ldr	r3, [r7, #4]
200001a6:	711a      	strb	r2, [r3, #4]
        shouldIMove = false;
200001a8:	230f      	movs	r3, #15
200001aa:	18fb      	adds	r3, r7, r3
200001ac:	2200      	movs	r2, #0
200001ae:	701a      	strb	r2, [r3, #0]
    }
    if (newY < 1 || newY > 64) {
200001b0:	220d      	movs	r2, #13
200001b2:	18bb      	adds	r3, r7, r2
200001b4:	781b      	ldrb	r3, [r3, #0]
200001b6:	2b00      	cmp	r3, #0
200001b8:	d003      	beq.n	200001c2 <move_object+0x66>
200001ba:	18bb      	adds	r3, r7, r2
200001bc:	781b      	ldrb	r3, [r3, #0]
200001be:	2b40      	cmp	r3, #64	; 0x40
200001c0:	d909      	bls.n	200001d6 <move_object+0x7a>
        self->velocity.y = -self->velocity.y;
200001c2:	687b      	ldr	r3, [r7, #4]
200001c4:	795b      	ldrb	r3, [r3, #5]
200001c6:	425b      	negs	r3, r3
200001c8:	b2da      	uxtb	r2, r3
200001ca:	687b      	ldr	r3, [r7, #4]
200001cc:	715a      	strb	r2, [r3, #5]
        shouldIMove = false;
200001ce:	230f      	movs	r3, #15
200001d0:	18fb      	adds	r3, r7, r3
200001d2:	2200      	movs	r2, #0
200001d4:	701a      	strb	r2, [r3, #0]
    }
    if (shouldIMove) {
200001d6:	230f      	movs	r3, #15
200001d8:	18fb      	adds	r3, r7, r3
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	2b00      	cmp	r3, #0
200001de:	d013      	beq.n	20000208 <move_object+0xac>
        self->clear(self);
200001e0:	687b      	ldr	r3, [r7, #4]
200001e2:	68db      	ldr	r3, [r3, #12]
200001e4:	687a      	ldr	r2, [r7, #4]
200001e6:	0010      	movs	r0, r2
200001e8:	4798      	blx	r3
        self->position.x = newX;
200001ea:	687b      	ldr	r3, [r7, #4]
200001ec:	220e      	movs	r2, #14
200001ee:	18ba      	adds	r2, r7, r2
200001f0:	7812      	ldrb	r2, [r2, #0]
200001f2:	719a      	strb	r2, [r3, #6]
        self->position.y = newY;
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	220d      	movs	r2, #13
200001f8:	18ba      	adds	r2, r7, r2
200001fa:	7812      	ldrb	r2, [r2, #0]
200001fc:	71da      	strb	r2, [r3, #7]
        self->draw(self);
200001fe:	687b      	ldr	r3, [r7, #4]
20000200:	689b      	ldr	r3, [r3, #8]
20000202:	687a      	ldr	r2, [r7, #4]
20000204:	0010      	movs	r0, r2
20000206:	4798      	blx	r3
    }
    
}
20000208:	46c0      	nop			; (mov r8, r8)
2000020a:	46bd      	mov	sp, r7
2000020c:	b004      	add	sp, #16
2000020e:	bd80      	pop	{r7, pc}

20000210 <app_init>:



void app_init(void) {
20000210:	b580      	push	{r7, lr}
20000212:	af00      	add	r7, sp, #0
    GPIO_E->moder = 0x55555555;
20000214:	4b02      	ldr	r3, [pc, #8]	; (20000220 <app_init+0x10>)
20000216:	4a03      	ldr	r2, [pc, #12]	; (20000224 <app_init+0x14>)
20000218:	601a      	str	r2, [r3, #0]
}
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	46bd      	mov	sp, r7
2000021e:	bd80      	pop	{r7, pc}
20000220:	40021000 	andmi	r1, r2, r0
20000224:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000228 <main>:

int main(void)
{
20000228:	b580      	push	{r7, lr}
2000022a:	af00      	add	r7, sp, #0
    app_init();
2000022c:	f7ff fff0 	bl	20000210 <app_init>
    graphic_init();
20000230:	f000 fa64 	bl	200006fc <graphic_init>
        clear_object,
        move_object,
        set_speed
    };
    while (true) {
        ball.move(&ball);
20000234:	4b04      	ldr	r3, [pc, #16]	; (20000248 <main+0x20>)
20000236:	691b      	ldr	r3, [r3, #16]
20000238:	4a03      	ldr	r2, [pc, #12]	; (20000248 <main+0x20>)
2000023a:	0010      	movs	r0, r2
2000023c:	4798      	blx	r3
        delay_millis(100);
2000023e:	2064      	movs	r0, #100	; 0x64
20000240:	f000 faca 	bl	200007d8 <delay_millis>
        ball.move(&ball);
20000244:	e7f6      	b.n	20000234 <main+0xc>
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	200007ec 	andcs	r0, r0, ip, ror #15

2000024c <graphic_ctrl_bit_set>:
#define LCD_SET_PAGE 0xB8
#define LCD_DISP_START 0xC0
#define LCD_BUSY 0x80

// choose graphic display, and set the bits from x
void graphic_ctrl_bit_set(uint8_t x) {
2000024c:	b580      	push	{r7, lr}
2000024e:	b084      	sub	sp, #16
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
20000258:	4a0c      	ldr	r2, [pc, #48]	; (2000028c <graphic_ctrl_bit_set+0x40>)
2000025a:	210f      	movs	r1, #15
2000025c:	187b      	adds	r3, r7, r1
2000025e:	7d12      	ldrb	r2, [r2, #20]
20000260:	701a      	strb	r2, [r3, #0]
    c |= (x & ~BITMASK_SELECT);
20000262:	1dfb      	adds	r3, r7, #7
20000264:	781b      	ldrb	r3, [r3, #0]
20000266:	b25b      	sxtb	r3, r3
20000268:	2204      	movs	r2, #4
2000026a:	4393      	bics	r3, r2
2000026c:	b25a      	sxtb	r2, r3
2000026e:	187b      	adds	r3, r7, r1
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	b25b      	sxtb	r3, r3
20000274:	4313      	orrs	r3, r2
20000276:	b25a      	sxtb	r2, r3
20000278:	187b      	adds	r3, r7, r1
2000027a:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
2000027c:	4a03      	ldr	r2, [pc, #12]	; (2000028c <graphic_ctrl_bit_set+0x40>)
2000027e:	187b      	adds	r3, r7, r1
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	7513      	strb	r3, [r2, #20]
}
20000284:	46c0      	nop			; (mov r8, r8)
20000286:	46bd      	mov	sp, r7
20000288:	b004      	add	sp, #16
2000028a:	bd80      	pop	{r7, pc}
2000028c:	40021000 	andmi	r1, r2, r0

20000290 <graphic_ctrl_bit_clear>:
// Choose graphic display, and clear the bits from x
void graphic_ctrl_bit_clear(uint8_t x) {
20000290:	b580      	push	{r7, lr}
20000292:	b084      	sub	sp, #16
20000294:	af00      	add	r7, sp, #0
20000296:	0002      	movs	r2, r0
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
2000029c:	4a0c      	ldr	r2, [pc, #48]	; (200002d0 <graphic_ctrl_bit_clear+0x40>)
2000029e:	210f      	movs	r1, #15
200002a0:	187b      	adds	r3, r7, r1
200002a2:	7d12      	ldrb	r2, [r2, #20]
200002a4:	701a      	strb	r2, [r3, #0]
    c &= (~x & ~BITMASK_SELECT); 
200002a6:	1dfb      	adds	r3, r7, #7
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	43db      	mvns	r3, r3
200002ac:	b2db      	uxtb	r3, r3
200002ae:	187a      	adds	r2, r7, r1
200002b0:	7812      	ldrb	r2, [r2, #0]
200002b2:	4013      	ands	r3, r2
200002b4:	b2da      	uxtb	r2, r3
200002b6:	0008      	movs	r0, r1
200002b8:	187b      	adds	r3, r7, r1
200002ba:	2104      	movs	r1, #4
200002bc:	438a      	bics	r2, r1
200002be:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
200002c0:	4a03      	ldr	r2, [pc, #12]	; (200002d0 <graphic_ctrl_bit_clear+0x40>)
200002c2:	183b      	adds	r3, r7, r0
200002c4:	781b      	ldrb	r3, [r3, #0]
200002c6:	7513      	strb	r3, [r2, #20]
}
200002c8:	46c0      	nop			; (mov r8, r8)
200002ca:	46bd      	mov	sp, r7
200002cc:	b004      	add	sp, #16
200002ce:	bd80      	pop	{r7, pc}
200002d0:	40021000 	andmi	r1, r2, r0

200002d4 <select_controller>:
// Select chip
void select_controller(uint8_t controller) {
200002d4:	b580      	push	{r7, lr}
200002d6:	b082      	sub	sp, #8
200002d8:	af00      	add	r7, sp, #0
200002da:	0002      	movs	r2, r0
200002dc:	1dfb      	adds	r3, r7, #7
200002de:	701a      	strb	r2, [r3, #0]
    switch (controller) {
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	2b18      	cmp	r3, #24
200002e6:	d01a      	beq.n	2000031e <select_controller+0x4a>
200002e8:	dc1d      	bgt.n	20000326 <select_controller+0x52>
200002ea:	2b10      	cmp	r3, #16
200002ec:	d010      	beq.n	20000310 <select_controller+0x3c>
200002ee:	dc1a      	bgt.n	20000326 <select_controller+0x52>
200002f0:	2b00      	cmp	r3, #0
200002f2:	d002      	beq.n	200002fa <select_controller+0x26>
200002f4:	2b08      	cmp	r3, #8
200002f6:	d004      	beq.n	20000302 <select_controller+0x2e>
            break;
        case BITMASK_CS1 | BITMASK_CS2:
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
            break;
    }
}
200002f8:	e015      	b.n	20000326 <select_controller+0x52>
            graphic_ctrl_bit_clear (BITMASK_CS1 | BITMASK_CS2);
200002fa:	2018      	movs	r0, #24
200002fc:	f7ff ffc8 	bl	20000290 <graphic_ctrl_bit_clear>
            break;
20000300:	e011      	b.n	20000326 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1);
20000302:	2008      	movs	r0, #8
20000304:	f7ff ffa2 	bl	2000024c <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS2);
20000308:	2010      	movs	r0, #16
2000030a:	f7ff ffc1 	bl	20000290 <graphic_ctrl_bit_clear>
            break;
2000030e:	e00a      	b.n	20000326 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS2);
20000310:	2010      	movs	r0, #16
20000312:	f7ff ff9b 	bl	2000024c <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS1);
20000316:	2008      	movs	r0, #8
20000318:	f7ff ffba 	bl	20000290 <graphic_ctrl_bit_clear>
            break;
2000031c:	e003      	b.n	20000326 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
2000031e:	2018      	movs	r0, #24
20000320:	f7ff ff94 	bl	2000024c <graphic_ctrl_bit_set>
            break;
20000324:	46c0      	nop			; (mov r8, r8)
}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	46bd      	mov	sp, r7
2000032a:	b002      	add	sp, #8
2000032c:	bd80      	pop	{r7, pc}

2000032e <graphic_wait_ready>:

void graphic_wait_ready() {
2000032e:	b580      	push	{r7, lr}
20000330:	b082      	sub	sp, #8
20000332:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(BITMASK_E);
20000334:	2040      	movs	r0, #64	; 0x40
20000336:	f7ff ffab 	bl	20000290 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
2000033a:	4b15      	ldr	r3, [pc, #84]	; (20000390 <graphic_wait_ready+0x62>)
2000033c:	4a15      	ldr	r2, [pc, #84]	; (20000394 <graphic_wait_ready+0x66>)
2000033e:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RW);
20000340:	2002      	movs	r0, #2
20000342:	f7ff ff83 	bl	2000024c <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(BITMASK_RS);
20000346:	2001      	movs	r0, #1
20000348:	f7ff ffa2 	bl	20000290 <graphic_ctrl_bit_clear>
    delay_500ns();
2000034c:	f000 fa14 	bl	20000778 <delay_500ns>
    
    uint8_t c;
    do {
        graphic_ctrl_bit_set(BITMASK_E);
20000350:	2040      	movs	r0, #64	; 0x40
20000352:	f7ff ff7b 	bl	2000024c <graphic_ctrl_bit_set>
        delay_500ns();
20000356:	f000 fa0f 	bl	20000778 <delay_500ns>
        c = GPIO_E->idr_high & LCD_BUSY;
2000035a:	4b0d      	ldr	r3, [pc, #52]	; (20000390 <graphic_wait_ready+0x62>)
2000035c:	7c5b      	ldrb	r3, [r3, #17]
2000035e:	b2da      	uxtb	r2, r3
20000360:	1dfb      	adds	r3, r7, #7
20000362:	217f      	movs	r1, #127	; 0x7f
20000364:	438a      	bics	r2, r1
20000366:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(BITMASK_E);
20000368:	2040      	movs	r0, #64	; 0x40
2000036a:	f7ff ff91 	bl	20000290 <graphic_ctrl_bit_clear>
        delay_500ns();
2000036e:	f000 fa03 	bl	20000778 <delay_500ns>
    }while(c);
20000372:	1dfb      	adds	r3, r7, #7
20000374:	781b      	ldrb	r3, [r3, #0]
20000376:	2b00      	cmp	r3, #0
20000378:	d1ea      	bne.n	20000350 <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(BITMASK_E);
2000037a:	2040      	movs	r0, #64	; 0x40
2000037c:	f7ff ff66 	bl	2000024c <graphic_ctrl_bit_set>
    GPIO_E->moder = 0x55555555;
20000380:	4b03      	ldr	r3, [pc, #12]	; (20000390 <graphic_wait_ready+0x62>)
20000382:	4a05      	ldr	r2, [pc, #20]	; (20000398 <graphic_wait_ready+0x6a>)
20000384:	601a      	str	r2, [r3, #0]
}
20000386:	46c0      	nop			; (mov r8, r8)
20000388:	46bd      	mov	sp, r7
2000038a:	b002      	add	sp, #8
2000038c:	bd80      	pop	{r7, pc}
2000038e:	46c0      	nop			; (mov r8, r8)
20000390:	40021000 	andmi	r1, r2, r0
20000394:	00005555 	andeq	r5, r0, r5, asr r5
20000398:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000039c <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
2000039c:	b580      	push	{r7, lr}
2000039e:	b084      	sub	sp, #16
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200003a8:	2040      	movs	r0, #64	; 0x40
200003aa:	f7ff ff71 	bl	20000290 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
200003ae:	4b1c      	ldr	r3, [pc, #112]	; (20000420 <graphic_read+0x84>)
200003b0:	4a1c      	ldr	r2, [pc, #112]	; (20000424 <graphic_read+0x88>)
200003b2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RS | BITMASK_RW);
200003b4:	2003      	movs	r0, #3
200003b6:	f7ff ff49 	bl	2000024c <graphic_ctrl_bit_set>
    select_controller(controller);
200003ba:	1dfb      	adds	r3, r7, #7
200003bc:	781b      	ldrb	r3, [r3, #0]
200003be:	0018      	movs	r0, r3
200003c0:	f7ff ff88 	bl	200002d4 <select_controller>
    delay_500ns();
200003c4:	f000 f9d8 	bl	20000778 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
200003c8:	2040      	movs	r0, #64	; 0x40
200003ca:	f7ff ff3f 	bl	2000024c <graphic_ctrl_bit_set>
    delay_500ns();
200003ce:	f000 f9d3 	bl	20000778 <delay_500ns>
    uint8_t returnvalue = GPIO_E->idr_high;
200003d2:	4a13      	ldr	r2, [pc, #76]	; (20000420 <graphic_read+0x84>)
200003d4:	230f      	movs	r3, #15
200003d6:	18fb      	adds	r3, r7, r3
200003d8:	7c52      	ldrb	r2, [r2, #17]
200003da:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff ff57 	bl	20000290 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555;
200003e2:	4b0f      	ldr	r3, [pc, #60]	; (20000420 <graphic_read+0x84>)
200003e4:	4a10      	ldr	r2, [pc, #64]	; (20000428 <graphic_read+0x8c>)
200003e6:	601a      	str	r2, [r3, #0]
    if(controller & BITMASK_CS1) {
200003e8:	1dfb      	adds	r3, r7, #7
200003ea:	781b      	ldrb	r3, [r3, #0]
200003ec:	2208      	movs	r2, #8
200003ee:	4013      	ands	r3, r2
200003f0:	d004      	beq.n	200003fc <graphic_read+0x60>
        select_controller(BITMASK_CS1);
200003f2:	2008      	movs	r0, #8
200003f4:	f7ff ff6e 	bl	200002d4 <select_controller>
        graphic_wait_ready();
200003f8:	f7ff ff99 	bl	2000032e <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
200003fc:	1dfb      	adds	r3, r7, #7
200003fe:	781b      	ldrb	r3, [r3, #0]
20000400:	2210      	movs	r2, #16
20000402:	4013      	ands	r3, r2
20000404:	d004      	beq.n	20000410 <graphic_read+0x74>
        select_controller(BITMASK_CS1);
20000406:	2008      	movs	r0, #8
20000408:	f7ff ff64 	bl	200002d4 <select_controller>
        graphic_wait_ready();
2000040c:	f7ff ff8f 	bl	2000032e <graphic_wait_ready>
    }
    return returnvalue;
20000410:	230f      	movs	r3, #15
20000412:	18fb      	adds	r3, r7, r3
20000414:	781b      	ldrb	r3, [r3, #0]
}
20000416:	0018      	movs	r0, r3
20000418:	46bd      	mov	sp, r7
2000041a:	b004      	add	sp, #16
2000041c:	bd80      	pop	{r7, pc}
2000041e:	46c0      	nop			; (mov r8, r8)
20000420:	40021000 	andmi	r1, r2, r0
20000424:	00005555 	andeq	r5, r0, r5, asr r5
20000428:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000042c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000042c:	b580      	push	{r7, lr}
2000042e:	b082      	sub	sp, #8
20000430:	af00      	add	r7, sp, #0
20000432:	0002      	movs	r2, r0
20000434:	1dfb      	adds	r3, r7, #7
20000436:	701a      	strb	r2, [r3, #0]
20000438:	1dbb      	adds	r3, r7, #6
2000043a:	1c0a      	adds	r2, r1, #0
2000043c:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_high = value;
2000043e:	4a1a      	ldr	r2, [pc, #104]	; (200004a8 <graphic_write+0x7c>)
20000440:	1dfb      	adds	r3, r7, #7
20000442:	781b      	ldrb	r3, [r3, #0]
20000444:	7553      	strb	r3, [r2, #21]
    select_controller(controller);
20000446:	1dbb      	adds	r3, r7, #6
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	0018      	movs	r0, r3
2000044c:	f7ff ff42 	bl	200002d4 <select_controller>
    delay_500ns();
20000450:	f000 f992 	bl	20000778 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
20000454:	2040      	movs	r0, #64	; 0x40
20000456:	f7ff fef9 	bl	2000024c <graphic_ctrl_bit_set>
    delay_500ns();
2000045a:	f000 f98d 	bl	20000778 <delay_500ns>
    graphic_ctrl_bit_clear(BITMASK_E);
2000045e:	2040      	movs	r0, #64	; 0x40
20000460:	f7ff ff16 	bl	20000290 <graphic_ctrl_bit_clear>
    if(controller & BITMASK_CS1) {
20000464:	1dbb      	adds	r3, r7, #6
20000466:	781b      	ldrb	r3, [r3, #0]
20000468:	2208      	movs	r2, #8
2000046a:	4013      	ands	r3, r2
2000046c:	d004      	beq.n	20000478 <graphic_write+0x4c>
        select_controller(BITMASK_CS1);
2000046e:	2008      	movs	r0, #8
20000470:	f7ff ff30 	bl	200002d4 <select_controller>
        graphic_wait_ready();
20000474:	f7ff ff5b 	bl	2000032e <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
20000478:	1dbb      	adds	r3, r7, #6
2000047a:	781b      	ldrb	r3, [r3, #0]
2000047c:	2210      	movs	r2, #16
2000047e:	4013      	ands	r3, r2
20000480:	d004      	beq.n	2000048c <graphic_write+0x60>
        select_controller(BITMASK_CS2);
20000482:	2010      	movs	r0, #16
20000484:	f7ff ff26 	bl	200002d4 <select_controller>
        graphic_wait_ready();
20000488:	f7ff ff51 	bl	2000032e <graphic_wait_ready>
    }
    GPIO_E->odr_high = 0;
2000048c:	4b06      	ldr	r3, [pc, #24]	; (200004a8 <graphic_write+0x7c>)
2000048e:	2200      	movs	r2, #0
20000490:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(BITMASK_E);
20000492:	2040      	movs	r0, #64	; 0x40
20000494:	f7ff feda 	bl	2000024c <graphic_ctrl_bit_set>
    select_controller(0);
20000498:	2000      	movs	r0, #0
2000049a:	f7ff ff1b 	bl	200002d4 <select_controller>
}
2000049e:	46c0      	nop			; (mov r8, r8)
200004a0:	46bd      	mov	sp, r7
200004a2:	b002      	add	sp, #8
200004a4:	bd80      	pop	{r7, pc}
200004a6:	46c0      	nop			; (mov r8, r8)
200004a8:	40021000 	andmi	r1, r2, r0

200004ac <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller) {
200004ac:	b580      	push	{r7, lr}
200004ae:	b082      	sub	sp, #8
200004b0:	af00      	add	r7, sp, #0
200004b2:	0002      	movs	r2, r0
200004b4:	1dfb      	adds	r3, r7, #7
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dbb      	adds	r3, r7, #6
200004ba:	1c0a      	adds	r2, r1, #0
200004bc:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200004be:	2040      	movs	r0, #64	; 0x40
200004c0:	f7ff fee6 	bl	20000290 <graphic_ctrl_bit_clear>
    select_controller(controller);
200004c4:	1dbb      	adds	r3, r7, #6
200004c6:	781b      	ldrb	r3, [r3, #0]
200004c8:	0018      	movs	r0, r3
200004ca:	f7ff ff03 	bl	200002d4 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RS | BITMASK_RW);
200004ce:	2003      	movs	r0, #3
200004d0:	f7ff fede 	bl	20000290 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
200004d4:	1dbb      	adds	r3, r7, #6
200004d6:	781a      	ldrb	r2, [r3, #0]
200004d8:	1dfb      	adds	r3, r7, #7
200004da:	781b      	ldrb	r3, [r3, #0]
200004dc:	0011      	movs	r1, r2
200004de:	0018      	movs	r0, r3
200004e0:	f7ff ffa4 	bl	2000042c <graphic_write>
}
200004e4:	46c0      	nop			; (mov r8, r8)
200004e6:	46bd      	mov	sp, r7
200004e8:	b002      	add	sp, #8
200004ea:	bd80      	pop	{r7, pc}

200004ec <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
200004ec:	b580      	push	{r7, lr}
200004ee:	b082      	sub	sp, #8
200004f0:	af00      	add	r7, sp, #0
200004f2:	0002      	movs	r2, r0
200004f4:	1dfb      	adds	r3, r7, #7
200004f6:	701a      	strb	r2, [r3, #0]
200004f8:	1dbb      	adds	r3, r7, #6
200004fa:	1c0a      	adds	r2, r1, #0
200004fc:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200004fe:	2040      	movs	r0, #64	; 0x40
20000500:	f7ff fec6 	bl	20000290 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000504:	1dbb      	adds	r3, r7, #6
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	0018      	movs	r0, r3
2000050a:	f7ff fee3 	bl	200002d4 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RW);
2000050e:	2002      	movs	r0, #2
20000510:	f7ff febe 	bl	20000290 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(BITMASK_RS);
20000514:	2001      	movs	r0, #1
20000516:	f7ff fe99 	bl	2000024c <graphic_ctrl_bit_set>
    graphic_write(data, controller);
2000051a:	1dbb      	adds	r3, r7, #6
2000051c:	781a      	ldrb	r2, [r3, #0]
2000051e:	1dfb      	adds	r3, r7, #7
20000520:	781b      	ldrb	r3, [r3, #0]
20000522:	0011      	movs	r1, r2
20000524:	0018      	movs	r0, r3
20000526:	f7ff ff81 	bl	2000042c <graphic_write>
}
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	46bd      	mov	sp, r7
2000052e:	b002      	add	sp, #8
20000530:	bd80      	pop	{r7, pc}

20000532 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller) {
20000532:	b580      	push	{r7, lr}
20000534:	b082      	sub	sp, #8
20000536:	af00      	add	r7, sp, #0
20000538:	0002      	movs	r2, r0
2000053a:	1dfb      	adds	r3, r7, #7
2000053c:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
2000053e:	1dfb      	adds	r3, r7, #7
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	0018      	movs	r0, r3
20000544:	f7ff ff2a 	bl	2000039c <graphic_read>
    return graphic_read(controller);
20000548:	1dfb      	adds	r3, r7, #7
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	0018      	movs	r0, r3
2000054e:	f7ff ff25 	bl	2000039c <graphic_read>
20000552:	0003      	movs	r3, r0
}
20000554:	0018      	movs	r0, r3
20000556:	46bd      	mov	sp, r7
20000558:	b002      	add	sp, #8
2000055a:	bd80      	pop	{r7, pc}

2000055c <pixel>:

void pixel(uint8_t x, uint8_t y, bool set) {
2000055c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000055e:	b085      	sub	sp, #20
20000560:	af00      	add	r7, sp, #0
20000562:	0004      	movs	r4, r0
20000564:	0008      	movs	r0, r1
20000566:	0011      	movs	r1, r2
20000568:	1dfb      	adds	r3, r7, #7
2000056a:	1c22      	adds	r2, r4, #0
2000056c:	701a      	strb	r2, [r3, #0]
2000056e:	1dbb      	adds	r3, r7, #6
20000570:	1c02      	adds	r2, r0, #0
20000572:	701a      	strb	r2, [r3, #0]
20000574:	1d7b      	adds	r3, r7, #5
20000576:	1c0a      	adds	r2, r1, #0
20000578:	701a      	strb	r2, [r3, #0]
    // Create bitmask for the pixel
    uint8_t index, mask, controller;
    index = (y-1) / 8;
2000057a:	1dbb      	adds	r3, r7, #6
2000057c:	781b      	ldrb	r3, [r3, #0]
2000057e:	3b01      	subs	r3, #1
20000580:	2b00      	cmp	r3, #0
20000582:	da00      	bge.n	20000586 <pixel+0x2a>
20000584:	3307      	adds	r3, #7
20000586:	10db      	asrs	r3, r3, #3
20000588:	001a      	movs	r2, r3
2000058a:	230d      	movs	r3, #13
2000058c:	18fb      	adds	r3, r7, r3
2000058e:	701a      	strb	r2, [r3, #0]
    mask = 0x1 << ((y-1) % 8);
20000590:	1dbb      	adds	r3, r7, #6
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	3b01      	subs	r3, #1
20000596:	4a3e      	ldr	r2, [pc, #248]	; (20000690 <pixel+0x134>)
20000598:	4013      	ands	r3, r2
2000059a:	d504      	bpl.n	200005a6 <pixel+0x4a>
2000059c:	3b01      	subs	r3, #1
2000059e:	2208      	movs	r2, #8
200005a0:	4252      	negs	r2, r2
200005a2:	4313      	orrs	r3, r2
200005a4:	3301      	adds	r3, #1
200005a6:	001a      	movs	r2, r3
200005a8:	2301      	movs	r3, #1
200005aa:	4093      	lsls	r3, r2
200005ac:	001a      	movs	r2, r3
200005ae:	230f      	movs	r3, #15
200005b0:	18fb      	adds	r3, r7, r3
200005b2:	701a      	strb	r2, [r3, #0]
    if (x > 64) {
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	781b      	ldrb	r3, [r3, #0]
200005b8:	2b40      	cmp	r3, #64	; 0x40
200005ba:	d909      	bls.n	200005d0 <pixel+0x74>
        controller = BITMASK_CS2;
200005bc:	230e      	movs	r3, #14
200005be:	18fb      	adds	r3, r7, r3
200005c0:	2210      	movs	r2, #16
200005c2:	701a      	strb	r2, [r3, #0]
        x -= 65;
200005c4:	1dfb      	adds	r3, r7, #7
200005c6:	1dfa      	adds	r2, r7, #7
200005c8:	7812      	ldrb	r2, [r2, #0]
200005ca:	3a41      	subs	r2, #65	; 0x41
200005cc:	701a      	strb	r2, [r3, #0]
200005ce:	e008      	b.n	200005e2 <pixel+0x86>
    }else {
        controller = BITMASK_CS1;
200005d0:	230e      	movs	r3, #14
200005d2:	18fb      	adds	r3, r7, r3
200005d4:	2208      	movs	r2, #8
200005d6:	701a      	strb	r2, [r3, #0]
        x--;
200005d8:	1dfb      	adds	r3, r7, #7
200005da:	781a      	ldrb	r2, [r3, #0]
200005dc:	1dfb      	adds	r3, r7, #7
200005de:	3a01      	subs	r2, #1
200005e0:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x, controller);
200005e2:	1dfb      	adds	r3, r7, #7
200005e4:	781b      	ldrb	r3, [r3, #0]
200005e6:	2240      	movs	r2, #64	; 0x40
200005e8:	4313      	orrs	r3, r2
200005ea:	b2da      	uxtb	r2, r3
200005ec:	250e      	movs	r5, #14
200005ee:	197b      	adds	r3, r7, r5
200005f0:	781b      	ldrb	r3, [r3, #0]
200005f2:	0019      	movs	r1, r3
200005f4:	0010      	movs	r0, r2
200005f6:	f7ff ff59 	bl	200004ac <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
200005fa:	230d      	movs	r3, #13
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	2248      	movs	r2, #72	; 0x48
20000602:	4252      	negs	r2, r2
20000604:	4313      	orrs	r3, r2
20000606:	b2da      	uxtb	r2, r3
20000608:	197b      	adds	r3, r7, r5
2000060a:	781b      	ldrb	r3, [r3, #0]
2000060c:	0019      	movs	r1, r3
2000060e:	0010      	movs	r0, r2
20000610:	f7ff ff4c 	bl	200004ac <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
20000614:	260c      	movs	r6, #12
20000616:	19bc      	adds	r4, r7, r6
20000618:	197b      	adds	r3, r7, r5
2000061a:	781b      	ldrb	r3, [r3, #0]
2000061c:	0018      	movs	r0, r3
2000061e:	f7ff ff88 	bl	20000532 <graphic_read_data>
20000622:	0003      	movs	r3, r0
20000624:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
20000626:	1dfb      	adds	r3, r7, #7
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	2240      	movs	r2, #64	; 0x40
2000062c:	4313      	orrs	r3, r2
2000062e:	b2da      	uxtb	r2, r3
20000630:	197b      	adds	r3, r7, r5
20000632:	781b      	ldrb	r3, [r3, #0]
20000634:	0019      	movs	r1, r3
20000636:	0010      	movs	r0, r2
20000638:	f7ff ff38 	bl	200004ac <graphic_write_command>
    if (set) {
2000063c:	1d7b      	adds	r3, r7, #5
2000063e:	781b      	ldrb	r3, [r3, #0]
20000640:	2b00      	cmp	r3, #0
20000642:	d008      	beq.n	20000656 <pixel+0xfa>
        mask |= temp;
20000644:	220f      	movs	r2, #15
20000646:	18bb      	adds	r3, r7, r2
20000648:	18b9      	adds	r1, r7, r2
2000064a:	19ba      	adds	r2, r7, r6
2000064c:	7809      	ldrb	r1, [r1, #0]
2000064e:	7812      	ldrb	r2, [r2, #0]
20000650:	430a      	orrs	r2, r1
20000652:	701a      	strb	r2, [r3, #0]
20000654:	e00d      	b.n	20000672 <pixel+0x116>
    }else {
        mask = ~mask & temp;
20000656:	210f      	movs	r1, #15
20000658:	187b      	adds	r3, r7, r1
2000065a:	781b      	ldrb	r3, [r3, #0]
2000065c:	b25b      	sxtb	r3, r3
2000065e:	43db      	mvns	r3, r3
20000660:	b25b      	sxtb	r3, r3
20000662:	220c      	movs	r2, #12
20000664:	18ba      	adds	r2, r7, r2
20000666:	7812      	ldrb	r2, [r2, #0]
20000668:	b252      	sxtb	r2, r2
2000066a:	4013      	ands	r3, r2
2000066c:	b25a      	sxtb	r2, r3
2000066e:	187b      	adds	r3, r7, r1
20000670:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000672:	230e      	movs	r3, #14
20000674:	18fb      	adds	r3, r7, r3
20000676:	781a      	ldrb	r2, [r3, #0]
20000678:	230f      	movs	r3, #15
2000067a:	18fb      	adds	r3, r7, r3
2000067c:	781b      	ldrb	r3, [r3, #0]
2000067e:	0011      	movs	r1, r2
20000680:	0018      	movs	r0, r3
20000682:	f7ff ff33 	bl	200004ec <graphic_write_data>
}
20000686:	46c0      	nop			; (mov r8, r8)
20000688:	46bd      	mov	sp, r7
2000068a:	b005      	add	sp, #20
2000068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000068e:	46c0      	nop			; (mov r8, r8)
20000690:	80000007 	andhi	r0, r0, r7

20000694 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000694:	b580      	push	{r7, lr}
20000696:	b082      	sub	sp, #8
20000698:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++ ) {
2000069a:	1dfb      	adds	r3, r7, #7
2000069c:	2200      	movs	r2, #0
2000069e:	701a      	strb	r2, [r3, #0]
200006a0:	e023      	b.n	200006ea <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page, BITMASK_CS1 | BITMASK_CS2);
200006a2:	1dfb      	adds	r3, r7, #7
200006a4:	781b      	ldrb	r3, [r3, #0]
200006a6:	2248      	movs	r2, #72	; 0x48
200006a8:	4252      	negs	r2, r2
200006aa:	4313      	orrs	r3, r2
200006ac:	b2db      	uxtb	r3, r3
200006ae:	2118      	movs	r1, #24
200006b0:	0018      	movs	r0, r3
200006b2:	f7ff fefb 	bl	200004ac <graphic_write_command>
        graphic_write_command(LCD_SET_ADD  | 0, BITMASK_CS1 | BITMASK_CS2);
200006b6:	2118      	movs	r1, #24
200006b8:	2040      	movs	r0, #64	; 0x40
200006ba:	f7ff fef7 	bl	200004ac <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
200006be:	1dbb      	adds	r3, r7, #6
200006c0:	2200      	movs	r2, #0
200006c2:	701a      	strb	r2, [r3, #0]
200006c4:	e008      	b.n	200006d8 <graphic_clear_screen+0x44>
            graphic_write_data(0, BITMASK_CS1 | BITMASK_CS2);
200006c6:	2118      	movs	r1, #24
200006c8:	2000      	movs	r0, #0
200006ca:	f7ff ff0f 	bl	200004ec <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
200006ce:	1dbb      	adds	r3, r7, #6
200006d0:	781a      	ldrb	r2, [r3, #0]
200006d2:	1dbb      	adds	r3, r7, #6
200006d4:	3201      	adds	r2, #1
200006d6:	701a      	strb	r2, [r3, #0]
200006d8:	1dbb      	adds	r3, r7, #6
200006da:	781b      	ldrb	r3, [r3, #0]
200006dc:	2b3f      	cmp	r3, #63	; 0x3f
200006de:	d9f2      	bls.n	200006c6 <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++ ) {
200006e0:	1dfb      	adds	r3, r7, #7
200006e2:	781a      	ldrb	r2, [r3, #0]
200006e4:	1dfb      	adds	r3, r7, #7
200006e6:	3201      	adds	r2, #1
200006e8:	701a      	strb	r2, [r3, #0]
200006ea:	1dfb      	adds	r3, r7, #7
200006ec:	781b      	ldrb	r3, [r3, #0]
200006ee:	2b07      	cmp	r3, #7
200006f0:	d9d7      	bls.n	200006a2 <graphic_clear_screen+0xe>
        }
    }
}
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46c0      	nop			; (mov r8, r8)
200006f6:	46bd      	mov	sp, r7
200006f8:	b002      	add	sp, #8
200006fa:	bd80      	pop	{r7, pc}

200006fc <graphic_init>:


void graphic_init(void) {
200006fc:	b580      	push	{r7, lr}
200006fe:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(BITMASK_E);
20000700:	2040      	movs	r0, #64	; 0x40
20000702:	f7ff fda3 	bl	2000024c <graphic_ctrl_bit_set>
    delay_micros(10);
20000706:	200a      	movs	r0, #10
20000708:	f000 f848 	bl	2000079c <delay_micros>
    graphic_ctrl_bit_clear(BITMASK_CS1 | BITMASK_CS2 | BITMASK_RESET | BITMASK_E);
2000070c:	2078      	movs	r0, #120	; 0x78
2000070e:	f7ff fdbf 	bl	20000290 <graphic_ctrl_bit_clear>
    delay_millis(30);
20000712:	201e      	movs	r0, #30
20000714:	f000 f860 	bl	200007d8 <delay_millis>
    graphic_ctrl_bit_set(BITMASK_RESET);
20000718:	2020      	movs	r0, #32
2000071a:	f7ff fd97 	bl	2000024c <graphic_ctrl_bit_set>
    
    // Toggle display
    graphic_write_command(LCD_OFF, BITMASK_CS1 | BITMASK_CS2);
2000071e:	2118      	movs	r1, #24
20000720:	203e      	movs	r0, #62	; 0x3e
20000722:	f7ff fec3 	bl	200004ac <graphic_write_command>
    graphic_write_command(LCD_ON, BITMASK_CS1 | BITMASK_CS2);
20000726:	2118      	movs	r1, #24
20000728:	203f      	movs	r0, #63	; 0x3f
2000072a:	f7ff febf 	bl	200004ac <graphic_write_command>
    //Start = 0
    graphic_write_command(LCD_DISP_START, BITMASK_CS1 | BITMASK_CS2);
2000072e:	2118      	movs	r1, #24
20000730:	20c0      	movs	r0, #192	; 0xc0
20000732:	f7ff febb 	bl	200004ac <graphic_write_command>
    // Add = 0
    graphic_write_command(LCD_SET_ADD, BITMASK_CS1 | BITMASK_CS2);
20000736:	2118      	movs	r1, #24
20000738:	2040      	movs	r0, #64	; 0x40
2000073a:	f7ff feb7 	bl	200004ac <graphic_write_command>
    // Page = 0
    graphic_write_command(LCD_SET_PAGE, BITMASK_CS1 | BITMASK_CS2);
2000073e:	2118      	movs	r1, #24
20000740:	20b8      	movs	r0, #184	; 0xb8
20000742:	f7ff feb3 	bl	200004ac <graphic_write_command>
    // Deactivate both CS signals
    select_controller(0);
20000746:	2000      	movs	r0, #0
20000748:	f7ff fdc4 	bl	200002d4 <select_controller>
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	bd80      	pop	{r7, pc}
20000752:	46c0      	nop			; (mov r8, r8)

20000754 <delay_250ns>:
20000754:	2300      	movs	r3, #0
20000756:	2129      	movs	r1, #41	; 0x29
20000758:	4a06      	ldr	r2, [pc, #24]	; (20000774 <delay_250ns+0x20>)
2000075a:	6013      	str	r3, [r2, #0]
2000075c:	6051      	str	r1, [r2, #4]
2000075e:	2180      	movs	r1, #128	; 0x80
20000760:	6093      	str	r3, [r2, #8]
20000762:	3305      	adds	r3, #5
20000764:	6013      	str	r3, [r2, #0]
20000766:	0249      	lsls	r1, r1, #9
20000768:	6813      	ldr	r3, [r2, #0]
2000076a:	420b      	tst	r3, r1
2000076c:	d0fc      	beq.n	20000768 <delay_250ns+0x14>
2000076e:	2300      	movs	r3, #0
20000770:	6013      	str	r3, [r2, #0]
20000772:	4770      	bx	lr
20000774:	e000e010 	and	lr, r0, r0, lsl r0

20000778 <delay_500ns>:
20000778:	2300      	movs	r3, #0
2000077a:	2153      	movs	r1, #83	; 0x53
2000077c:	4a06      	ldr	r2, [pc, #24]	; (20000798 <delay_500ns+0x20>)
2000077e:	6013      	str	r3, [r2, #0]
20000780:	6051      	str	r1, [r2, #4]
20000782:	2180      	movs	r1, #128	; 0x80
20000784:	6093      	str	r3, [r2, #8]
20000786:	3305      	adds	r3, #5
20000788:	6013      	str	r3, [r2, #0]
2000078a:	0249      	lsls	r1, r1, #9
2000078c:	6813      	ldr	r3, [r2, #0]
2000078e:	420b      	tst	r3, r1
20000790:	d0fc      	beq.n	2000078c <delay_500ns+0x14>
20000792:	2300      	movs	r3, #0
20000794:	6013      	str	r3, [r2, #0]
20000796:	4770      	bx	lr
20000798:	e000e010 	and	lr, r0, r0, lsl r0

2000079c <delay_micros>:
2000079c:	2280      	movs	r2, #128	; 0x80
2000079e:	b5f0      	push	{r4, r5, r6, r7, lr}
200007a0:	2400      	movs	r4, #0
200007a2:	2700      	movs	r7, #0
200007a4:	2653      	movs	r6, #83	; 0x53
200007a6:	2505      	movs	r5, #5
200007a8:	4b0a      	ldr	r3, [pc, #40]	; (200007d4 <delay_micros+0x38>)
200007aa:	0a80      	lsrs	r0, r0, #10
200007ac:	0252      	lsls	r2, r2, #9
200007ae:	601f      	str	r7, [r3, #0]
200007b0:	605e      	str	r6, [r3, #4]
200007b2:	609f      	str	r7, [r3, #8]
200007b4:	601d      	str	r5, [r3, #0]
200007b6:	6819      	ldr	r1, [r3, #0]
200007b8:	4211      	tst	r1, r2
200007ba:	d0fc      	beq.n	200007b6 <delay_micros+0x1a>
200007bc:	601c      	str	r4, [r3, #0]
200007be:	601c      	str	r4, [r3, #0]
200007c0:	605e      	str	r6, [r3, #4]
200007c2:	609c      	str	r4, [r3, #8]
200007c4:	601d      	str	r5, [r3, #0]
200007c6:	6819      	ldr	r1, [r3, #0]
200007c8:	4211      	tst	r1, r2
200007ca:	d0fc      	beq.n	200007c6 <delay_micros+0x2a>
200007cc:	601c      	str	r4, [r3, #0]
200007ce:	3801      	subs	r0, #1
200007d0:	d2ed      	bcs.n	200007ae <delay_micros+0x12>
200007d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
200007d4:	e000e010 	and	lr, r0, r0, lsl r0

200007d8 <delay_millis>:
200007d8:	b510      	push	{r4, lr}
200007da:	0143      	lsls	r3, r0, #5
200007dc:	1a1b      	subs	r3, r3, r0
200007de:	009b      	lsls	r3, r3, #2
200007e0:	1818      	adds	r0, r3, r0
200007e2:	00c0      	lsls	r0, r0, #3
200007e4:	f7ff ffda 	bl	2000079c <delay_micros>
200007e8:	bd10      	pop	{r4, pc}
200007ea:	46c0      	nop			; (mov r8, r8)

200007ec <ball.4310>:
200007ec:	20000804 	andcs	r0, r0, r4, lsl #16
200007f0:	01010404 	tsteq	r1, r4, lsl #8
200007f4:	20000011 	andcs	r0, r0, r1, lsl r0
200007f8:	200000a9 	andcs	r0, r0, r9, lsr #1
200007fc:	2000015d 	andcs	r0, r0, sp, asr r1
20000800:	20000141 	andcs	r0, r0, r1, asr #2

20000804 <ball_geometry.4309>:
20000804:	000a0a0c 	andeq	r0, sl, ip, lsl #20
20000808:	01020001 	tsteq	r2, r1
2000080c:	01010100 	mrseq	r0, (UNDEF: 17)
20000810:	02030102 	andeq	r0, r3, #-2147483648	; 0x80000000
20000814:	02010200 	andeq	r0, r1, #0, 4
20000818:	03030202 	movweq	r0, #12802	; 0x3202
2000081c:	00020301 	andeq	r0, r2, r1, lsl #6
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000492 	muleq	r0, r2, r4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000088 	andeq	r0, r0, r8, lsl #1
  10:	0001ee0c 	andeq	lr, r1, ip, lsl #28
  14:	00016e00 	andeq	r6, r1, r0, lsl #28
	...
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	00000102 	andeq	r0, r0, r2, lsl #2
  2c:	0000e803 	andeq	lr, r0, r3, lsl #16
  30:	182b0200 	stmdane	fp!, {r9}
  34:	00000038 	andeq	r0, r0, r8, lsr r0
  38:	00080102 	andeq	r0, r8, r2, lsl #2
  3c:	02000001 	andeq	r0, r0, #1
  40:	00190502 	andseq	r0, r9, r2, lsl #10
  44:	43030000 	movwmi	r0, #12288	; 0x3000
  48:	02000000 	andeq	r0, r0, #0
  4c:	00521939 	subseq	r1, r2, r9, lsr r9
  50:	02020000 	andeq	r0, r2, #0
  54:	00013c07 	andeq	r3, r1, r7, lsl #24
  58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
  5c:	000000ca 	andeq	r0, r0, sl, asr #1
  60:	00002f03 	andeq	r2, r0, r3, lsl #30
  64:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
  68:	0000006c 	andeq	r0, r0, ip, rrx
  6c:	20070402 	andcs	r0, r7, r2, lsl #8
  70:	02000001 	andeq	r0, r0, #1
  74:	00c50508 	sbceq	r0, r5, r8, lsl #10
  78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  7c:	00011b07 	andeq	r1, r1, r7, lsl #22
  80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
  84:	00746e69 	rsbseq	r6, r4, r9, ror #28
  88:	25070402 	strcs	r0, [r7, #-1026]	; 0xfffffbfe
  8c:	03000001 	movweq	r0, #1
  90:	000000ea 	andeq	r0, r0, sl, ror #1
  94:	2c131803 	ldccs	8, cr1, [r3], {3}
  98:	03000000 	movweq	r0, #0
  9c:	00000045 	andeq	r0, r0, r5, asr #32
  a0:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
  a4:	03000000 	movweq	r0, #0
  a8:	00000031 	andeq	r0, r0, r1, lsr r0
  ac:	60143003 	andsvs	r3, r4, r3
  b0:	05000000 	streq	r0, [r0, #-0]
  b4:	000001e9 	andeq	r0, r0, r9, ror #3
  b8:	100c0418 	andne	r0, ip, r8, lsl r4
  bc:	00000150 	andeq	r0, r0, r0, asr r1
  c0:	0000db06 	andeq	sp, r0, r6, lsl #22
  c4:	0e0d0400 	cfcpyseq	mvf0, mvf13
  c8:	000000a7 	andeq	r0, r0, r7, lsr #1
  cc:	00650600 	rsbeq	r0, r5, r0, lsl #12
  d0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
  d4:	00009b0e 	andeq	r9, r0, lr, lsl #22
  d8:	32060400 	andcc	r0, r6, #0, 8
  dc:	04000002 	streq	r0, [r0], #-2
  e0:	009b0e0f 	addseq	r0, fp, pc, lsl #28
  e4:	06060000 	streq	r0, [r6], -r0
  e8:	000000d3 	ldrdeq	r0, [r0], -r3
  ec:	a70e1004 	strge	r1, [lr, -r4]
  f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  f4:	0000f206 	andeq	pc, r0, r6, lsl #4
  f8:	0e110400 	cfmulseq	mvf0, mvf1, mvf0
  fc:	000000a7 	andeq	r0, r0, r7, lsr #1
 100:	010e060c 	tsteq	lr, ip, lsl #12
 104:	12040000 	andne	r0, r4, #0
 108:	00008f0d 	andeq	r8, r0, sp, lsl #30
 10c:	6c061000 	stcvs	0, cr1, [r6], {-0}
 110:	04000000 	streq	r0, [r0], #-0
 114:	008f0d13 	addeq	r0, pc, r3, lsl sp	; <UNPREDICTABLE>
 118:	06110000 	ldreq	r0, [r1], -r0
 11c:	0000007b 	andeq	r0, r0, fp, ror r0
 120:	9b0e1404 	blls	385138 <startup-0x1fc7aec8>
 124:	12000000 	andne	r0, r0, #0
 128:	0000f806 	andeq	pc, r0, r6, lsl #16
 12c:	0d150400 	cfldrseq	mvf0, [r5, #-0]
 130:	0000008f 	andeq	r0, r0, pc, lsl #1
 134:	01d90614 	bicseq	r0, r9, r4, lsl r6
 138:	16040000 	strne	r0, [r4], -r0
 13c:	00008f0d 	andeq	r8, r0, sp, lsl #30
 140:	00061500 	andeq	r1, r6, r0, lsl #10
 144:	04000000 	streq	r0, [r0], #-0
 148:	009b0e17 	addseq	r0, fp, r7, lsl lr
 14c:	00160000 	andseq	r0, r6, r0
 150:	00014f03 	andeq	r4, r1, r3, lsl #30
 154:	02180400 	andseq	r0, r8, #0, 8
 158:	000000b3 	strheq	r0, [r0], -r3
 15c:	0001a805 	andeq	sl, r1, r5, lsl #16
 160:	0e010200 	cdpeq	2, 0, cr0, cr1, cr0, {0}
 164:	00018010 	andeq	r8, r1, r0, lsl r0
 168:	00780700 	rsbseq	r0, r8, r0, lsl #14
 16c:	8f0d0f01 	svchi	0x000d0f01
 170:	00000000 	andeq	r0, r0, r0
 174:	01007907 	tsteq	r0, r7, lsl #18
 178:	008f0d10 	addeq	r0, pc, r0, lsl sp	; <UNPREDICTABLE>
 17c:	00010000 	andeq	r0, r1, r0
 180:	00007503 	andeq	r7, r0, r3, lsl #10
 184:	02110100 	andseq	r0, r1, #0, 2
 188:	0000015c 	andeq	r0, r0, ip, asr r1
 18c:	00002805 	andeq	r2, r0, r5, lsl #16
 190:	13012b00 	movwne	r2, #6912	; 0x1b00
 194:	0001c110 	andeq	ip, r1, r0, lsl r1
 198:	01640600 	cmneq	r4, r0, lsl #12
 19c:	14010000 	strne	r0, [r1], #-0
 1a0:	00008f0d 	andeq	r8, r0, sp, lsl #30
 1a4:	cb060000 	blgt	1801ac <startup-0x1fe7fe54>
 1a8:	01000001 	tsteq	r0, r1
 1ac:	01800b15 	orreq	r0, r0, r5, lsl fp
 1b0:	06010000 	streq	r0, [r1], -r0
 1b4:	000000e1 	andeq	r0, r0, r1, ror #1
 1b8:	c10b1601 	tstgt	fp, r1, lsl #12
 1bc:	03000001 	movweq	r0, #1
 1c0:	01800800 	orreq	r0, r0, r0, lsl #16
 1c4:	01d10000 	bicseq	r0, r1, r0
 1c8:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
 1cc:	13000000 	movwne	r0, #0
 1d0:	02440300 	subeq	r0, r4, #0, 6
 1d4:	17010000 	strne	r0, [r1, -r0]
 1d8:	00018c02 	andeq	r8, r1, r2, lsl #24
 1dc:	01590500 	cmpeq	r9, r0, lsl #10
 1e0:	01180000 	tsteq	r8, r0
 1e4:	02461019 	subeq	r1, r6, #25
 1e8:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
 1ec:	01000002 	tsteq	r0, r2
 1f0:	02460c1a 	subeq	r0, r6, #6656	; 0x1a00
 1f4:	06000000 	streq	r0, [r0], -r0
 1f8:	0000003a 	andeq	r0, r0, sl, lsr r0
 1fc:	800b1b01 	andhi	r1, fp, r1, lsl #22
 200:	04000001 	streq	r0, [r0], #-1
 204:	00004e06 	andeq	r4, r0, r6, lsl #28
 208:	0b1c0100 	bleq	700610 <startup-0x1f8ff9f0>
 20c:	00000180 	andeq	r0, r0, r0, lsl #3
 210:	01af0606 			; <UNDEFINED> instruction: 0x01af0606
 214:	1d010000 	stcne	0, cr0, [r1, #-0]
 218:	00025d0d 	andeq	r5, r2, sp, lsl #26
 21c:	00060800 	andeq	r0, r6, r0, lsl #16
 220:	01000003 	tsteq	r0, r3
 224:	025d0d1e 	subseq	r0, sp, #1920	; 0x780
 228:	060c0000 	streq	r0, [ip], -r0
 22c:	0000025e 	andeq	r0, r0, lr, asr r2
 230:	5d0d1f01 	stcpl	15, cr1, [sp, #-4]
 234:	10000002 	andne	r0, r0, r2
 238:	0001b406 	andeq	fp, r1, r6, lsl #8
 23c:	0d200100 	stfeqs	f0, [r0, #-0]
 240:	00000273 	andeq	r0, r0, r3, ror r2
 244:	040a0014 	streq	r0, [sl], #-20	; 0xffffffec
 248:	000001d1 	ldrdeq	r0, [r0], -r1
 24c:	0002570b 	andeq	r5, r2, fp, lsl #14
 250:	02570c00 	subseq	r0, r7, #0, 24
 254:	0a000000 	beq	25c <startup-0x1ffffda4>
 258:	0001dd04 	andeq	sp, r1, r4, lsl #26
 25c:	4c040a00 			; <UNDEFINED> instruction: 0x4c040a00
 260:	0b000002 	bleq	270 <startup-0x1ffffd90>
 264:	00000273 	andeq	r0, r0, r3, ror r2
 268:	0002570c 	andeq	r5, r2, ip, lsl #14
 26c:	01800c00 	orreq	r0, r0, r0, lsl #24
 270:	0a000000 	beq	278 <startup-0x1ffffd88>
 274:	00026304 	andeq	r6, r2, r4, lsl #6
 278:	01e20300 	mvneq	r0, r0, lsl #6
 27c:	21010000 	mrscs	r0, (UNDEF: 1)
 280:	0001dd02 	andeq	sp, r1, r2, lsl #26
 284:	01540d00 	cmpeq	r4, r0, lsl #26
 288:	67010000 	strvs	r0, [r1, -r0]
 28c:	00008105 	andeq	r8, r0, r5, lsl #2
 290:	00022800 	andeq	r2, r2, r0, lsl #16
 294:	00002420 	andeq	r2, r0, r0, lsr #8
 298:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
 29c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 2a0:	00000057 	andeq	r0, r0, r7, asr r0
 2a4:	d1126f01 	tstle	r2, r1, lsl #30
 2a8:	05000001 	streq	r0, [r0, #-1]
 2ac:	00080403 	andeq	r0, r8, r3, lsl #8
 2b0:	00230e20 	eoreq	r0, r3, r0, lsr #28
 2b4:	7a010000 	bvc	402bc <startup-0x1ffbfd44>
 2b8:	00027913 	andeq	r7, r2, r3, lsl r9
 2bc:	ec030500 	cfstr32	mvfx0, [r3], {-0}
 2c0:	00200007 	eoreq	r0, r0, r7
 2c4:	0001d00f 	andeq	sp, r1, pc
 2c8:	06630100 	strbteq	r0, [r3], -r0, lsl #2
 2cc:	20000210 	andcs	r0, r0, r0, lsl r2
 2d0:	00000018 	andeq	r0, r0, r8, lsl r0
 2d4:	52109c01 	andspl	r9, r0, #256	; 0x100
 2d8:	01000002 	tsteq	r0, r2
 2dc:	015c064b 	cmpeq	ip, fp, asr #12
 2e0:	00b42000 	adcseq	r2, r4, r0
 2e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2e8:	00000329 	andeq	r0, r0, r9, lsr #6
 2ec:	00011611 	andeq	r1, r1, r1, lsl r6
 2f0:	1a4b0100 	bne	12c06f8 <startup-0x1ed3f908>
 2f4:	00000329 	andeq	r0, r0, r9, lsr #6
 2f8:	0e6c9102 	lgneqe	f1, f2
 2fc:	00000132 	andeq	r0, r0, r2, lsr r1
 300:	8f0d4c01 	svchi	0x000d4c01
 304:	02000000 	andeq	r0, r0, #0
 308:	370e7691 			; <UNDEFINED> instruction: 0x370e7691
 30c:	01000001 	tsteq	r0, r1
 310:	008f0d4d 	addeq	r0, pc, sp, asr #26
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	000d0e75 	andeq	r0, sp, r5, ror lr
 31c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 320:	00032f0a 	andeq	r2, r3, sl, lsl #30
 324:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 328:	79040a00 	stmdbvc	r4, {r9, fp}
 32c:	02000002 	andeq	r0, r0, #2
 330:	015e0201 	cmpeq	lr, r1, lsl #4
 334:	b4120000 	ldrlt	r0, [r2], #-0
 338:	01000001 	tsteq	r0, r1
 33c:	01400647 	cmpeq	r0, r7, asr #12
 340:	001c2000 	andseq	r2, ip, r0
 344:	9c010000 	stcls	0, cr0, [r1], {-0}
 348:	0000036b 	andeq	r0, r0, fp, ror #6
 34c:	00011611 	andeq	r1, r1, r1, lsl r6
 350:	18470100 	stmdane	r7, {r8}^
 354:	00000329 	andeq	r0, r0, r9, lsr #6
 358:	11749102 	cmnne	r4, r2, lsl #2
 35c:	0000003a 	andeq	r0, r0, sl, lsr r0
 360:	80244701 	eorhi	r4, r4, r1, lsl #14
 364:	02000001 	andeq	r0, r0, #1
 368:	10007091 	mulne	r0, r1, r0
 36c:	000001be 			; <UNDEFINED> instruction: 0x000001be
 370:	a8063c01 	stmdage	r6, {r0, sl, fp, ip, sp}
 374:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
 378:	01000000 	mrseq	r0, (UNDEF: 0)
 37c:	0003f79c 	muleq	r3, ip, r7
 380:	01161100 	tsteq	r6, r0, lsl #2
 384:	3c010000 	stccc	0, cr0, [r1], {-0}
 388:	0003291b 	andeq	r2, r3, fp, lsl r9
 38c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 390:	00023e0e 	andeq	r3, r2, lr, lsl #28
 394:	0c3d0100 	ldfeqs	f0, [sp], #-0
 398:	00000246 	andeq	r0, r0, r6, asr #4
 39c:	13609102 	cmnne	r0, #-2147483648	; 0x80000000
 3a0:	200000b6 	strhcs	r0, [r0], -r6
 3a4:	00000080 	andeq	r0, r0, r0, lsl #1
 3a8:	01006914 	tsteq	r0, r4, lsl r9
 3ac:	008f123e 	addeq	r1, pc, lr, lsr r2	; <UNPREDICTABLE>
 3b0:	91020000 	mrsls	r0, (UNDEF: 2)
 3b4:	00c01367 	sbceq	r1, r0, r7, ror #6
 3b8:	005e2000 	subseq	r2, lr, r0
 3bc:	78140000 	ldmdavc	r4, {}	; <UNPREDICTABLE>
 3c0:	113f0100 	teqne	pc, r0, lsl #2
 3c4:	0000008f 	andeq	r0, r0, pc, lsl #1
 3c8:	145f9102 	ldrbne	r9, [pc], #-258	; 3d0 <startup-0x1ffffc30>
 3cc:	40010079 	andmi	r0, r1, r9, ror r0
 3d0:	00008f11 	andeq	r8, r0, r1, lsl pc
 3d4:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
 3d8:	00787014 	rsbseq	r7, r8, r4, lsl r0
 3dc:	8f114101 	svchi	0x00114101
 3e0:	02000000 	andeq	r0, r0, #0
 3e4:	70145d91 	mulsvc	r4, r1, sp
 3e8:	42010079 	andmi	r0, r1, #121	; 0x79
 3ec:	00008f11 	andeq	r8, r0, r1, lsl pc
 3f0:	5c910200 	lfmpl	f0, 4, [r1], {0}
 3f4:	10000000 	andne	r0, r0, r0
 3f8:	00000263 	andeq	r0, r0, r3, ror #4
 3fc:	10063101 	andne	r3, r6, r1, lsl #2
 400:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
 404:	01000000 	mrseq	r0, (UNDEF: 0)
 408:	0004839c 	muleq	r4, ip, r3
 40c:	01161100 	tsteq	r6, r0, lsl #2
 410:	31010000 	mrscc	r0, (UNDEF: 1)
 414:	0003291a 	andeq	r2, r3, sl, lsl r9
 418:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 41c:	00023e0e 	andeq	r3, r2, lr, lsl #28
 420:	0c320100 	ldfeqs	f0, [r2], #-0
 424:	00000246 	andeq	r0, r0, r6, asr #4
 428:	13609102 	cmnne	r0, #-2147483648	; 0x80000000
 42c:	2000001e 	andcs	r0, r0, lr, lsl r0
 430:	00000080 	andeq	r0, r0, r0, lsl #1
 434:	01006914 	tsteq	r0, r4, lsl r9
 438:	008f1233 	addeq	r1, pc, r3, lsr r2	; <UNPREDICTABLE>
 43c:	91020000 	mrsls	r0, (UNDEF: 2)
 440:	00281367 	eoreq	r1, r8, r7, ror #6
 444:	005e2000 	subseq	r2, lr, r0
 448:	78140000 	ldmdavc	r4, {}	; <UNPREDICTABLE>
 44c:	11340100 	teqne	r4, r0, lsl #2
 450:	0000008f 	andeq	r0, r0, pc, lsl #1
 454:	145f9102 	ldrbne	r9, [pc], #-258	; 45c <startup-0x1ffffba4>
 458:	35010079 	strcc	r0, [r1, #-121]	; 0xffffff87
 45c:	00008f11 	andeq	r8, r0, r1, lsl pc
 460:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
 464:	00787014 	rsbseq	r7, r8, r4, lsl r0
 468:	8f113601 	svchi	0x00113601
 46c:	02000000 	andeq	r0, r0, #0
 470:	70145d91 	mulsvc	r4, r1, sp
 474:	37010079 	smlsdxcc	r1, r9, r0, r0
 478:	00008f11 	andeq	r8, r0, r1, lsl pc
 47c:	5c910200 	lfmpl	f0, 4, [r1], {0}
 480:	0f000000 	svceq	0x00000000
 484:	0000024a 	andeq	r0, r0, sl, asr #4
 488:	00062501 	andeq	r2, r6, r1, lsl #10
 48c:	0c200000 	stceq	0, cr0, [r0], #-0
 490:	01000000 	mrseq	r0, (UNDEF: 0)
 494:	03e1009c 	mvneq	r0, #156	; 0x9c
 498:	00040000 	andeq	r0, r4, r0
 49c:	00000143 	andeq	r0, r0, r3, asr #2
 4a0:	00880104 	addeq	r0, r8, r4, lsl #2
 4a4:	530c0000 	movwpl	r0, #49152	; 0xc000
 4a8:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
 4ac:	4c000001 	stcmi	0, cr0, [r0], {1}
 4b0:	06200002 	strteq	r0, [r0], -r2
 4b4:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
 4b8:	02000002 	andeq	r0, r0, #2
 4bc:	01020601 	tsteq	r2, r1, lsl #12
 4c0:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
 4c4:	02000000 	andeq	r0, r0, #0
 4c8:	0038182b 	eorseq	r1, r8, fp, lsr #16
 4cc:	01020000 	mrseq	r0, (UNDEF: 2)
 4d0:	00010008 	andeq	r0, r1, r8
 4d4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 4d8:	00000019 	andeq	r0, r0, r9, lsl r0
 4dc:	00004303 	andeq	r4, r0, r3, lsl #6
 4e0:	19390200 	ldmdbne	r9!, {r9}
 4e4:	00000052 	andeq	r0, r0, r2, asr r0
 4e8:	3c070202 	sfmcc	f0, 4, [r7], {2}
 4ec:	02000001 	andeq	r0, r0, #1
 4f0:	00ca0504 	sbceq	r0, sl, r4, lsl #10
 4f4:	2f030000 	svccs	0x00030000
 4f8:	02000000 	andeq	r0, r0, #0
 4fc:	006c194f 	rsbeq	r1, ip, pc, asr #18
 500:	04020000 	streq	r0, [r2], #-0
 504:	00012007 	andeq	r2, r1, r7
 508:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
 50c:	000000c5 	andeq	r0, r0, r5, asr #1
 510:	1b070802 	blne	1c2520 <startup-0x1fe3dae0>
 514:	04000001 	streq	r0, [r0], #-1
 518:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 51c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 520:	00012507 	andeq	r2, r1, r7, lsl #10
 524:	00ea0300 	rsceq	r0, sl, r0, lsl #6
 528:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 52c:	00002c13 	andeq	r2, r0, r3, lsl ip
 530:	00450300 	subeq	r0, r5, r0, lsl #6
 534:	24030000 	strcs	r0, [r3], #-0
 538:	00004614 	andeq	r4, r0, r4, lsl r6
 53c:	00310300 	eorseq	r0, r1, r0, lsl #6
 540:	30030000 	andcc	r0, r3, r0
 544:	00006014 	andeq	r6, r0, r4, lsl r0
 548:	01e90500 	mvneq	r0, r0, lsl #10
 54c:	04180000 	ldreq	r0, [r8], #-0
 550:	0150100c 	cmpeq	r0, ip
 554:	db060000 	blle	18055c <startup-0x1fe7faa4>
 558:	04000000 	streq	r0, [r0], #-0
 55c:	00a70e0d 	adceq	r0, r7, sp, lsl #28
 560:	06000000 	streq	r0, [r0], -r0
 564:	00000065 	andeq	r0, r0, r5, rrx
 568:	9b0e0e04 	blls	383d80 <startup-0x1fc7c280>
 56c:	04000000 	streq	r0, [r0], #-0
 570:	00023206 	andeq	r3, r2, r6, lsl #4
 574:	0e0f0400 	cfcpyseq	mvf0, mvf15
 578:	0000009b 	muleq	r0, fp, r0
 57c:	00d30606 	sbcseq	r0, r3, r6, lsl #12
 580:	10040000 	andne	r0, r4, r0
 584:	0000a70e 	andeq	sl, r0, lr, lsl #14
 588:	f2060800 	vadd.i8	d0, d6, d0
 58c:	04000000 	streq	r0, [r0], #-0
 590:	00a70e11 	adceq	r0, r7, r1, lsl lr
 594:	060c0000 	streq	r0, [ip], -r0
 598:	0000010e 	andeq	r0, r0, lr, lsl #2
 59c:	8f0d1204 	svchi	0x000d1204
 5a0:	10000000 	andne	r0, r0, r0
 5a4:	00006c06 	andeq	r6, r0, r6, lsl #24
 5a8:	0d130400 	cfldrseq	mvf0, [r3, #-0]
 5ac:	0000008f 	andeq	r0, r0, pc, lsl #1
 5b0:	007b0611 	rsbseq	r0, fp, r1, lsl r6
 5b4:	14040000 	strne	r0, [r4], #-0
 5b8:	00009b0e 	andeq	r9, r0, lr, lsl #22
 5bc:	f8061200 			; <UNDEFINED> instruction: 0xf8061200
 5c0:	04000000 	streq	r0, [r0], #-0
 5c4:	008f0d15 	addeq	r0, pc, r5, lsl sp	; <UNPREDICTABLE>
 5c8:	06140000 	ldreq	r0, [r4], -r0
 5cc:	000001d9 	ldrdeq	r0, [r0], -r9
 5d0:	8f0d1604 	svchi	0x000d1604
 5d4:	15000000 	strne	r0, [r0, #-0]
 5d8:	00000006 	andeq	r0, r0, r6
 5dc:	0e170400 	cfmulseq	mvf0, mvf7, mvf0
 5e0:	0000009b 	muleq	r0, fp, r0
 5e4:	4f030016 	svcmi	0x00030016
 5e8:	04000001 	streq	r0, [r0], #-1
 5ec:	00b30218 	adcseq	r0, r3, r8, lsl r2
 5f0:	80070000 	andhi	r0, r7, r0
 5f4:	01000002 	tsteq	r0, r2
 5f8:	06fc06aa 	ldrbteq	r0, [ip], sl, lsr #13
 5fc:	00562000 	subseq	r2, r6, r0
 600:	9c010000 	stcls	0, cr0, [r1], {-0}
 604:	0002a308 	andeq	sl, r2, r8, lsl #6
 608:	069f0100 	ldreq	r0, [pc], r0, lsl #2
 60c:	20000694 	mulcs	r0, r4, r6
 610:	00000068 	andeq	r0, r0, r8, rrx
 614:	01b79c01 			; <UNDEFINED> instruction: 0x01b79c01
 618:	9a090000 	bls	240620 <startup-0x1fdbf9e0>
 61c:	58200006 	stmdapl	r0!, {r1, r2}
 620:	0a000000 	beq	628 <startup-0x1ffff9d8>
 624:	000002c5 	andeq	r0, r0, r5, asr #5
 628:	8f12a001 	svchi	0x0012a001
 62c:	02000000 	andeq	r0, r0, #0
 630:	be097791 	mcrlt	7, 0, r7, cr9, cr1, {4}
 634:	22200006 	eorcs	r0, r0, #6
 638:	0b000000 	bleq	640 <startup-0x1ffff9c0>
 63c:	00646461 	rsbeq	r6, r4, r1, ror #8
 640:	8f16a301 	svchi	0x0016a301
 644:	02000000 	andeq	r0, r0, #0
 648:	00007691 	muleq	r0, r1, r6
 64c:	026f0800 	rsbeq	r0, pc, #0, 16
 650:	86010000 	strhi	r0, [r1], -r0
 654:	00055c06 	andeq	r5, r5, r6, lsl #24
 658:	00013820 	andeq	r3, r1, r0, lsr #16
 65c:	339c0100 	orrscc	r0, ip, #0, 2
 660:	0c000002 	stceq	0, cr0, [r0], {2}
 664:	86010078 			; <UNDEFINED> instruction: 0x86010078
 668:	00008f14 	andeq	r8, r0, r4, lsl pc
 66c:	5f910200 	svcpl	0x00910200
 670:	0100790c 	tsteq	r0, ip, lsl #18
 674:	008f1f86 	addeq	r1, pc, r6, lsl #31
 678:	91020000 	mrsls	r0, (UNDEF: 2)
 67c:	65730c5e 	ldrbvs	r0, [r3, #-3166]!	; 0xfffff3a2
 680:	86010074 			; <UNDEFINED> instruction: 0x86010074
 684:	00023327 	andeq	r3, r2, r7, lsr #6
 688:	5d910200 	lfmpl	f0, 4, [r1]
 68c:	0002750a 	andeq	r7, r2, sl, lsl #10
 690:	0d880100 	stfeqs	f0, [r8]
 694:	0000008f 	andeq	r0, r0, pc, lsl #1
 698:	0a659102 	beq	1964aa8 <startup-0x1e69b558>
 69c:	0000034e 	andeq	r0, r0, lr, asr #6
 6a0:	8f148801 	svchi	0x00148801
 6a4:	02000000 	andeq	r0, r0, #0
 6a8:	300a6791 	mulcc	sl, r1, r7
 6ac:	01000003 	tsteq	r0, r3
 6b0:	008f1a88 	addeq	r1, pc, r8, lsl #21
 6b4:	91020000 	mrsls	r0, (UNDEF: 2)
 6b8:	027b0a66 	rsbseq	r0, fp, #417792	; 0x66000
 6bc:	95010000 	strls	r0, [r1, #-0]
 6c0:	00008f0d 	andeq	r8, r0, sp, lsl #30
 6c4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 6c8:	02010200 	andeq	r0, r1, #0, 4
 6cc:	0000015e 	andeq	r0, r0, lr, asr r1
 6d0:	0002ca0d 	andeq	ip, r2, sp, lsl #20
 6d4:	09810100 	stmibeq	r1, {r8}
 6d8:	0000008f 	andeq	r0, r0, pc, lsl #1
 6dc:	20000532 	andcs	r0, r0, r2, lsr r5
 6e0:	0000002a 	andeq	r0, r0, sl, lsr #32
 6e4:	02649c01 	rsbeq	r9, r4, #256	; 0x100
 6e8:	300e0000 	andcc	r0, lr, r0
 6ec:	01000003 	tsteq	r0, r3
 6f0:	008f2381 	addeq	r2, pc, r1, lsl #7
 6f4:	91020000 	mrsls	r0, (UNDEF: 2)
 6f8:	dc080077 	stcle	0, cr0, [r8], {119}	; 0x77
 6fc:	01000002 	tsteq	r0, r2
 700:	04ec0679 	strbteq	r0, [ip], #1657	; 0x679
 704:	00462000 	subeq	r2, r6, r0
 708:	9c010000 	stcls	0, cr0, [r1], {-0}
 70c:	00000299 	muleq	r0, r9, r2
 710:	0002d70e 	andeq	sp, r2, lr, lsl #14
 714:	21790100 	cmncs	r9, r0, lsl #2
 718:	0000008f 	andeq	r0, r0, pc, lsl #1
 71c:	0e779102 	expeqs	f1, f2
 720:	00000330 	andeq	r0, r0, r0, lsr r3
 724:	8f2f7901 	svchi	0x002f7901
 728:	02000000 	andeq	r0, r0, #0
 72c:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
 730:	0000028d 	andeq	r0, r0, sp, lsl #5
 734:	ac067201 	sfmge	f7, 4, [r6], {1}
 738:	40200004 	eormi	r0, r0, r4
 73c:	01000000 	mrseq	r0, (UNDEF: 0)
 740:	0002ce9c 	muleq	r2, ip, lr
 744:	029b0e00 	addseq	r0, fp, #0, 28
 748:	72010000 	andvc	r0, r1, #0
 74c:	00008f24 	andeq	r8, r0, r4, lsr #30
 750:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 754:	0003300e 	andeq	r3, r3, lr
 758:	35720100 	ldrbcc	r0, [r2, #-256]!	; 0xffffff00
 75c:	0000008f 	andeq	r0, r0, pc, lsl #1
 760:	00769102 	rsbseq	r9, r6, r2, lsl #2
 764:	00030608 	andeq	r0, r3, r8, lsl #12
 768:	065e0100 	ldrbeq	r0, [lr], -r0, lsl #2
 76c:	2000042c 	andcs	r0, r0, ip, lsr #8
 770:	00000080 	andeq	r0, r0, r0, lsl #1
 774:	03039c01 	movweq	r9, #15361	; 0x3c01
 778:	9e0e0000 	cdpls	0, 0, cr0, cr14, cr0, {0}
 77c:	01000003 	tsteq	r0, r3
 780:	008f1c5e 	addeq	r1, pc, lr, asr ip	; <UNPREDICTABLE>
 784:	91020000 	mrsls	r0, (UNDEF: 2)
 788:	03300e77 	teqeq	r0, #1904	; 0x770
 78c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
 790:	00008f2b 	andeq	r8, r0, fp, lsr #30
 794:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 798:	02b80d00 	adcseq	r0, r8, #0, 26
 79c:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 7a0:	00008f09 	andeq	r8, r0, r9, lsl #30
 7a4:	00039c00 	andeq	r9, r3, r0, lsl #24
 7a8:	00009020 	andeq	r9, r0, r0, lsr #32
 7ac:	3c9c0100 	ldfccs	f0, [ip], {0}
 7b0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
 7b4:	00000330 	andeq	r0, r0, r0, lsr r3
 7b8:	8f1e4801 	svchi	0x001e4801
 7bc:	02000000 	andeq	r0, r0, #0
 7c0:	980a6f91 	stmdals	sl, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
 7c4:	01000003 	tsteq	r0, r3
 7c8:	008f0d50 	addeq	r0, pc, r0, asr sp	; <UNPREDICTABLE>
 7cc:	91020000 	mrsls	r0, (UNDEF: 2)
 7d0:	3b0f0077 	blcc	3c09b4 <startup-0x1fc3f64c>
 7d4:	01000003 	tsteq	r0, r3
 7d8:	032e0634 			; <UNDEFINED> instruction: 0x032e0634
 7dc:	006e2000 	rsbeq	r2, lr, r0
 7e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 7e4:	00000360 	andeq	r0, r0, r0, ror #6
 7e8:	0100630b 	tsteq	r0, fp, lsl #6
 7ec:	008f0d3b 	addeq	r0, pc, fp, lsr sp	; <UNPREDICTABLE>
 7f0:	91020000 	mrsls	r0, (UNDEF: 2)
 7f4:	29080077 	stmdbcs	r8, {r0, r1, r2, r4, r5, r6}
 7f8:	01000003 	tsteq	r0, r3
 7fc:	02d40621 	sbcseq	r0, r4, #34603008	; 0x2100000
 800:	005a2000 	subseq	r2, sl, r0
 804:	9c010000 	stcls	0, cr0, [r1], {-0}
 808:	00000386 	andeq	r0, r0, r6, lsl #7
 80c:	0003300e 	andeq	r3, r3, lr
 810:	20210100 	eorcs	r0, r1, r0, lsl #2
 814:	0000008f 	andeq	r0, r0, pc, lsl #1
 818:	00779102 	rsbseq	r9, r7, r2, lsl #2
 81c:	0002ef10 	andeq	lr, r2, r0, lsl pc
 820:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
 824:	20000290 	mulcs	r0, r0, r2
 828:	00000044 	andeq	r0, r0, r4, asr #32
 82c:	03b79c01 			; <UNDEFINED> instruction: 0x03b79c01
 830:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
 834:	251b0100 	ldrcs	r0, [fp, #-256]	; 0xffffff00
 838:	0000008f 	andeq	r0, r0, pc, lsl #1
 83c:	0b6f9102 	bleq	1be4c4c <startup-0x1e41b3b4>
 840:	1c010063 	stcne	0, cr0, [r1], {99}	; 0x63
 844:	00008f0d 	andeq	r8, r0, sp, lsl #30
 848:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 84c:	03141100 	tsteq	r4, #0, 2
 850:	15010000 	strne	r0, [r1, #-0]
 854:	00024c06 	andeq	r4, r2, r6, lsl #24
 858:	00004420 	andeq	r4, r0, r0, lsr #8
 85c:	0c9c0100 	ldfeqs	f0, [ip], {0}
 860:	15010078 	strne	r0, [r1, #-120]	; 0xffffff88
 864:	00008f23 	andeq	r8, r0, r3, lsr #30
 868:	6f910200 	svcvs	0x00910200
 86c:	0100630b 	tsteq	r0, fp, lsl #6
 870:	008f0d16 	addeq	r0, pc, r6, lsl sp	; <UNPREDICTABLE>
 874:	91020000 	mrsls	r0, (UNDEF: 2)
 878:	Address 0x0000000000000878 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000803 	andeq	r0, r0, r3, lsl #16
  38:	03011305 	movweq	r1, #4869	; 0x1305
  3c:	3a0b0b0e 	bcc	2c2c7c <startup-0x1fd3d384>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0013010b 	andseq	r0, r3, fp, lsl #2
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	0b390b3b 	bleq	e42d44 <startup-0x1f1bd2bc>
  54:	0b381349 	bleq	e04d80 <startup-0x1f1fb280>
  58:	0d070000 	stceq	0, cr0, [r7, #-0]
  5c:	3a080300 	bcc	200c64 <startup-0x1fdff39c>
  60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  64:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  68:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  98:	03193f01 	tsteq	r9, #1, 30
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  a4:	11134919 	tstne	r3, r9, lsl r9
  a8:	40061201 	andmi	r1, r6, r1, lsl #4
  ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  b0:	00001301 	andeq	r1, r0, r1, lsl #6
  b4:	0300340e 	movweq	r3, #1038	; 0x40e
  b8:	3b0b3a0e 	blcc	2ce8f8 <startup-0x1fd31708>
  bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  c0:	00180213 	andseq	r0, r8, r3, lsl r2
  c4:	002e0f00 	eoreq	r0, lr, r0, lsl #30
  c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  cc:	0b3b0b3a 	bleq	ec2dbc <startup-0x1f13d244>
  d0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  dc:	10000019 	andne	r0, r0, r9, lsl r0
  e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  e4:	0b3a0e03 	bleq	e838f8 <startup-0x1f17c708>
  e8:	0b390b3b 	bleq	e42ddc <startup-0x1f1bd224>
  ec:	01111927 	tsteq	r1, r7, lsr #18
  f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f8:	11000013 	tstne	r0, r3, lsl r0
  fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	13490b39 	movtne	r0, #39737	; 0x9b39
 108:	00001802 	andeq	r1, r0, r2, lsl #16
 10c:	3f012e12 	svccc	0x00012e12
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 118:	1119270b 	tstne	r9, fp, lsl #14
 11c:	40061201 	andmi	r1, r6, r1, lsl #4
 120:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 124:	00001301 	andeq	r1, r0, r1, lsl #6
 128:	11010b13 	tstne	r1, r3, lsl fp
 12c:	00061201 	andeq	r1, r6, r1, lsl #4
 130:	00341400 	eorseq	r1, r4, r0, lsl #8
 134:	0b3a0803 	bleq	e82148 <startup-0x1f17deb8>
 138:	0b390b3b 	bleq	e42e2c <startup-0x1f1bd1d4>
 13c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 140:	01000000 	mrseq	r0, (UNDEF: 0)
 144:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 148:	0e030b13 	vmoveq.32	d3[0], r0
 14c:	01110e1b 	tsteq	r1, fp, lsl lr
 150:	17100612 			; <UNDEFINED> instruction: 0x17100612
 154:	24020000 	strcs	r0, [r2], #-0
 158:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 15c:	000e030b 	andeq	r0, lr, fp, lsl #6
 160:	00160300 	andseq	r0, r6, r0, lsl #6
 164:	0b3a0e03 	bleq	e83978 <startup-0x1f17c688>
 168:	0b390b3b 	bleq	e42e5c <startup-0x1f1bd1a4>
 16c:	00001349 	andeq	r1, r0, r9, asr #6
 170:	0b002404 	bleq	9188 <startup-0x1fff6e78>
 174:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 178:	05000008 	streq	r0, [r0, #-8]
 17c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 180:	0b3a0b0b 	bleq	e82db4 <startup-0x1f17d24c>
 184:	0b390b3b 	bleq	e42e78 <startup-0x1f1bd188>
 188:	00001301 	andeq	r1, r0, r1, lsl #6
 18c:	03000d06 	movweq	r0, #3334	; 0xd06
 190:	3b0b3a0e 	blcc	2ce9d0 <startup-0x1fd31630>
 194:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 198:	000b3813 	andeq	r3, fp, r3, lsl r8
 19c:	002e0700 	eoreq	r0, lr, r0, lsl #14
 1a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1b4:	08000019 	stmdaeq	r0, {r0, r3, r4}
 1b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1bc:	0b3a0e03 	bleq	e839d0 <startup-0x1f17c630>
 1c0:	0b390b3b 	bleq	e42eb4 <startup-0x1f1bd14c>
 1c4:	01111927 	tsteq	r1, r7, lsr #18
 1c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1d0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 1d4:	0111010b 	tsteq	r1, fp, lsl #2
 1d8:	00000612 	andeq	r0, r0, r2, lsl r6
 1dc:	0300340a 	movweq	r3, #1034	; 0x40a
 1e0:	3b0b3a0e 	blcc	2cea20 <startup-0x1fd315e0>
 1e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1e8:	00180213 	andseq	r0, r8, r3, lsl r2
 1ec:	00340b00 	eorseq	r0, r4, r0, lsl #22
 1f0:	0b3a0803 	bleq	e82204 <startup-0x1f17ddfc>
 1f4:	0b390b3b 	bleq	e42ee8 <startup-0x1f1bd118>
 1f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1fc:	050c0000 	streq	r0, [ip, #-0]
 200:	3a080300 	bcc	200e08 <startup-0x1fdff1f8>
 204:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 20c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 210:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 214:	0b3a0e03 	bleq	e83a28 <startup-0x1f17c5d8>
 218:	0b390b3b 	bleq	e42f0c <startup-0x1f1bd0f4>
 21c:	13491927 	movtne	r1, #39207	; 0x9927
 220:	06120111 			; <UNDEFINED> instruction: 0x06120111
 224:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 228:	00130119 	andseq	r0, r3, r9, lsl r1
 22c:	00050e00 	andeq	r0, r5, r0, lsl #28
 230:	0b3a0e03 	bleq	e83a44 <startup-0x1f17c5bc>
 234:	0b390b3b 	bleq	e42f28 <startup-0x1f1bd0d8>
 238:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 23c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 240:	03193f01 	tsteq	r9, #1, 30
 244:	3b0b3a0e 	blcc	2cea84 <startup-0x1fd3157c>
 248:	110b390b 	tstne	fp, fp, lsl #18
 24c:	40061201 	andmi	r1, r6, r1, lsl #4
 250:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 254:	00001301 	andeq	r1, r0, r1, lsl #6
 258:	3f012e10 	svccc	0x00012e10
 25c:	3a0e0319 	bcc	380ec8 <startup-0x1fc7f138>
 260:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 264:	1119270b 	tstne	r9, fp, lsl #14
 268:	40061201 	andmi	r1, r6, r1, lsl #4
 26c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 270:	00001301 	andeq	r1, r0, r1, lsl #6
 274:	3f012e11 	svccc	0x00012e11
 278:	3a0e0319 	bcc	380ee4 <startup-0x1fc7f11c>
 27c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 280:	1119270b 	tstne	r9, fp, lsl #14
 284:	40061201 	andmi	r1, r6, r1, lsl #4
 288:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 28c:	Address 0x000000000000028c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000023c 	andeq	r0, r0, ip, lsr r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	04960002 	ldreq	r0, [r6], #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000024c 	andcs	r0, r0, ip, asr #4
  3c:	00000506 	andeq	r0, r0, r6, lsl #10
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000024c 	andcs	r0, r0, ip, asr #4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000024a 	andeq	r0, r0, sl, asr #4
   4:	00f90003 	rscseq	r0, r9, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
  24:	6f442f65 	svcvs	0x00442f65
  28:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  2c:	2f73746e 	svccs	0x0073746e
  30:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
  34:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
  38:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  3c:	33564c2f 	cmpcc	r6, #12032	; 0x2f00
  40:	646f632f 	strbtvs	r6, [pc], #-815	; 48 <startup-0x1fffffb8>
  44:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  48:	636c2f65 	cmnvs	ip, #404	; 0x194
  4c:	73696464 	cmnvc	r9, #100, 8	; 0x64000000
  50:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  54:	73752f00 	cmnvc	r5, #0, 30
  58:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
  5c:	6f6e2d6d 	svcvs	0x006e2d6d
  60:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  64:	2f696261 	svccs	0x00696261
  68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  6c:	2f656475 	svccs	0x00656475
  70:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  74:	00656e69 	rsbeq	r6, r5, r9, ror #28
  78:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
  7c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  80:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  84:	61652d65 	cmnvs	r5, r5, ror #26
  88:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
  8c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  90:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
  94:	2f007379 	svccs	0x00007379
  98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  9c:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
  a0:	6f442f65 	svcvs	0x00442f65
  a4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  a8:	2f73746e 	svccs	0x0073746e
  ac:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
  b0:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
  b4:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  b8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
  bc:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
  c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  c4:	73000065 	movwvc	r0, #101	; 0x65
  c8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  cc:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  d0:	00000100 	andeq	r0, r0, r0, lsl #2
  d4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
  d8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
  dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
  e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
  e4:	00000200 	andeq	r0, r0, r0, lsl #4
  e8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
  ec:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
  f0:	00030068 	andeq	r0, r3, r8, rrx
  f4:	62696c00 	rsbvs	r6, r9, #0, 24
  f8:	4f495047 	svcmi	0x00495047
  fc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 100:	05000000 	streq	r0, [r0, #-0]
 104:	02050001 	andeq	r0, r5, #1
 108:	20000000 	andcs	r0, r0, r0
 10c:	13012503 	movwne	r2, #5379	; 0x1503
 110:	0003025e 	andeq	r0, r3, lr, asr r2
 114:	20050101 	andcs	r0, r5, r1, lsl #2
 118:	10020500 	andne	r0, r2, r0, lsl #10
 11c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 120:	0c050130 	stfeqs	f0, [r5], {48}	; 0x30
 124:	3d12054b 	cfldr32cc	mvfx0, [r2, #-300]	; 0xfffffed4
 128:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 12c:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 130:	11052103 	tstne	r5, r3, lsl #2
 134:	03040200 	movweq	r0, #16896	; 0x4200
 138:	0025053c 	eoreq	r0, r5, ip, lsr r5
 13c:	83030402 	movwhi	r0, #13314	; 0x3402
 140:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 144:	002e0304 	eoreq	r0, lr, r4, lsl #6
 148:	83030402 	movwhi	r0, #13314	; 0x3402
 14c:	03040200 	movweq	r0, #16896	; 0x4200
 150:	00090559 	andeq	r0, r9, r9, asr r5
 154:	59030402 	stmdbpl	r3, {r1, sl}
 158:	02003005 	andeq	r3, r0, #5
 15c:	05ed0304 	strbeq	r0, [sp, #772]!	; 0x304
 160:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 164:	05055801 	streq	r5, [r5, #-2049]	; 0xfffff7ff
 168:	01040200 	mrseq	r0, R12_usr
 16c:	5f01052e 	svcpl	0x0001052e
 170:	055a2105 	ldrbeq	r2, [sl, #-261]	; 0xfffffefb
 174:	12054b0c 	andne	r4, r5, #12, 22	; 0x3000
 178:	4a05053d 	bmi	141674 <startup-0x1febe98c>
 17c:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 180:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 184:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 188:	25053c03 	strcs	r3, [r5, #-3075]	; 0xfffff3fd
 18c:	03040200 	movweq	r0, #16896	; 0x4200
 190:	00110583 	andseq	r0, r1, r3, lsl #11
 194:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 198:	03040200 	movweq	r0, #16896	; 0x4200
 19c:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
 1a0:	09055903 	stmdbeq	r5, {r0, r1, r8, fp, ip, lr}
 1a4:	03040200 	movweq	r0, #16896	; 0x4200
 1a8:	00300559 	eorseq	r0, r0, r9, asr r5
 1ac:	ed030402 	cfstrs	mvf0, [r3, #-8]
 1b0:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 1b4:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 1b8:	04020005 	streq	r0, [r2], #-5
 1bc:	01052e01 	tsteq	r5, r1, lsl #28
 1c0:	5a2e055f 	bpl	b81744 <startup-0x1f47e8bc>
 1c4:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
 1c8:	20054b01 	andcs	r4, r5, r1, lsl #22
 1cc:	4b22054c 	blmi	881704 <startup-0x1f77e8fc>
 1d0:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
 1d4:	22052e0d 	andcs	r2, r5, #13, 28	; 0xd0
 1d8:	2e35054b 	cdpcs	5, 3, cr0, cr5, cr11, {2}
 1dc:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 1e0:	08054b0a 	stmdaeq	r5, {r1, r3, r8, r9, fp, lr}
 1e4:	0012054c 	andseq	r0, r2, ip, asr #10
 1e8:	4a010402 	bmi	411f8 <startup-0x1ffbee08>
 1ec:	054b2b05 	strbeq	r2, [fp, #-2821]	; 0xfffff4fb
 1f0:	15052e1a 	strne	r2, [r5, #-3610]	; 0xfffff1e6
 1f4:	4c08054b 	cfstr32mi	mvfx0, [r8], {75}	; 0x4b
 1f8:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
 1fc:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 200:	1a054b2b 	bne	152eb4 <startup-0x1fead14c>
 204:	4b15052e 	blmi	5416c4 <startup-0x1fabe93c>
 208:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
 20c:	0905590d 	stmdbeq	r5, {r0, r2, r3, r8, fp, ip, lr}
 210:	3d1a052e 	cfldr32cc	mvfx0, [sl, #-184]	; 0xffffff48
 214:	590d0559 	stmdbpl	sp, {r0, r3, r4, r6, r8, sl}
 218:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 21c:	15053f01 	strne	r3, [r5, #-3841]	; 0xfffff0ff
 220:	2f0b054e 	svccs	0x000b054e
 224:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 228:	05772f01 	ldrbeq	r2, [r7, #-3841]!	; 0xfffff0ff
 22c:	052f2f05 	streq	r2, [pc, #-3845]!	; fffff32f <ball_geometry.4309+0xdfffeb2b>
 230:	0402000d 	streq	r0, [r2], #-13
 234:	2e1a0301 	cdpcs	3, 1, cr0, cr10, cr1, {0}
 238:	02000905 	andeq	r0, r0, #81920	; 0x14000
 23c:	002e0104 	eoreq	r0, lr, r4, lsl #2
 240:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 244:	01040200 	mrseq	r0, R12_usr
 248:	0004023b 	andeq	r0, r4, fp, lsr r2
 24c:	02ba0101 	adcseq	r0, sl, #1073741824	; 0x40000000
 250:	00030000 	andeq	r0, r3, r0
 254:	000000fa 	strdeq	r0, [r0], -sl
 258:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 25c:	0101000d 	tsteq	r1, sp
 260:	00000101 	andeq	r0, r0, r1, lsl #2
 264:	00000100 	andeq	r0, r0, r0, lsl #2
 268:	6f682f01 	svcvs	0x00682f01
 26c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; c0 <startup-0x1fffff40>
 270:	2f65766f 	svccs	0x0065766f
 274:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 278:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 27c:	6b732f73 	blvs	1ccc050 <startup-0x1e333fb0>
 280:	2f616c6f 	svccs	0x00616c6f
 284:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 288:	4c2f3238 	sfmmi	f3, 4, [pc], #-224	; 1b0 <startup-0x1ffffe50>
 28c:	632f3356 			; <UNDEFINED> instruction: 0x632f3356
 290:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 294:	2f657469 	svccs	0x00657469
 298:	6464636c 	strbtvs	r6, [r4], #-876	; 0xfffffc94
 29c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 2a0:	2f007961 	svccs	0x00007961
 2a4:	2f727375 	svccs	0x00727375
 2a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 2b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 2b4:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
 2b8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 2bc:	616d2f65 	cmnvs	sp, r5, ror #30
 2c0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 2c4:	752f0065 	strvc	r0, [pc, #-101]!	; 267 <startup-0x1ffffd99>
 2c8:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
 2cc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 2d0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 2d4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 2d8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 2dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 2e0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
 2e4:	6f682f00 	svcvs	0x00682f00
 2e8:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 13c <startup-0x1ffffec4>
 2ec:	2f65766f 	svccs	0x0065766f
 2f0:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 2f4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2f8:	6b732f73 	blvs	1ccc0cc <startup-0x1e333f34>
 2fc:	2f616c6f 	svccs	0x00616c6f
 300:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 304:	6c2f3238 	sfmvs	f3, 4, [pc], #-224	; 22c <startup-0x1ffffdd4>
 308:	2f736269 	svccs	0x00736269
 30c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 310:	00656475 	rsbeq	r6, r5, r5, ror r4
 314:	61726700 	cmnvs	r2, r0, lsl #14
 318:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 31c:	00632e73 	rsbeq	r2, r3, r3, ror lr
 320:	5f000001 	svcpl	0x00000001
 324:	61666564 	cmnvs	r6, r4, ror #10
 328:	5f746c75 	svcpl	0x00746c75
 32c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 330:	00682e73 	rsbeq	r2, r8, r3, ror lr
 334:	5f000002 	svcpl	0x00000002
 338:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 33c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 340:	00000300 	andeq	r0, r0, r0, lsl #6
 344:	4762696c 	strbmi	r6, [r2, -ip, ror #18]!
 348:	2e4f4950 			; <UNDEFINED> instruction: 0x2e4f4950
 34c:	00040068 	andeq	r0, r4, r8, rrx
 350:	26050000 	strcs	r0, [r5], -r0
 354:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
 358:	03200002 			; <UNDEFINED> instruction: 0x03200002
 35c:	17050114 	smladne	r5, r4, r1, r0
 360:	200d0567 	andcs	r0, sp, r7, ror #10
 364:	6607054b 	strvs	r0, [r7], -fp, asr #10
 368:	05750b05 	ldrbeq	r0, [r5, #-2821]!	; 0xfffff4fb
 36c:	01052015 	tsteq	r5, r5, lsl r0
 370:	6828053d 	stmdavs	r8!, {r0, r2, r3, r4, r5, r8, sl}
 374:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
 378:	0705200d 	streq	r2, [r5, -sp]
 37c:	c90b054b 	stmdbgt	fp, {r0, r1, r3, r6, r8, sl}
 380:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 384:	2c053d01 	stccs	13, cr3, [r5], {1}
 388:	67050568 	strvs	r0, [r5, -r8, ror #10]
 38c:	10030105 	andne	r0, r3, r5, lsl #2
 390:	030d05ba 	movweq	r0, #54714	; 0xd5ba
 394:	223d2072 	eorscs	r2, sp, #114	; 0x72
 398:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 39c:	053d223d 	ldreq	r2, [sp, #-573]!	; 0xfffffdc3
 3a0:	1b052201 	blne	148bac <startup-0x1feb7454>
 3a4:	3d05054c 	cfstr32cc	mvfx0, [r5, #-304]	; 0xfffffed0
 3a8:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 3ac:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 3b0:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 3b4:	04020009 	streq	r0, [r2], #-9
 3b8:	02003201 	andeq	r3, r0, #268435456	; 0x10000000
 3bc:	053d0104 	ldreq	r0, [sp, #-260]!	; 0xfffffefc
 3c0:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 3c4:	0b052f01 	bleq	14bfd0 <startup-0x1feb4030>
 3c8:	01040200 	mrseq	r0, R12_usr
 3cc:	0009053c 	andeq	r0, r9, ip, lsr r5
 3d0:	4b010402 	blmi	413e0 <startup-0x1ffbec20>
 3d4:	01040200 	mrseq	r0, R12_usr
 3d8:	0005053d 	andeq	r0, r5, sp, lsr r5
 3dc:	2f010402 	svccs	0x00010402
 3e0:	3d0b054c 	cfstr32cc	mvfx0, [fp, #-304]	; 0xfffffed0
 3e4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 3e8:	2a052f01 	bcs	14bff4 <startup-0x1feb400c>
 3ec:	670505ae 	strvs	r0, [r5, -lr, lsr #11]
 3f0:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 3f4:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 3f8:	2f593d2f 	svccs	0x00593d2f
 3fc:	2f21053d 	svccs	0x0021053d
 400:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 404:	0b054b05 	bleq	153020 <startup-0x1feacfe0>
 408:	2013053d 	andscs	r0, r3, sp, lsr r5
 40c:	4a07052f 	bmi	1c18d0 <startup-0x1fe3e730>
 410:	3d210905 			; <UNDEFINED> instruction: 0x3d210905
 414:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 418:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 41c:	0c053d21 	stceq	13, cr3, [r5], {33}	; 0x21
 420:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 424:	05ae3705 	streq	r3, [lr, #1797]!	; 0x705
 428:	1605910b 	strne	r9, [r5], -fp, lsl #2
 42c:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 430:	2f3d2f59 	svccs	0x003d2f59
 434:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 438:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 43c:	13053d21 	movwne	r3, #23841	; 0x5d21
 440:	4a070530 	bmi	1c1908 <startup-0x1fe3e6f8>
 444:	3d210905 			; <UNDEFINED> instruction: 0x3d210905
 448:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 44c:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 450:	01053d2f 	tsteq	r5, pc, lsr #26
 454:	7641053d 			; <UNDEFINED> instruction: 0x7641053d
 458:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 45c:	01053d59 	tsteq	r5, r9, asr sp
 460:	4c3b0583 	cfldr32mi	mvfx0, [fp], #-524	; 0xfffffdf4
 464:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 468:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 46c:	2f058301 	svccs	0x00058301
 470:	670c054c 	strvs	r0, [ip, -ip, asr #10]
 474:	67010559 	smlsdvs	r1, r9, r5, r0
 478:	054c2c05 	strbeq	r2, [ip, #-3077]	; 0xfffff3fb
 47c:	1305e70f 	movwne	lr, #22287	; 0x570f
 480:	580b053c 	stmdapl	fp, {r2, r3, r4, r5, r8, sl}
 484:	053d1605 	ldreq	r1, [sp, #-1541]!	; 0xfffff9fb
 488:	10053c1a 	andne	r3, r5, sl, lsl ip
 48c:	3c0a0590 	cfstr32cc	mvfx0, [sl], {144}	; 0x90
 490:	053d0805 	ldreq	r0, [sp, #-2053]!	; 0xfffff7fb
 494:	0b054b14 	bleq	1530ec <startup-0x1feacf14>
 498:	6814054b 	ldmdavs	r4, {r0, r1, r3, r6, r8, sl}
 49c:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 4a0:	05bb5b05 	ldreq	r5, [fp, #2821]!	; 0xb05
 4a4:	0505c914 	streq	ip, [r5, #-2324]	; 0xfffff6ec
 4a8:	ad080591 	cfstr32ge	mvfx0, [r8, #-580]	; 0xfffffdbc
 4ac:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 4b0:	0e059216 	mcreq	2, 0, r9, cr5, cr6, {0}
 4b4:	300505ba 			; <UNDEFINED> instruction: 0x300505ba
 4b8:	059f0105 	ldreq	r0, [pc, #261]	; 5c5 <startup-0x1ffffa3b>
 4bc:	12057621 	andne	r7, r5, #34603008	; 0x2100000
 4c0:	3c05053d 	cfstr32cc	mvfx0, [r5], {61}	; 0x3d
 4c4:	9f210905 	svcls	0x00210905
 4c8:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
 4cc:	0d053c09 	stceq	12, cr3, [r5, #-36]	; 0xffffffdc
 4d0:	03040200 	movweq	r0, #16896	; 0x4200
 4d4:	002c0521 	eoreq	r0, ip, r1, lsr #10
 4d8:	49030402 	stmdbmi	r3, {r1, sl}
 4dc:	02000905 	andeq	r0, r0, #81920	; 0x14000
 4e0:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 4e4:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 4e8:	05054702 	streq	r4, [r5, #-1794]	; 0xfffff8fe
 4ec:	01040200 	mrseq	r0, R12_usr
 4f0:	51010558 	tstpl	r1, r8, asr r5
 4f4:	055b1905 	ldrbeq	r1, [fp, #-2309]	; 0xfffff6fb
 4f8:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 4fc:	4b3f3d3d 	blmi	fcf9f8 <startup-0x1f030608>
 500:	4c4c4c4c 	mcrrmi	12, 4, r4, ip, cr12
 504:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
 508:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f52444f 	svcpl	0x0052444f
   4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
   8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
   c:	6f687300 	svcvs	0x00687300
  10:	49646c75 	stmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
  14:	65766f4d 	ldrbvs	r6, [r6, #-3917]!	; 0xfffff0b3
  18:	6f687300 	svcvs	0x00687300
  1c:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
  20:	6200746e 	andvs	r7, r0, #1845493760	; 0x6e000000
  24:	006c6c61 	rsbeq	r6, ip, r1, ror #24
  28:	61685374 	smcvs	34100	; 0x8534
  2c:	5f006570 	svcpl	0x00006570
  30:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  34:	5f323374 	svcpl	0x00323374
  38:	65760074 	ldrbvs	r0, [r6, #-116]!	; 0xffffff8c
  3c:	69636f6c 	stmdbvs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  40:	5f007974 	svcpl	0x00007974
  44:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  48:	5f363174 	svcpl	0x00363174
  4c:	6f700074 	svcvs	0x00700074
  50:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
  54:	62006e6f 	andvs	r6, r0, #1776	; 0x6f0
  58:	5f6c6c61 	svcpl	0x006c6c61
  5c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffec8 <ball_geometry.4309+0xdffff6c4>
  60:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  64:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
  68:	00726570 	rsbseq	r6, r2, r0, ror r5
  6c:	5f726469 	svcpl	0x00726469
  70:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
  74:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  78:	4900544e 	stmdbmi	r0, {r1, r2, r3, r6, sl, ip, lr}
  7c:	525f5244 	subspl	r5, pc, #68, 4	; 0x40000004
  80:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
  84:	00444556 	subeq	r4, r4, r6, asr r5
  88:	20554e47 	subscs	r4, r5, r7, asr #28
  8c:	20373143 	eorscs	r3, r7, r3, asr #2
  90:	2e312e39 	mrccs	14, 1, r2, cr1, cr9, {1}
  94:	6d2d2030 	stcvs	0, cr2, [sp, #-192]!	; 0xffffff40
  98:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  9c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  a0:	616f6c66 	cmnvs	pc, r6, ror #24
  a4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  a8:	6f733d69 	svcvs	0x00733d69
  ac:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  b0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  b4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  b8:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  bc:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  c0:	304f2d20 	subcc	r2, pc, r0, lsr #26
  c4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  c8:	6f6c2067 	svcvs	0x006c2067
  cc:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
  d0:	6f00746e 	svcvs	0x0000746e
  d4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
  d8:	6d007264 	sfmvs	f7, 4, [r0, #-400]	; 0xfffffe70
  dc:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
  e0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
  e4:	0073746e 	rsbseq	r7, r3, lr, ror #8
  e8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  ec:	5f38746e 	svcpl	0x0038746e
  f0:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0xffffff8c
  f4:	00727064 	rsbseq	r7, r2, r4, rrx
  f8:	5f72646f 	svcpl	0x0072646f
  fc:	00776f6c 	rsbseq	r6, r7, ip, ror #30
 100:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 104:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 108:	61686320 	cmnvs	r8, r0, lsr #6
 10c:	64690072 	strbtvs	r0, [r9], #-114	; 0xffffff8e
 110:	6f6c5f72 	svcvs	0x006c5f72
 114:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 118:	6c00666c 	stcvs	6, cr6, [r0], {108}	; 0x6c
 11c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 120:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 124:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 128:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 12c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 130:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
 134:	6e005877 	mcrvs	8, 0, r5, cr0, cr7, {3}
 138:	00597765 	subseq	r7, r9, r5, ror #14
 13c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 140:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 144:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 148:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 14c:	4700746e 	strmi	r7, [r0, -lr, ror #8]
 150:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
 154:	6e69616d 	powvsez	f6, f1, #5.0
 158:	624f7400 	subvs	r7, pc, #0, 8
 15c:	425f006a 	subsmi	r0, pc, #106	; 0x6a
 160:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 164:	506d756e 	rsbpl	r7, sp, lr, ror #10
 168:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 16c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
 170:	2f656d6f 	svccs	0x00656d6f
 174:	65766f6c 	ldrbvs	r6, [r6, #-3948]!	; 0xfffff094
 178:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 17c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 180:	732f7374 			; <UNDEFINED> instruction: 0x732f7374
 184:	616c6f6b 	cmnvs	ip, fp, ror #30
 188:	4144452f 	cmpmi	r4, pc, lsr #10
 18c:	2f323834 	svccs	0x00323834
 190:	2f33564c 	svccs	0x0033564c
 194:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 198:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 19c:	64636c2f 	strbtvs	r6, [r3], #-3119	; 0xfffff3d1
 1a0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 1a4:	0079616c 	rsbseq	r6, r9, ip, ror #2
 1a8:	696f7074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 1ac:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 1b0:	00776172 	rsbseq	r6, r7, r2, ror r1
 1b4:	5f746573 	svcpl	0x00746573
 1b8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 1bc:	6c630064 	stclvs	0, cr0, [r3], #-400	; 0xfffffe70
 1c0:	5f726165 	svcpl	0x00726165
 1c4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 1c8:	73007463 	movwvc	r7, #1123	; 0x463
 1cc:	00657a69 	rsbeq	r7, r5, r9, ror #20
 1d0:	5f707061 	svcpl	0x00707061
 1d4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1d8:	72646f00 	rsbvc	r6, r4, #0, 30
 1dc:	6769685f 			; <UNDEFINED> instruction: 0x6769685f
 1e0:	424f0068 	submi	r0, pc, #104	; 0x68
 1e4:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 1e8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 1ec:	682f006f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
 1f0:	2f656d6f 	svccs	0x00656d6f
 1f4:	65766f6c 	ldrbvs	r6, [r6, #-3948]!	; 0xfffff094
 1f8:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 1fc:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 200:	732f7374 			; <UNDEFINED> instruction: 0x732f7374
 204:	616c6f6b 	cmnvs	ip, fp, ror #30
 208:	4144452f 	cmpmi	r4, pc, lsr #10
 20c:	2f323834 	svccs	0x00323834
 210:	2f33564c 	svccs	0x0033564c
 214:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 218:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 21c:	64636c2f 	strbtvs	r6, [r3], #-3119	; 0xfffff3d1
 220:	70736964 	rsbsvc	r6, r3, r4, ror #18
 224:	2f79616c 	svccs	0x0079616c
 228:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 22c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 230:	544f0063 	strbpl	r0, [pc], #-99	; 238 <startup-0x1ffffdc8>
 234:	5345525f 	movtpl	r5, #21087	; 0x525f
 238:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 23c:	68730044 	ldmdavs	r3!, {r2, r6}^
 240:	00657061 	rsbeq	r7, r5, r1, rrx
 244:	50414853 	subpl	r4, r1, r3, asr r8
 248:	74730045 	ldrbtvc	r0, [r3], #-69	; 0xffffffbb
 24c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 250:	6f6d0070 	svcvs	0x006d0070
 254:	6f5f6576 	svcvs	0x005f6576
 258:	63656a62 	cmnvs	r5, #401408	; 0x62000
 25c:	6f6d0074 	svcvs	0x006d0074
 260:	64006576 	strvs	r6, [r0], #-1398	; 0xfffffa8a
 264:	5f776172 	svcpl	0x00776172
 268:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 26c:	70007463 	andvc	r7, r0, r3, ror #8
 270:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 274:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 278:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 27c:	00706d65 	rsbseq	r6, r0, r5, ror #26
 280:	70617267 	rsbvc	r7, r1, r7, ror #4
 284:	5f636968 	svcpl	0x00636968
 288:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 28c:	61726700 	cmnvs	r2, r0, lsl #14
 290:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 294:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 298:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 29c:	616d6d6f 	cmnvs	sp, pc, ror #26
 2a0:	6700646e 	strvs	r6, [r0, -lr, ror #8]
 2a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2b0:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2b4:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2bc:	5f636968 	svcpl	0x00636968
 2c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2c4:	67617000 	strbvs	r7, [r1, -r0]!
 2c8:	72670065 	rsbvc	r0, r7, #101	; 0x65
 2cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2d0:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2d4:	645f6461 	ldrbvs	r6, [pc], #-1121	; 2dc <startup-0x1ffffd24>
 2d8:	00617461 	rsbeq	r7, r1, r1, ror #8
 2dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e0:	5f636968 	svcpl	0x00636968
 2e4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2e8:	61645f65 	cmnvs	r4, r5, ror #30
 2ec:	67006174 	smlsdxvs	r0, r4, r1, r6
 2f0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2f4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2f8:	5f6c7274 	svcpl	0x006c7274
 2fc:	5f746962 	svcpl	0x00746962
 300:	61656c63 	cmnvs	r5, r3, ror #24
 304:	72670072 	rsbvc	r0, r7, #114	; 0x72
 308:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 30c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 310:	00657469 	rsbeq	r7, r5, r9, ror #8
 314:	70617267 	rsbvc	r7, r1, r7, ror #4
 318:	5f636968 	svcpl	0x00636968
 31c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 320:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 324:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 328:	6c657300 	stclvs	3, cr7, [r5], #-0
 32c:	5f746365 	svcpl	0x00746365
 330:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 334:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 338:	67007265 	strvs	r7, [r0, -r5, ror #4]
 33c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 340:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 344:	5f746961 	svcpl	0x00746961
 348:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 34c:	616d0079 	smcvs	53257	; 0xd009
 350:	2f006b73 	svccs	0x00006b73
 354:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 358:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 35c:	6f442f65 	svcvs	0x00442f65
 360:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 364:	2f73746e 	svccs	0x0073746e
 368:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 36c:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 370:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 374:	33564c2f 	cmpcc	r6, #12032	; 0x2f00
 378:	646f632f 	strbtvs	r6, [pc], #-815	; 380 <startup-0x1ffffc80>
 37c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 380:	636c2f65 	cmnvs	ip, #404	; 0x194
 384:	73696464 	cmnvc	r9, #100, 8	; 0x64000000
 388:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 38c:	6172672f 	cmnvs	r2, pc, lsr #14
 390:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 394:	00632e73 	rsbeq	r2, r3, r3, ror lr
 398:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 39c:	61766e72 	cmnvs	r6, r2, ror lr
 3a0:	0065756c 	rsbeq	r7, r5, ip, ror #10

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	72412820 	subvc	r2, r1, #32, 16	; 0x200000
   8:	52206863 	eorpl	r6, r0, #6488064	; 0x630000
   c:	736f7065 	cmnvc	pc, #101	; 0x65
  10:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
  14:	39202979 	stmdbcc	r0!, {r0, r3, r4, r5, r6, r8, fp, sp}
  18:	302e312e 	eorcc	r3, lr, lr, lsr #2
  1c:	43434700 	movtmi	r4, #14080	; 0x3700
  20:	4128203a 			; <UNDEFINED> instruction: 0x4128203a
  24:	20686372 	rsbcs	r6, r8, r2, ror r3
  28:	6f706552 	svcvs	0x00706552
  2c:	6f746973 	svcvs	0x00746973
  30:	20297972 	eorcs	r7, r9, r2, ror r9
  34:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
  38:	Address 0x0000000000000038 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000098 	muleq	r0, r8, r0
  30:	40140e41 	andsmi	r0, r4, r1, asr #28
  34:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
  38:	03864004 	orreq	r4, r6, #4
  3c:	40028740 	andmi	r8, r2, r0, asr #14
  40:	0e41018e 	dvfeqd	f0, f1, #0.5
  44:	070d4130 	smladxeq	sp, r0, r1, r4
  48:	00000024 	andeq	r0, r0, r4, lsr #32
  4c:	00000000 	andeq	r0, r0, r0
  50:	200000a8 	andcs	r0, r0, r8, lsr #1
  54:	00000098 	muleq	r0, r8, r0
  58:	40140e41 	andsmi	r0, r4, r1, asr #28
  5c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
  60:	03864004 	orreq	r4, r6, #4
  64:	40028740 	andmi	r8, r2, r0, asr #14
  68:	0e41018e 	dvfeqd	f0, f1, #0.5
  6c:	070d4130 	smladxeq	sp, r0, r1, r4
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000140 	andcs	r0, r0, r0, asr #2
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	2000015c 	andcs	r0, r0, ip, asr r1
  9c:	000000b4 	strheq	r0, [r0], -r4
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	00000018 	andeq	r0, r0, r8, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000210 	andcs	r0, r0, r0, lsl r2
  bc:	00000018 	andeq	r0, r0, r8, lsl r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  cc:	00000018 	andeq	r0, r0, r8, lsl r0
  d0:	00000000 	andeq	r0, r0, r0
  d4:	20000228 	andcs	r0, r0, r8, lsr #4
  d8:	00000024 	andeq	r0, r0, r4, lsr #32
  dc:	40080e41 	andmi	r0, r8, r1, asr #28
  e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  e8:	0000000c 	andeq	r0, r0, ip
  ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f0:	7c020001 	stcvc	0, cr0, [r2], {1}
  f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000e8 	andeq	r0, r0, r8, ror #1
 100:	2000024c 	andcs	r0, r0, ip, asr #4
 104:	00000044 	andeq	r0, r0, r4, asr #32
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	180e4101 	stmdane	lr, {r0, r8, lr}
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000e8 	andeq	r0, r0, r8, ror #1
 120:	20000290 	mulcs	r0, r0, r2
 124:	00000044 	andeq	r0, r0, r4, asr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000e8 	andeq	r0, r0, r8, ror #1
 140:	200002d4 	ldrdcs	r0, [r0], -r4
 144:	0000005a 	andeq	r0, r0, sl, asr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000e8 	andeq	r0, r0, r8, ror #1
 160:	2000032e 	andcs	r0, r0, lr, lsr #6
 164:	0000006e 	andeq	r0, r0, lr, rrx
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	000000e8 	andeq	r0, r0, r8, ror #1
 180:	2000039c 	mulcs	r0, ip, r3
 184:	00000090 	muleq	r0, r0, r0
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	180e4101 	stmdane	lr, {r0, r8, lr}
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	000000e8 	andeq	r0, r0, r8, ror #1
 1a0:	2000042c 	andcs	r0, r0, ip, lsr #8
 1a4:	00000080 	andeq	r0, r0, r0, lsl #1
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000000e8 	andeq	r0, r0, r8, ror #1
 1c0:	200004ac 	andcs	r0, r0, ip, lsr #9
 1c4:	00000040 	andeq	r0, r0, r0, asr #32
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	100e4101 	andne	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000000e8 	andeq	r0, r0, r8, ror #1
 1e0:	200004ec 	andcs	r0, r0, ip, ror #9
 1e4:	00000046 	andeq	r0, r0, r6, asr #32
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000000e8 	andeq	r0, r0, r8, ror #1
 200:	20000532 	andcs	r0, r0, r2, lsr r5
 204:	0000002a 	andeq	r0, r0, sl, lsr #32
 208:	40080e41 	andmi	r0, r8, r1, asr #28
 20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 210:	100e4101 	andne	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	00000024 	andeq	r0, r0, r4, lsr #32
 21c:	000000e8 	andeq	r0, r0, r8, ror #1
 220:	2000055c 	andcs	r0, r0, ip, asr r5
 224:	00000138 	andeq	r0, r0, r8, lsr r1
 228:	40140e41 	andsmi	r0, r4, r1, asr #28
 22c:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 230:	03864004 	orreq	r4, r6, #4
 234:	40028740 	andmi	r8, r2, r0, asr #14
 238:	0e41018e 	dvfeqd	f0, f1, #0.5
 23c:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	000000e8 	andeq	r0, r0, r8, ror #1
 248:	20000694 	mulcs	r0, r4, r6
 24c:	00000068 	andeq	r0, r0, r8, rrx
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	100e4101 	andne	r4, lr, r1, lsl #2
 25c:	00070d41 	andeq	r0, r7, r1, asr #26
 260:	00000018 	andeq	r0, r0, r8, lsl r0
 264:	000000e8 	andeq	r0, r0, r8, ror #1
 268:	200006fc 	strdcs	r0, [r0], -ip
 26c:	00000056 	andeq	r0, r0, r6, asr r0
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	070d4101 	streq	r4, [sp, -r1, lsl #2]
