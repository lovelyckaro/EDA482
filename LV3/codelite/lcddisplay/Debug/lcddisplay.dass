
./Debug/lcddisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fb90 	bl	20000728 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_ctrl_bit_set>:
#define LCD_SET_PAGE 0xB8
#define LCD_DISP_START 0xC0
#define LCD_BUSY 0x80

// choose graphic display, and set the bits from x
void graphic_ctrl_bit_set(uint8_t x) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
2000001c:	4a0c      	ldr	r2, [pc, #48]	; (20000050 <graphic_ctrl_bit_set+0x40>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7d12      	ldrb	r2, [r2, #20]
20000024:	701a      	strb	r2, [r3, #0]
    c |= (x & ~BITMASK_SELECT);
20000026:	1dfb      	adds	r3, r7, #7
20000028:	781b      	ldrb	r3, [r3, #0]
2000002a:	b25b      	sxtb	r3, r3
2000002c:	2204      	movs	r2, #4
2000002e:	4393      	bics	r3, r2
20000030:	b25a      	sxtb	r2, r3
20000032:	187b      	adds	r3, r7, r1
20000034:	781b      	ldrb	r3, [r3, #0]
20000036:	b25b      	sxtb	r3, r3
20000038:	4313      	orrs	r3, r2
2000003a:	b25a      	sxtb	r2, r3
2000003c:	187b      	adds	r3, r7, r1
2000003e:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000040:	4a03      	ldr	r2, [pc, #12]	; (20000050 <graphic_ctrl_bit_set+0x40>)
20000042:	187b      	adds	r3, r7, r1
20000044:	781b      	ldrb	r3, [r3, #0]
20000046:	7513      	strb	r3, [r2, #20]
}
20000048:	46c0      	nop			; (mov r8, r8)
2000004a:	46bd      	mov	sp, r7
2000004c:	b004      	add	sp, #16
2000004e:	bd80      	pop	{r7, pc}
20000050:	40021000 	andmi	r1, r2, r0

20000054 <graphic_ctrl_bit_clear>:
// Choose graphic display, and clear the bits from x
void graphic_ctrl_bit_clear(uint8_t x) {
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	0002      	movs	r2, r0
2000005c:	1dfb      	adds	r3, r7, #7
2000005e:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
20000060:	4a0c      	ldr	r2, [pc, #48]	; (20000094 <graphic_ctrl_bit_clear+0x40>)
20000062:	210f      	movs	r1, #15
20000064:	187b      	adds	r3, r7, r1
20000066:	7d12      	ldrb	r2, [r2, #20]
20000068:	701a      	strb	r2, [r3, #0]
    c &= (~x & ~BITMASK_SELECT); 
2000006a:	1dfb      	adds	r3, r7, #7
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	43db      	mvns	r3, r3
20000070:	b2db      	uxtb	r3, r3
20000072:	187a      	adds	r2, r7, r1
20000074:	7812      	ldrb	r2, [r2, #0]
20000076:	4013      	ands	r3, r2
20000078:	b2da      	uxtb	r2, r3
2000007a:	0008      	movs	r0, r1
2000007c:	187b      	adds	r3, r7, r1
2000007e:	2104      	movs	r1, #4
20000080:	438a      	bics	r2, r1
20000082:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000084:	4a03      	ldr	r2, [pc, #12]	; (20000094 <graphic_ctrl_bit_clear+0x40>)
20000086:	183b      	adds	r3, r7, r0
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	7513      	strb	r3, [r2, #20]
}
2000008c:	46c0      	nop			; (mov r8, r8)
2000008e:	46bd      	mov	sp, r7
20000090:	b004      	add	sp, #16
20000092:	bd80      	pop	{r7, pc}
20000094:	40021000 	andmi	r1, r2, r0

20000098 <select_controller>:
// Select chip
void select_controller(uint8_t controller) {
20000098:	b580      	push	{r7, lr}
2000009a:	b082      	sub	sp, #8
2000009c:	af00      	add	r7, sp, #0
2000009e:	0002      	movs	r2, r0
200000a0:	1dfb      	adds	r3, r7, #7
200000a2:	701a      	strb	r2, [r3, #0]
    switch (controller) {
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	781b      	ldrb	r3, [r3, #0]
200000a8:	2b08      	cmp	r3, #8
200000aa:	d00c      	beq.n	200000c6 <select_controller+0x2e>
200000ac:	dc02      	bgt.n	200000b4 <select_controller+0x1c>
200000ae:	2b00      	cmp	r3, #0
200000b0:	d005      	beq.n	200000be <select_controller+0x26>
            break;
        case BITMASK_CS1 | BITMASK_CS2:
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
            break;
    }
}
200000b2:	e01a      	b.n	200000ea <select_controller+0x52>
    switch (controller) {
200000b4:	2b10      	cmp	r3, #16
200000b6:	d00d      	beq.n	200000d4 <select_controller+0x3c>
200000b8:	2b18      	cmp	r3, #24
200000ba:	d012      	beq.n	200000e2 <select_controller+0x4a>
}
200000bc:	e015      	b.n	200000ea <select_controller+0x52>
            graphic_ctrl_bit_clear (BITMASK_CS1 | BITMASK_CS2);
200000be:	2018      	movs	r0, #24
200000c0:	f7ff ffc8 	bl	20000054 <graphic_ctrl_bit_clear>
            break;
200000c4:	e011      	b.n	200000ea <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1);
200000c6:	2008      	movs	r0, #8
200000c8:	f7ff ffa2 	bl	20000010 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS2);
200000cc:	2010      	movs	r0, #16
200000ce:	f7ff ffc1 	bl	20000054 <graphic_ctrl_bit_clear>
            break;
200000d2:	e00a      	b.n	200000ea <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS2);
200000d4:	2010      	movs	r0, #16
200000d6:	f7ff ff9b 	bl	20000010 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS1);
200000da:	2008      	movs	r0, #8
200000dc:	f7ff ffba 	bl	20000054 <graphic_ctrl_bit_clear>
            break;
200000e0:	e003      	b.n	200000ea <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
200000e2:	2018      	movs	r0, #24
200000e4:	f7ff ff94 	bl	20000010 <graphic_ctrl_bit_set>
            break;
200000e8:	46c0      	nop			; (mov r8, r8)
}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	46bd      	mov	sp, r7
200000ee:	b002      	add	sp, #8
200000f0:	bd80      	pop	{r7, pc}

200000f2 <graphic_wait_ready>:

void graphic_wait_ready() {
200000f2:	b580      	push	{r7, lr}
200000f4:	b082      	sub	sp, #8
200000f6:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(BITMASK_E);
200000f8:	2040      	movs	r0, #64	; 0x40
200000fa:	f7ff ffab 	bl	20000054 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
200000fe:	4b15      	ldr	r3, [pc, #84]	; (20000154 <graphic_wait_ready+0x62>)
20000100:	4a15      	ldr	r2, [pc, #84]	; (20000158 <graphic_wait_ready+0x66>)
20000102:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RW);
20000104:	2002      	movs	r0, #2
20000106:	f7ff ff83 	bl	20000010 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(BITMASK_RS);
2000010a:	2001      	movs	r0, #1
2000010c:	f7ff ffa2 	bl	20000054 <graphic_ctrl_bit_clear>
    delay_500ns();
20000110:	f000 fb2e 	bl	20000770 <delay_500ns>
    
    uint8_t c;
    do {
        graphic_ctrl_bit_set(BITMASK_E);
20000114:	2040      	movs	r0, #64	; 0x40
20000116:	f7ff ff7b 	bl	20000010 <graphic_ctrl_bit_set>
        delay_500ns();
2000011a:	f000 fb29 	bl	20000770 <delay_500ns>
        c = GPIO_E->idr_high & LCD_BUSY;
2000011e:	4b0d      	ldr	r3, [pc, #52]	; (20000154 <graphic_wait_ready+0x62>)
20000120:	7c5b      	ldrb	r3, [r3, #17]
20000122:	b2da      	uxtb	r2, r3
20000124:	1dfb      	adds	r3, r7, #7
20000126:	217f      	movs	r1, #127	; 0x7f
20000128:	438a      	bics	r2, r1
2000012a:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(BITMASK_E);
2000012c:	2040      	movs	r0, #64	; 0x40
2000012e:	f7ff ff91 	bl	20000054 <graphic_ctrl_bit_clear>
        delay_500ns();
20000132:	f000 fb1d 	bl	20000770 <delay_500ns>
    }while(c);
20000136:	1dfb      	adds	r3, r7, #7
20000138:	781b      	ldrb	r3, [r3, #0]
2000013a:	2b00      	cmp	r3, #0
2000013c:	d1ea      	bne.n	20000114 <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(BITMASK_E);
2000013e:	2040      	movs	r0, #64	; 0x40
20000140:	f7ff ff66 	bl	20000010 <graphic_ctrl_bit_set>
    GPIO_E->moder = 0x55555555;
20000144:	4b03      	ldr	r3, [pc, #12]	; (20000154 <graphic_wait_ready+0x62>)
20000146:	4a05      	ldr	r2, [pc, #20]	; (2000015c <graphic_wait_ready+0x6a>)
20000148:	601a      	str	r2, [r3, #0]
}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	46bd      	mov	sp, r7
2000014e:	b002      	add	sp, #8
20000150:	bd80      	pop	{r7, pc}
20000152:	46c0      	nop			; (mov r8, r8)
20000154:	40021000 	andmi	r1, r2, r0
20000158:	00005555 	andeq	r5, r0, r5, asr r5
2000015c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000160 <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
20000160:	b580      	push	{r7, lr}
20000162:	b084      	sub	sp, #16
20000164:	af00      	add	r7, sp, #0
20000166:	0002      	movs	r2, r0
20000168:	1dfb      	adds	r3, r7, #7
2000016a:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
2000016c:	2040      	movs	r0, #64	; 0x40
2000016e:	f7ff ff71 	bl	20000054 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
20000172:	4b1c      	ldr	r3, [pc, #112]	; (200001e4 <graphic_read+0x84>)
20000174:	4a1c      	ldr	r2, [pc, #112]	; (200001e8 <graphic_read+0x88>)
20000176:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RS | BITMASK_RW);
20000178:	2003      	movs	r0, #3
2000017a:	f7ff ff49 	bl	20000010 <graphic_ctrl_bit_set>
    select_controller(controller);
2000017e:	1dfb      	adds	r3, r7, #7
20000180:	781b      	ldrb	r3, [r3, #0]
20000182:	0018      	movs	r0, r3
20000184:	f7ff ff88 	bl	20000098 <select_controller>
    delay_500ns();
20000188:	f000 faf2 	bl	20000770 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
2000018c:	2040      	movs	r0, #64	; 0x40
2000018e:	f7ff ff3f 	bl	20000010 <graphic_ctrl_bit_set>
    delay_500ns();
20000192:	f000 faed 	bl	20000770 <delay_500ns>
    uint8_t returnvalue = GPIO_E->idr_high;
20000196:	4a13      	ldr	r2, [pc, #76]	; (200001e4 <graphic_read+0x84>)
20000198:	230f      	movs	r3, #15
2000019a:	18fb      	adds	r3, r7, r3
2000019c:	7c52      	ldrb	r2, [r2, #17]
2000019e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff57 	bl	20000054 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555;
200001a6:	4b0f      	ldr	r3, [pc, #60]	; (200001e4 <graphic_read+0x84>)
200001a8:	4a10      	ldr	r2, [pc, #64]	; (200001ec <graphic_read+0x8c>)
200001aa:	601a      	str	r2, [r3, #0]
    if(controller & BITMASK_CS1) {
200001ac:	1dfb      	adds	r3, r7, #7
200001ae:	781b      	ldrb	r3, [r3, #0]
200001b0:	2208      	movs	r2, #8
200001b2:	4013      	ands	r3, r2
200001b4:	d004      	beq.n	200001c0 <graphic_read+0x60>
        select_controller(BITMASK_CS1);
200001b6:	2008      	movs	r0, #8
200001b8:	f7ff ff6e 	bl	20000098 <select_controller>
        graphic_wait_ready();
200001bc:	f7ff ff99 	bl	200000f2 <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	781b      	ldrb	r3, [r3, #0]
200001c4:	2210      	movs	r2, #16
200001c6:	4013      	ands	r3, r2
200001c8:	d004      	beq.n	200001d4 <graphic_read+0x74>
        select_controller(BITMASK_CS1);
200001ca:	2008      	movs	r0, #8
200001cc:	f7ff ff64 	bl	20000098 <select_controller>
        graphic_wait_ready();
200001d0:	f7ff ff8f 	bl	200000f2 <graphic_wait_ready>
    }
    return returnvalue;
200001d4:	230f      	movs	r3, #15
200001d6:	18fb      	adds	r3, r7, r3
200001d8:	781b      	ldrb	r3, [r3, #0]
}
200001da:	0018      	movs	r0, r3
200001dc:	46bd      	mov	sp, r7
200001de:	b004      	add	sp, #16
200001e0:	bd80      	pop	{r7, pc}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	40021000 	andmi	r1, r2, r0
200001e8:	00005555 	andeq	r5, r0, r5, asr r5
200001ec:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001f0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
200001f0:	b580      	push	{r7, lr}
200001f2:	b082      	sub	sp, #8
200001f4:	af00      	add	r7, sp, #0
200001f6:	0002      	movs	r2, r0
200001f8:	1dfb      	adds	r3, r7, #7
200001fa:	701a      	strb	r2, [r3, #0]
200001fc:	1dbb      	adds	r3, r7, #6
200001fe:	1c0a      	adds	r2, r1, #0
20000200:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_high = value;
20000202:	4a1a      	ldr	r2, [pc, #104]	; (2000026c <graphic_write+0x7c>)
20000204:	1dfb      	adds	r3, r7, #7
20000206:	781b      	ldrb	r3, [r3, #0]
20000208:	7553      	strb	r3, [r2, #21]
    select_controller(controller);
2000020a:	1dbb      	adds	r3, r7, #6
2000020c:	781b      	ldrb	r3, [r3, #0]
2000020e:	0018      	movs	r0, r3
20000210:	f7ff ff42 	bl	20000098 <select_controller>
    delay_500ns();
20000214:	f000 faac 	bl	20000770 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
20000218:	2040      	movs	r0, #64	; 0x40
2000021a:	f7ff fef9 	bl	20000010 <graphic_ctrl_bit_set>
    delay_500ns();
2000021e:	f000 faa7 	bl	20000770 <delay_500ns>
    graphic_ctrl_bit_clear(BITMASK_E);
20000222:	2040      	movs	r0, #64	; 0x40
20000224:	f7ff ff16 	bl	20000054 <graphic_ctrl_bit_clear>
    if(controller & BITMASK_CS1) {
20000228:	1dbb      	adds	r3, r7, #6
2000022a:	781b      	ldrb	r3, [r3, #0]
2000022c:	2208      	movs	r2, #8
2000022e:	4013      	ands	r3, r2
20000230:	d004      	beq.n	2000023c <graphic_write+0x4c>
        select_controller(BITMASK_CS1);
20000232:	2008      	movs	r0, #8
20000234:	f7ff ff30 	bl	20000098 <select_controller>
        graphic_wait_ready();
20000238:	f7ff ff5b 	bl	200000f2 <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
2000023c:	1dbb      	adds	r3, r7, #6
2000023e:	781b      	ldrb	r3, [r3, #0]
20000240:	2210      	movs	r2, #16
20000242:	4013      	ands	r3, r2
20000244:	d004      	beq.n	20000250 <graphic_write+0x60>
        select_controller(BITMASK_CS2);
20000246:	2010      	movs	r0, #16
20000248:	f7ff ff26 	bl	20000098 <select_controller>
        graphic_wait_ready();
2000024c:	f7ff ff51 	bl	200000f2 <graphic_wait_ready>
    }
    GPIO_E->odr_high = 0;
20000250:	4b06      	ldr	r3, [pc, #24]	; (2000026c <graphic_write+0x7c>)
20000252:	2200      	movs	r2, #0
20000254:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(BITMASK_E);
20000256:	2040      	movs	r0, #64	; 0x40
20000258:	f7ff feda 	bl	20000010 <graphic_ctrl_bit_set>
    select_controller(0);
2000025c:	2000      	movs	r0, #0
2000025e:	f7ff ff1b 	bl	20000098 <select_controller>
}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	46bd      	mov	sp, r7
20000266:	b002      	add	sp, #8
20000268:	bd80      	pop	{r7, pc}
2000026a:	46c0      	nop			; (mov r8, r8)
2000026c:	40021000 	andmi	r1, r2, r0

20000270 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller) {
20000270:	b580      	push	{r7, lr}
20000272:	b082      	sub	sp, #8
20000274:	af00      	add	r7, sp, #0
20000276:	0002      	movs	r2, r0
20000278:	1dfb      	adds	r3, r7, #7
2000027a:	701a      	strb	r2, [r3, #0]
2000027c:	1dbb      	adds	r3, r7, #6
2000027e:	1c0a      	adds	r2, r1, #0
20000280:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
20000282:	2040      	movs	r0, #64	; 0x40
20000284:	f7ff fee6 	bl	20000054 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000288:	1dbb      	adds	r3, r7, #6
2000028a:	781b      	ldrb	r3, [r3, #0]
2000028c:	0018      	movs	r0, r3
2000028e:	f7ff ff03 	bl	20000098 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RS | BITMASK_RW);
20000292:	2003      	movs	r0, #3
20000294:	f7ff fede 	bl	20000054 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000298:	1dbb      	adds	r3, r7, #6
2000029a:	781a      	ldrb	r2, [r3, #0]
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	0011      	movs	r1, r2
200002a2:	0018      	movs	r0, r3
200002a4:	f7ff ffa4 	bl	200001f0 <graphic_write>
}
200002a8:	46c0      	nop			; (mov r8, r8)
200002aa:	46bd      	mov	sp, r7
200002ac:	b002      	add	sp, #8
200002ae:	bd80      	pop	{r7, pc}

200002b0 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
200002b0:	b580      	push	{r7, lr}
200002b2:	b082      	sub	sp, #8
200002b4:	af00      	add	r7, sp, #0
200002b6:	0002      	movs	r2, r0
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	701a      	strb	r2, [r3, #0]
200002bc:	1dbb      	adds	r3, r7, #6
200002be:	1c0a      	adds	r2, r1, #0
200002c0:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
200002c2:	2040      	movs	r0, #64	; 0x40
200002c4:	f7ff fec6 	bl	20000054 <graphic_ctrl_bit_clear>
    select_controller(controller);
200002c8:	1dbb      	adds	r3, r7, #6
200002ca:	781b      	ldrb	r3, [r3, #0]
200002cc:	0018      	movs	r0, r3
200002ce:	f7ff fee3 	bl	20000098 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RW);
200002d2:	2002      	movs	r0, #2
200002d4:	f7ff febe 	bl	20000054 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(BITMASK_RS);
200002d8:	2001      	movs	r0, #1
200002da:	f7ff fe99 	bl	20000010 <graphic_ctrl_bit_set>
    graphic_write(data, controller);
200002de:	1dbb      	adds	r3, r7, #6
200002e0:	781a      	ldrb	r2, [r3, #0]
200002e2:	1dfb      	adds	r3, r7, #7
200002e4:	781b      	ldrb	r3, [r3, #0]
200002e6:	0011      	movs	r1, r2
200002e8:	0018      	movs	r0, r3
200002ea:	f7ff ff81 	bl	200001f0 <graphic_write>
}
200002ee:	46c0      	nop			; (mov r8, r8)
200002f0:	46bd      	mov	sp, r7
200002f2:	b002      	add	sp, #8
200002f4:	bd80      	pop	{r7, pc}

200002f6 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller) {
200002f6:	b580      	push	{r7, lr}
200002f8:	b082      	sub	sp, #8
200002fa:	af00      	add	r7, sp, #0
200002fc:	0002      	movs	r2, r0
200002fe:	1dfb      	adds	r3, r7, #7
20000300:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
20000302:	1dfb      	adds	r3, r7, #7
20000304:	781b      	ldrb	r3, [r3, #0]
20000306:	0018      	movs	r0, r3
20000308:	f7ff ff2a 	bl	20000160 <graphic_read>
    return graphic_read(controller);
2000030c:	1dfb      	adds	r3, r7, #7
2000030e:	781b      	ldrb	r3, [r3, #0]
20000310:	0018      	movs	r0, r3
20000312:	f7ff ff25 	bl	20000160 <graphic_read>
20000316:	0003      	movs	r3, r0
}
20000318:	0018      	movs	r0, r3
2000031a:	46bd      	mov	sp, r7
2000031c:	b002      	add	sp, #8
2000031e:	bd80      	pop	{r7, pc}

20000320 <pixel>:

void pixel(uint8_t x, uint8_t y, bool set) {
20000320:	b5f0      	push	{r4, r5, r6, r7, lr}
20000322:	b085      	sub	sp, #20
20000324:	af00      	add	r7, sp, #0
20000326:	0004      	movs	r4, r0
20000328:	0008      	movs	r0, r1
2000032a:	0011      	movs	r1, r2
2000032c:	1dfb      	adds	r3, r7, #7
2000032e:	1c22      	adds	r2, r4, #0
20000330:	701a      	strb	r2, [r3, #0]
20000332:	1dbb      	adds	r3, r7, #6
20000334:	1c02      	adds	r2, r0, #0
20000336:	701a      	strb	r2, [r3, #0]
20000338:	1d7b      	adds	r3, r7, #5
2000033a:	1c0a      	adds	r2, r1, #0
2000033c:	701a      	strb	r2, [r3, #0]
    // Create bitmask for the pixel
    uint8_t index, mask, controller;
    index = (y-1) / 8;
2000033e:	1dbb      	adds	r3, r7, #6
20000340:	781b      	ldrb	r3, [r3, #0]
20000342:	3b01      	subs	r3, #1
20000344:	2b00      	cmp	r3, #0
20000346:	da00      	bge.n	2000034a <pixel+0x2a>
20000348:	3307      	adds	r3, #7
2000034a:	10db      	asrs	r3, r3, #3
2000034c:	001a      	movs	r2, r3
2000034e:	230d      	movs	r3, #13
20000350:	18fb      	adds	r3, r7, r3
20000352:	701a      	strb	r2, [r3, #0]
    mask = 0x1 << ((y-1) % 8);
20000354:	1dbb      	adds	r3, r7, #6
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	3b01      	subs	r3, #1
2000035a:	4a3e      	ldr	r2, [pc, #248]	; (20000454 <pixel+0x134>)
2000035c:	4013      	ands	r3, r2
2000035e:	d504      	bpl.n	2000036a <pixel+0x4a>
20000360:	3b01      	subs	r3, #1
20000362:	2208      	movs	r2, #8
20000364:	4252      	negs	r2, r2
20000366:	4313      	orrs	r3, r2
20000368:	3301      	adds	r3, #1
2000036a:	001a      	movs	r2, r3
2000036c:	2301      	movs	r3, #1
2000036e:	4093      	lsls	r3, r2
20000370:	001a      	movs	r2, r3
20000372:	230f      	movs	r3, #15
20000374:	18fb      	adds	r3, r7, r3
20000376:	701a      	strb	r2, [r3, #0]
    if (x > 64) {
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	781b      	ldrb	r3, [r3, #0]
2000037c:	2b40      	cmp	r3, #64	; 0x40
2000037e:	d909      	bls.n	20000394 <pixel+0x74>
        controller = BITMASK_CS2;
20000380:	230e      	movs	r3, #14
20000382:	18fb      	adds	r3, r7, r3
20000384:	2210      	movs	r2, #16
20000386:	701a      	strb	r2, [r3, #0]
        x -= 65;
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	1dfa      	adds	r2, r7, #7
2000038c:	7812      	ldrb	r2, [r2, #0]
2000038e:	3a41      	subs	r2, #65	; 0x41
20000390:	701a      	strb	r2, [r3, #0]
20000392:	e008      	b.n	200003a6 <pixel+0x86>
    }else {
        controller = BITMASK_CS1;
20000394:	230e      	movs	r3, #14
20000396:	18fb      	adds	r3, r7, r3
20000398:	2208      	movs	r2, #8
2000039a:	701a      	strb	r2, [r3, #0]
        x--;
2000039c:	1dfb      	adds	r3, r7, #7
2000039e:	781a      	ldrb	r2, [r3, #0]
200003a0:	1dfb      	adds	r3, r7, #7
200003a2:	3a01      	subs	r2, #1
200003a4:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x, controller);
200003a6:	1dfb      	adds	r3, r7, #7
200003a8:	781b      	ldrb	r3, [r3, #0]
200003aa:	2240      	movs	r2, #64	; 0x40
200003ac:	4313      	orrs	r3, r2
200003ae:	b2da      	uxtb	r2, r3
200003b0:	250e      	movs	r5, #14
200003b2:	197b      	adds	r3, r7, r5
200003b4:	781b      	ldrb	r3, [r3, #0]
200003b6:	0019      	movs	r1, r3
200003b8:	0010      	movs	r0, r2
200003ba:	f7ff ff59 	bl	20000270 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
200003be:	230d      	movs	r3, #13
200003c0:	18fb      	adds	r3, r7, r3
200003c2:	781b      	ldrb	r3, [r3, #0]
200003c4:	2248      	movs	r2, #72	; 0x48
200003c6:	4252      	negs	r2, r2
200003c8:	4313      	orrs	r3, r2
200003ca:	b2da      	uxtb	r2, r3
200003cc:	197b      	adds	r3, r7, r5
200003ce:	781b      	ldrb	r3, [r3, #0]
200003d0:	0019      	movs	r1, r3
200003d2:	0010      	movs	r0, r2
200003d4:	f7ff ff4c 	bl	20000270 <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
200003d8:	260c      	movs	r6, #12
200003da:	19bc      	adds	r4, r7, r6
200003dc:	197b      	adds	r3, r7, r5
200003de:	781b      	ldrb	r3, [r3, #0]
200003e0:	0018      	movs	r0, r3
200003e2:	f7ff ff88 	bl	200002f6 <graphic_read_data>
200003e6:	0003      	movs	r3, r0
200003e8:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	2240      	movs	r2, #64	; 0x40
200003f0:	4313      	orrs	r3, r2
200003f2:	b2da      	uxtb	r2, r3
200003f4:	197b      	adds	r3, r7, r5
200003f6:	781b      	ldrb	r3, [r3, #0]
200003f8:	0019      	movs	r1, r3
200003fa:	0010      	movs	r0, r2
200003fc:	f7ff ff38 	bl	20000270 <graphic_write_command>
    if (set) {
20000400:	1d7b      	adds	r3, r7, #5
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	2b00      	cmp	r3, #0
20000406:	d008      	beq.n	2000041a <pixel+0xfa>
        mask |= temp;
20000408:	220f      	movs	r2, #15
2000040a:	18bb      	adds	r3, r7, r2
2000040c:	18b9      	adds	r1, r7, r2
2000040e:	19ba      	adds	r2, r7, r6
20000410:	7809      	ldrb	r1, [r1, #0]
20000412:	7812      	ldrb	r2, [r2, #0]
20000414:	430a      	orrs	r2, r1
20000416:	701a      	strb	r2, [r3, #0]
20000418:	e00d      	b.n	20000436 <pixel+0x116>
    }else {
        mask = ~mask & temp;
2000041a:	210f      	movs	r1, #15
2000041c:	187b      	adds	r3, r7, r1
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	b25b      	sxtb	r3, r3
20000422:	43db      	mvns	r3, r3
20000424:	b25b      	sxtb	r3, r3
20000426:	220c      	movs	r2, #12
20000428:	18ba      	adds	r2, r7, r2
2000042a:	7812      	ldrb	r2, [r2, #0]
2000042c:	b252      	sxtb	r2, r2
2000042e:	4013      	ands	r3, r2
20000430:	b25a      	sxtb	r2, r3
20000432:	187b      	adds	r3, r7, r1
20000434:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
20000436:	230e      	movs	r3, #14
20000438:	18fb      	adds	r3, r7, r3
2000043a:	781a      	ldrb	r2, [r3, #0]
2000043c:	230f      	movs	r3, #15
2000043e:	18fb      	adds	r3, r7, r3
20000440:	781b      	ldrb	r3, [r3, #0]
20000442:	0011      	movs	r1, r2
20000444:	0018      	movs	r0, r3
20000446:	f7ff ff33 	bl	200002b0 <graphic_write_data>
}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	46bd      	mov	sp, r7
2000044e:	b005      	add	sp, #20
20000450:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000452:	46c0      	nop			; (mov r8, r8)
20000454:	80000007 	andhi	r0, r0, r7

20000458 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000458:	b580      	push	{r7, lr}
2000045a:	b082      	sub	sp, #8
2000045c:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++ ) {
2000045e:	1dfb      	adds	r3, r7, #7
20000460:	2200      	movs	r2, #0
20000462:	701a      	strb	r2, [r3, #0]
20000464:	e023      	b.n	200004ae <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page, BITMASK_CS1 | BITMASK_CS2);
20000466:	1dfb      	adds	r3, r7, #7
20000468:	781b      	ldrb	r3, [r3, #0]
2000046a:	2248      	movs	r2, #72	; 0x48
2000046c:	4252      	negs	r2, r2
2000046e:	4313      	orrs	r3, r2
20000470:	b2db      	uxtb	r3, r3
20000472:	2118      	movs	r1, #24
20000474:	0018      	movs	r0, r3
20000476:	f7ff fefb 	bl	20000270 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD  | 0, BITMASK_CS1 | BITMASK_CS2);
2000047a:	2118      	movs	r1, #24
2000047c:	2040      	movs	r0, #64	; 0x40
2000047e:	f7ff fef7 	bl	20000270 <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
20000482:	1dbb      	adds	r3, r7, #6
20000484:	2200      	movs	r2, #0
20000486:	701a      	strb	r2, [r3, #0]
20000488:	e008      	b.n	2000049c <graphic_clear_screen+0x44>
            graphic_write_data(0, BITMASK_CS1 | BITMASK_CS2);
2000048a:	2118      	movs	r1, #24
2000048c:	2000      	movs	r0, #0
2000048e:	f7ff ff0f 	bl	200002b0 <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
20000492:	1dbb      	adds	r3, r7, #6
20000494:	781a      	ldrb	r2, [r3, #0]
20000496:	1dbb      	adds	r3, r7, #6
20000498:	3201      	adds	r2, #1
2000049a:	701a      	strb	r2, [r3, #0]
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781b      	ldrb	r3, [r3, #0]
200004a0:	2b3f      	cmp	r3, #63	; 0x3f
200004a2:	d9f2      	bls.n	2000048a <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++ ) {
200004a4:	1dfb      	adds	r3, r7, #7
200004a6:	781a      	ldrb	r2, [r3, #0]
200004a8:	1dfb      	adds	r3, r7, #7
200004aa:	3201      	adds	r2, #1
200004ac:	701a      	strb	r2, [r3, #0]
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	2b07      	cmp	r3, #7
200004b4:	d9d7      	bls.n	20000466 <graphic_clear_screen+0xe>
        }
    }
}
200004b6:	46c0      	nop			; (mov r8, r8)
200004b8:	46bd      	mov	sp, r7
200004ba:	b002      	add	sp, #8
200004bc:	bd80      	pop	{r7, pc}

200004be <graphic_init>:


void graphic_init(void) {
200004be:	b580      	push	{r7, lr}
200004c0:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(BITMASK_E);
200004c2:	2040      	movs	r0, #64	; 0x40
200004c4:	f7ff fda4 	bl	20000010 <graphic_ctrl_bit_set>
    delay_micros(10);
200004c8:	200a      	movs	r0, #10
200004ca:	f000 f963 	bl	20000794 <delay_micros>
    graphic_ctrl_bit_clear(BITMASK_CS1 | BITMASK_CS2 | BITMASK_RESET | BITMASK_E);
200004ce:	2078      	movs	r0, #120	; 0x78
200004d0:	f7ff fdc0 	bl	20000054 <graphic_ctrl_bit_clear>
    delay_millis(30);
200004d4:	201e      	movs	r0, #30
200004d6:	f000 f97b 	bl	200007d0 <delay_millis>
    graphic_ctrl_bit_set(BITMASK_RESET);
200004da:	2020      	movs	r0, #32
200004dc:	f7ff fd98 	bl	20000010 <graphic_ctrl_bit_set>
    
    // Toggle display
    graphic_write_command(LCD_OFF, BITMASK_CS1 | BITMASK_CS2);
200004e0:	2118      	movs	r1, #24
200004e2:	203e      	movs	r0, #62	; 0x3e
200004e4:	f7ff fec4 	bl	20000270 <graphic_write_command>
    graphic_write_command(LCD_ON, BITMASK_CS1 | BITMASK_CS2);
200004e8:	2118      	movs	r1, #24
200004ea:	203f      	movs	r0, #63	; 0x3f
200004ec:	f7ff fec0 	bl	20000270 <graphic_write_command>
    //Start = 0
    graphic_write_command(LCD_DISP_START, BITMASK_CS1 | BITMASK_CS2);
200004f0:	2118      	movs	r1, #24
200004f2:	20c0      	movs	r0, #192	; 0xc0
200004f4:	f7ff febc 	bl	20000270 <graphic_write_command>
    // Add = 0
    graphic_write_command(LCD_SET_ADD, BITMASK_CS1 | BITMASK_CS2);
200004f8:	2118      	movs	r1, #24
200004fa:	2040      	movs	r0, #64	; 0x40
200004fc:	f7ff feb8 	bl	20000270 <graphic_write_command>
    // Page = 0
    graphic_write_command(LCD_SET_PAGE, BITMASK_CS1 | BITMASK_CS2);
20000500:	2118      	movs	r1, #24
20000502:	20b8      	movs	r0, #184	; 0xb8
20000504:	f7ff feb4 	bl	20000270 <graphic_write_command>
    // Deactivate both CS signals
    select_controller(0);
20000508:	2000      	movs	r0, #0
2000050a:	f7ff fdc5 	bl	20000098 <select_controller>
2000050e:	46c0      	nop			; (mov r8, r8)
20000510:	46bd      	mov	sp, r7
20000512:	bd80      	pop	{r7, pc}

20000514 <draw_object>:



void draw_object(OBJECT* self) {
20000514:	b5f0      	push	{r4, r5, r6, r7, lr}
20000516:	b087      	sub	sp, #28
20000518:	af00      	add	r7, sp, #0
2000051a:	6078      	str	r0, [r7, #4]
    SHAPE* shape = self->shape;
2000051c:	687b      	ldr	r3, [r7, #4]
2000051e:	681b      	ldr	r3, [r3, #0]
20000520:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < shape->numPoints; i++) {
20000522:	2317      	movs	r3, #23
20000524:	18fb      	adds	r3, r7, r3
20000526:	2200      	movs	r2, #0
20000528:	701a      	strb	r2, [r3, #0]
2000052a:	e033      	b.n	20000594 <draw_object+0x80>
        uint8_t x = shape->points[i].x;
2000052c:	2417      	movs	r4, #23
2000052e:	193b      	adds	r3, r7, r4
20000530:	781a      	ldrb	r2, [r3, #0]
20000532:	200f      	movs	r0, #15
20000534:	183b      	adds	r3, r7, r0
20000536:	6939      	ldr	r1, [r7, #16]
20000538:	0052      	lsls	r2, r2, #1
2000053a:	188a      	adds	r2, r1, r2
2000053c:	3203      	adds	r2, #3
2000053e:	7812      	ldrb	r2, [r2, #0]
20000540:	701a      	strb	r2, [r3, #0]
        uint8_t y = shape->points[i].y;
20000542:	193b      	adds	r3, r7, r4
20000544:	781a      	ldrb	r2, [r3, #0]
20000546:	250e      	movs	r5, #14
20000548:	197b      	adds	r3, r7, r5
2000054a:	6939      	ldr	r1, [r7, #16]
2000054c:	0052      	lsls	r2, r2, #1
2000054e:	188a      	adds	r2, r1, r2
20000550:	3204      	adds	r2, #4
20000552:	7812      	ldrb	r2, [r2, #0]
20000554:	701a      	strb	r2, [r3, #0]
        uint8_t px = self->position.x;
20000556:	210d      	movs	r1, #13
20000558:	187b      	adds	r3, r7, r1
2000055a:	687a      	ldr	r2, [r7, #4]
2000055c:	7992      	ldrb	r2, [r2, #6]
2000055e:	701a      	strb	r2, [r3, #0]
        uint8_t py = self->position.y;
20000560:	260c      	movs	r6, #12
20000562:	19bb      	adds	r3, r7, r6
20000564:	687a      	ldr	r2, [r7, #4]
20000566:	79d2      	ldrb	r2, [r2, #7]
20000568:	701a      	strb	r2, [r3, #0]
        pixel(x + px, y + py, true);
2000056a:	183a      	adds	r2, r7, r0
2000056c:	187b      	adds	r3, r7, r1
2000056e:	7812      	ldrb	r2, [r2, #0]
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	18d3      	adds	r3, r2, r3
20000574:	b2d8      	uxtb	r0, r3
20000576:	197a      	adds	r2, r7, r5
20000578:	19bb      	adds	r3, r7, r6
2000057a:	7812      	ldrb	r2, [r2, #0]
2000057c:	781b      	ldrb	r3, [r3, #0]
2000057e:	18d3      	adds	r3, r2, r3
20000580:	b2db      	uxtb	r3, r3
20000582:	2201      	movs	r2, #1
20000584:	0019      	movs	r1, r3
20000586:	f7ff fecb 	bl	20000320 <pixel>
    for (uint8_t i = 0; i < shape->numPoints; i++) {
2000058a:	193b      	adds	r3, r7, r4
2000058c:	781a      	ldrb	r2, [r3, #0]
2000058e:	193b      	adds	r3, r7, r4
20000590:	3201      	adds	r2, #1
20000592:	701a      	strb	r2, [r3, #0]
20000594:	693b      	ldr	r3, [r7, #16]
20000596:	781b      	ldrb	r3, [r3, #0]
20000598:	2217      	movs	r2, #23
2000059a:	18ba      	adds	r2, r7, r2
2000059c:	7812      	ldrb	r2, [r2, #0]
2000059e:	429a      	cmp	r2, r3
200005a0:	d3c4      	bcc.n	2000052c <draw_object+0x18>
    }
}
200005a2:	46c0      	nop			; (mov r8, r8)
200005a4:	46bd      	mov	sp, r7
200005a6:	b007      	add	sp, #28
200005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

200005aa <clear_object>:

void clear_object(OBJECT* self) {
200005aa:	b5f0      	push	{r4, r5, r6, r7, lr}
200005ac:	b087      	sub	sp, #28
200005ae:	af00      	add	r7, sp, #0
200005b0:	6078      	str	r0, [r7, #4]
    SHAPE* shape = self->shape;
200005b2:	687b      	ldr	r3, [r7, #4]
200005b4:	681b      	ldr	r3, [r3, #0]
200005b6:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < shape->numPoints; i++) {
200005b8:	2317      	movs	r3, #23
200005ba:	18fb      	adds	r3, r7, r3
200005bc:	2200      	movs	r2, #0
200005be:	701a      	strb	r2, [r3, #0]
200005c0:	e033      	b.n	2000062a <clear_object+0x80>
        uint8_t x = shape->points[i].x;
200005c2:	2417      	movs	r4, #23
200005c4:	193b      	adds	r3, r7, r4
200005c6:	781a      	ldrb	r2, [r3, #0]
200005c8:	200f      	movs	r0, #15
200005ca:	183b      	adds	r3, r7, r0
200005cc:	6939      	ldr	r1, [r7, #16]
200005ce:	0052      	lsls	r2, r2, #1
200005d0:	188a      	adds	r2, r1, r2
200005d2:	3203      	adds	r2, #3
200005d4:	7812      	ldrb	r2, [r2, #0]
200005d6:	701a      	strb	r2, [r3, #0]
        uint8_t y = shape->points[i].y;
200005d8:	193b      	adds	r3, r7, r4
200005da:	781a      	ldrb	r2, [r3, #0]
200005dc:	250e      	movs	r5, #14
200005de:	197b      	adds	r3, r7, r5
200005e0:	6939      	ldr	r1, [r7, #16]
200005e2:	0052      	lsls	r2, r2, #1
200005e4:	188a      	adds	r2, r1, r2
200005e6:	3204      	adds	r2, #4
200005e8:	7812      	ldrb	r2, [r2, #0]
200005ea:	701a      	strb	r2, [r3, #0]
        uint8_t px = self->position.x;
200005ec:	210d      	movs	r1, #13
200005ee:	187b      	adds	r3, r7, r1
200005f0:	687a      	ldr	r2, [r7, #4]
200005f2:	7992      	ldrb	r2, [r2, #6]
200005f4:	701a      	strb	r2, [r3, #0]
        uint8_t py = self->position.y;
200005f6:	260c      	movs	r6, #12
200005f8:	19bb      	adds	r3, r7, r6
200005fa:	687a      	ldr	r2, [r7, #4]
200005fc:	79d2      	ldrb	r2, [r2, #7]
200005fe:	701a      	strb	r2, [r3, #0]
        pixel(x + px, y + py, false);
20000600:	183a      	adds	r2, r7, r0
20000602:	187b      	adds	r3, r7, r1
20000604:	7812      	ldrb	r2, [r2, #0]
20000606:	781b      	ldrb	r3, [r3, #0]
20000608:	18d3      	adds	r3, r2, r3
2000060a:	b2d8      	uxtb	r0, r3
2000060c:	197a      	adds	r2, r7, r5
2000060e:	19bb      	adds	r3, r7, r6
20000610:	7812      	ldrb	r2, [r2, #0]
20000612:	781b      	ldrb	r3, [r3, #0]
20000614:	18d3      	adds	r3, r2, r3
20000616:	b2db      	uxtb	r3, r3
20000618:	2200      	movs	r2, #0
2000061a:	0019      	movs	r1, r3
2000061c:	f7ff fe80 	bl	20000320 <pixel>
    for (uint8_t i = 0; i < shape->numPoints; i++) {
20000620:	193b      	adds	r3, r7, r4
20000622:	781a      	ldrb	r2, [r3, #0]
20000624:	193b      	adds	r3, r7, r4
20000626:	3201      	adds	r2, #1
20000628:	701a      	strb	r2, [r3, #0]
2000062a:	693b      	ldr	r3, [r7, #16]
2000062c:	781b      	ldrb	r3, [r3, #0]
2000062e:	2217      	movs	r2, #23
20000630:	18ba      	adds	r2, r7, r2
20000632:	7812      	ldrb	r2, [r2, #0]
20000634:	429a      	cmp	r2, r3
20000636:	d3c4      	bcc.n	200005c2 <clear_object+0x18>
    }
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b007      	add	sp, #28
2000063e:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000640 <set_speed>:

void set_speed(OBJECT* self, POINT velocity) {
20000640:	b580      	push	{r7, lr}
20000642:	b082      	sub	sp, #8
20000644:	af00      	add	r7, sp, #0
20000646:	6078      	str	r0, [r7, #4]
20000648:	003b      	movs	r3, r7
2000064a:	8019      	strh	r1, [r3, #0]
    self->velocity = velocity;
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	003a      	movs	r2, r7
20000650:	8812      	ldrh	r2, [r2, #0]
20000652:	809a      	strh	r2, [r3, #4]
}
20000654:	46c0      	nop			; (mov r8, r8)
20000656:	46bd      	mov	sp, r7
20000658:	b002      	add	sp, #8
2000065a:	bd80      	pop	{r7, pc}

2000065c <move_object>:

void move_object(OBJECT* self) {
2000065c:	b580      	push	{r7, lr}
2000065e:	b084      	sub	sp, #16
20000660:	af00      	add	r7, sp, #0
20000662:	6078      	str	r0, [r7, #4]
    uint8_t newX = self->position.x + self->velocity.x;
20000664:	687b      	ldr	r3, [r7, #4]
20000666:	7999      	ldrb	r1, [r3, #6]
20000668:	687b      	ldr	r3, [r7, #4]
2000066a:	791a      	ldrb	r2, [r3, #4]
2000066c:	200e      	movs	r0, #14
2000066e:	183b      	adds	r3, r7, r0
20000670:	188a      	adds	r2, r1, r2
20000672:	701a      	strb	r2, [r3, #0]
    uint8_t newY = self->position.y + self->velocity.y;
20000674:	687b      	ldr	r3, [r7, #4]
20000676:	79d9      	ldrb	r1, [r3, #7]
20000678:	687b      	ldr	r3, [r7, #4]
2000067a:	795a      	ldrb	r2, [r3, #5]
2000067c:	230d      	movs	r3, #13
2000067e:	18fb      	adds	r3, r7, r3
20000680:	188a      	adds	r2, r1, r2
20000682:	701a      	strb	r2, [r3, #0]
    bool shouldIMove = true;
20000684:	230f      	movs	r3, #15
20000686:	18fb      	adds	r3, r7, r3
20000688:	2201      	movs	r2, #1
2000068a:	701a      	strb	r2, [r3, #0]
    
    if (newX < 1 || newX > 128) {
2000068c:	183b      	adds	r3, r7, r0
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	2b00      	cmp	r3, #0
20000692:	d003      	beq.n	2000069c <move_object+0x40>
20000694:	183b      	adds	r3, r7, r0
20000696:	781b      	ldrb	r3, [r3, #0]
20000698:	2b80      	cmp	r3, #128	; 0x80
2000069a:	d909      	bls.n	200006b0 <move_object+0x54>
        self->velocity.x = -self->velocity.x;
2000069c:	687b      	ldr	r3, [r7, #4]
2000069e:	791b      	ldrb	r3, [r3, #4]
200006a0:	425b      	negs	r3, r3
200006a2:	b2da      	uxtb	r2, r3
200006a4:	687b      	ldr	r3, [r7, #4]
200006a6:	711a      	strb	r2, [r3, #4]
        shouldIMove = false;
200006a8:	230f      	movs	r3, #15
200006aa:	18fb      	adds	r3, r7, r3
200006ac:	2200      	movs	r2, #0
200006ae:	701a      	strb	r2, [r3, #0]
    }
    if (newY < 1 || newY > 64) {
200006b0:	220d      	movs	r2, #13
200006b2:	18bb      	adds	r3, r7, r2
200006b4:	781b      	ldrb	r3, [r3, #0]
200006b6:	2b00      	cmp	r3, #0
200006b8:	d003      	beq.n	200006c2 <move_object+0x66>
200006ba:	18bb      	adds	r3, r7, r2
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	2b40      	cmp	r3, #64	; 0x40
200006c0:	d909      	bls.n	200006d6 <move_object+0x7a>
        self->velocity.y = -self->velocity.y;
200006c2:	687b      	ldr	r3, [r7, #4]
200006c4:	795b      	ldrb	r3, [r3, #5]
200006c6:	425b      	negs	r3, r3
200006c8:	b2da      	uxtb	r2, r3
200006ca:	687b      	ldr	r3, [r7, #4]
200006cc:	715a      	strb	r2, [r3, #5]
        shouldIMove = false;
200006ce:	230f      	movs	r3, #15
200006d0:	18fb      	adds	r3, r7, r3
200006d2:	2200      	movs	r2, #0
200006d4:	701a      	strb	r2, [r3, #0]
    }
    if (shouldIMove) {
200006d6:	230f      	movs	r3, #15
200006d8:	18fb      	adds	r3, r7, r3
200006da:	781b      	ldrb	r3, [r3, #0]
200006dc:	2b00      	cmp	r3, #0
200006de:	d013      	beq.n	20000708 <move_object+0xac>
        self->clear(self);
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	68db      	ldr	r3, [r3, #12]
200006e4:	687a      	ldr	r2, [r7, #4]
200006e6:	0010      	movs	r0, r2
200006e8:	4798      	blx	r3
        self->position.x = newX;
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	220e      	movs	r2, #14
200006ee:	18ba      	adds	r2, r7, r2
200006f0:	7812      	ldrb	r2, [r2, #0]
200006f2:	719a      	strb	r2, [r3, #6]
        self->position.y = newY;
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	220d      	movs	r2, #13
200006f8:	18ba      	adds	r2, r7, r2
200006fa:	7812      	ldrb	r2, [r2, #0]
200006fc:	71da      	strb	r2, [r3, #7]
        self->draw(self);
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	689b      	ldr	r3, [r3, #8]
20000702:	687a      	ldr	r2, [r7, #4]
20000704:	0010      	movs	r0, r2
20000706:	4798      	blx	r3
    }
    
}
20000708:	46c0      	nop			; (mov r8, r8)
2000070a:	46bd      	mov	sp, r7
2000070c:	b004      	add	sp, #16
2000070e:	bd80      	pop	{r7, pc}

20000710 <app_init>:



void app_init(void) {
20000710:	b580      	push	{r7, lr}
20000712:	af00      	add	r7, sp, #0
    GPIO_E->moder = 0x55555555;
20000714:	4b02      	ldr	r3, [pc, #8]	; (20000720 <app_init+0x10>)
20000716:	4a03      	ldr	r2, [pc, #12]	; (20000724 <app_init+0x14>)
20000718:	601a      	str	r2, [r3, #0]
}
2000071a:	46c0      	nop			; (mov r8, r8)
2000071c:	46bd      	mov	sp, r7
2000071e:	bd80      	pop	{r7, pc}
20000720:	40021000 	andmi	r1, r2, r0
20000724:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000728 <main>:

int main(void)
{
20000728:	b580      	push	{r7, lr}
2000072a:	af00      	add	r7, sp, #0
    app_init();
2000072c:	f7ff fff0 	bl	20000710 <app_init>
    graphic_init();
20000730:	f7ff fec5 	bl	200004be <graphic_init>
        clear_object,
        move_object,
        set_speed
    };
    while (true) {
        ball.move(&ball);
20000734:	4b04      	ldr	r3, [pc, #16]	; (20000748 <main+0x20>)
20000736:	691b      	ldr	r3, [r3, #16]
20000738:	4a03      	ldr	r2, [pc, #12]	; (20000748 <main+0x20>)
2000073a:	0010      	movs	r0, r2
2000073c:	4798      	blx	r3
        delay_millis(100);
2000073e:	2064      	movs	r0, #100	; 0x64
20000740:	f000 f846 	bl	200007d0 <delay_millis>
        ball.move(&ball);
20000744:	e7f6      	b.n	20000734 <main+0xc>
20000746:	46c0      	nop			; (mov r8, r8)
20000748:	200007e4 	andcs	r0, r0, r4, ror #15

2000074c <delay_250ns>:
2000074c:	2300      	movs	r3, #0
2000074e:	2129      	movs	r1, #41	; 0x29
20000750:	4a06      	ldr	r2, [pc, #24]	; (2000076c <delay_250ns+0x20>)
20000752:	6013      	str	r3, [r2, #0]
20000754:	6051      	str	r1, [r2, #4]
20000756:	2180      	movs	r1, #128	; 0x80
20000758:	6093      	str	r3, [r2, #8]
2000075a:	3305      	adds	r3, #5
2000075c:	6013      	str	r3, [r2, #0]
2000075e:	0249      	lsls	r1, r1, #9
20000760:	6813      	ldr	r3, [r2, #0]
20000762:	420b      	tst	r3, r1
20000764:	d0fc      	beq.n	20000760 <delay_250ns+0x14>
20000766:	2300      	movs	r3, #0
20000768:	6013      	str	r3, [r2, #0]
2000076a:	4770      	bx	lr
2000076c:	e000e010 	and	lr, r0, r0, lsl r0

20000770 <delay_500ns>:
20000770:	2300      	movs	r3, #0
20000772:	2153      	movs	r1, #83	; 0x53
20000774:	4a06      	ldr	r2, [pc, #24]	; (20000790 <delay_500ns+0x20>)
20000776:	6013      	str	r3, [r2, #0]
20000778:	6051      	str	r1, [r2, #4]
2000077a:	2180      	movs	r1, #128	; 0x80
2000077c:	6093      	str	r3, [r2, #8]
2000077e:	3305      	adds	r3, #5
20000780:	6013      	str	r3, [r2, #0]
20000782:	0249      	lsls	r1, r1, #9
20000784:	6813      	ldr	r3, [r2, #0]
20000786:	420b      	tst	r3, r1
20000788:	d0fc      	beq.n	20000784 <delay_500ns+0x14>
2000078a:	2300      	movs	r3, #0
2000078c:	6013      	str	r3, [r2, #0]
2000078e:	4770      	bx	lr
20000790:	e000e010 	and	lr, r0, r0, lsl r0

20000794 <delay_micros>:
20000794:	2280      	movs	r2, #128	; 0x80
20000796:	b5f0      	push	{r4, r5, r6, r7, lr}
20000798:	2400      	movs	r4, #0
2000079a:	2700      	movs	r7, #0
2000079c:	2653      	movs	r6, #83	; 0x53
2000079e:	2505      	movs	r5, #5
200007a0:	4b0a      	ldr	r3, [pc, #40]	; (200007cc <delay_micros+0x38>)
200007a2:	0a80      	lsrs	r0, r0, #10
200007a4:	0252      	lsls	r2, r2, #9
200007a6:	601f      	str	r7, [r3, #0]
200007a8:	605e      	str	r6, [r3, #4]
200007aa:	609f      	str	r7, [r3, #8]
200007ac:	601d      	str	r5, [r3, #0]
200007ae:	6819      	ldr	r1, [r3, #0]
200007b0:	4211      	tst	r1, r2
200007b2:	d0fc      	beq.n	200007ae <delay_micros+0x1a>
200007b4:	601c      	str	r4, [r3, #0]
200007b6:	601c      	str	r4, [r3, #0]
200007b8:	605e      	str	r6, [r3, #4]
200007ba:	609c      	str	r4, [r3, #8]
200007bc:	601d      	str	r5, [r3, #0]
200007be:	6819      	ldr	r1, [r3, #0]
200007c0:	4211      	tst	r1, r2
200007c2:	d0fc      	beq.n	200007be <delay_micros+0x2a>
200007c4:	601c      	str	r4, [r3, #0]
200007c6:	3801      	subs	r0, #1
200007c8:	d2ed      	bcs.n	200007a6 <delay_micros+0x12>
200007ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
200007cc:	e000e010 	and	lr, r0, r0, lsl r0

200007d0 <delay_millis>:
200007d0:	b510      	push	{r4, lr}
200007d2:	0143      	lsls	r3, r0, #5
200007d4:	1a1b      	subs	r3, r3, r0
200007d6:	009b      	lsls	r3, r3, #2
200007d8:	1818      	adds	r0, r3, r0
200007da:	00c0      	lsls	r0, r0, #3
200007dc:	f7ff ffda 	bl	20000794 <delay_micros>
200007e0:	bd10      	pop	{r4, pc}
200007e2:	46c0      	nop			; (mov r8, r8)

200007e4 <ball.4360>:
200007e4:	200007fc 	strdcs	r0, [r0], -ip
200007e8:	01010404 	tsteq	r1, r4, lsl #8
200007ec:	20000515 	andcs	r0, r0, r5, lsl r5
200007f0:	200005ab 	andcs	r0, r0, fp, lsr #11
200007f4:	2000065d 	andcs	r0, r0, sp, asr r6
200007f8:	20000641 	andcs	r0, r0, r1, asr #12

200007fc <ball_geometry.4359>:
200007fc:	000a0a0c 	andeq	r0, sl, ip, lsl #20
20000800:	01020001 	tsteq	r2, r1
20000804:	01010100 	mrseq	r0, (UNDEF: 17)
20000808:	02030102 	andeq	r0, r3, #-2147483648	; 0x80000000
2000080c:	02010200 	andeq	r0, r1, #0, 4
20000810:	03030202 	movweq	r0, #12802	; 0x3202
20000814:	00020301 	andeq	r0, r2, r1, lsl #6
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000003e1 	andeq	r0, r0, r1, ror #7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000139 	andeq	r0, r0, r9, lsr r1
  10:	00023e0c 	andeq	r3, r2, ip, lsl #28
  14:	0001c000 	andeq	ip, r1, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	00050420 	andeq	r0, r5, r0, lsr #8
  20:	00000000 	andeq	r0, r0, r0
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	00000100 	andeq	r0, r0, r0, lsl #2
  2c:	0000d303 	andeq	sp, r0, r3, lsl #6
  30:	182b0200 	stmdane	fp!, {r9}
  34:	00000038 	andeq	r0, r0, r8, lsr r0
  38:	fe080102 	cdp2	1, 0, cr0, cr8, cr2, {0}
  3c:	02000000 	andeq	r0, r0, #0
  40:	001e0502 	andseq	r0, lr, r2, lsl #10
  44:	40030000 	andmi	r0, r3, r0
  48:	02000000 	andeq	r0, r0, #0
  4c:	00521939 	subseq	r1, r2, r9, lsr r9
  50:	02020000 	andeq	r0, r2, #0
  54:	00018d07 	andeq	r8, r1, r7, lsl #26
  58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
  5c:	000000a5 	andeq	r0, r0, r5, lsr #1
  60:	00003503 	andeq	r3, r0, r3, lsl #10
  64:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
  68:	0000006c 	andeq	r0, r0, ip, rrx
  6c:	7b070402 	blvc	1c107c <startup-0x1fe3ef84>
  70:	02000001 	andeq	r0, r0, #1
  74:	00a00508 	adceq	r0, r0, r8, lsl #10
  78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  7c:	00017607 	andeq	r7, r1, r7, lsl #12
  80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
  84:	00746e69 	rsbseq	r6, r4, r9, ror #28
  88:	80070402 	andhi	r0, r7, r2, lsl #8
  8c:	03000001 	movweq	r0, #1
  90:	000000d5 	ldrdeq	r0, [r0], -r5
  94:	2c131803 	ldccs	8, cr1, [r3], {3}
  98:	03000000 	movweq	r0, #0
  9c:	00000042 	andeq	r0, r0, r2, asr #32
  a0:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
  a4:	03000000 	movweq	r0, #0
  a8:	00000037 	andeq	r0, r0, r7, lsr r0
  ac:	60143003 	andsvs	r3, r4, r3
  b0:	05000000 	streq	r0, [r0, #-0]
  b4:	0000022d 	andeq	r0, r0, sp, lsr #4
  b8:	100c0418 	andne	r0, ip, r8, lsl r4
  bc:	00000150 	andeq	r0, r0, r0, asr r1
  c0:	0000bb06 	andeq	fp, r0, r6, lsl #22
  c4:	0e0d0400 	cfcpyseq	mvf0, mvf13
  c8:	000000a7 	andeq	r0, r0, r7, lsr #1
  cc:	00760600 	rsbseq	r0, r6, r0, lsl #12
  d0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
  d4:	00009b0e 	andeq	r9, r0, lr, lsl #22
  d8:	32060400 	andcc	r0, r6, #0, 8
  dc:	04000002 	streq	r0, [r0], #-2
  e0:	009b0e0f 	addseq	r0, fp, pc, lsl #28
  e4:	06060000 	streq	r0, [r6], -r0
  e8:	000000ae 	andeq	r0, r0, lr, lsr #1
  ec:	a70e1004 	strge	r1, [lr, -r4]
  f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  f4:	0000dd06 	andeq	sp, r0, r6, lsl #26
  f8:	0e110400 	cfmulseq	mvf0, mvf1, mvf0
  fc:	000000a7 	andeq	r0, r0, r7, lsr #1
 100:	0131060c 	teqeq	r1, ip, lsl #12
 104:	12040000 	andne	r0, r4, #0
 108:	00008f0d 	andeq	r8, r0, sp, lsl #30
 10c:	7d061000 	stcvc	0, cr1, [r6, #-0]
 110:	04000000 	streq	r0, [r0], #-0
 114:	008f0d13 	addeq	r0, pc, r3, lsl sp	; <UNPREDICTABLE>
 118:	06110000 	ldreq	r0, [r1], -r0
 11c:	00000093 	muleq	r0, r3, r0
 120:	9b0e1404 	blls	385138 <startup-0x1fc7aec8>
 124:	12000000 	andne	r0, r0, #0
 128:	0000f606 	andeq	pc, r0, r6, lsl #12
 12c:	0d150400 	cfldrseq	mvf0, [r5, #-0]
 130:	0000008f 	andeq	r0, r0, pc, lsl #1
 134:	02240614 	eoreq	r0, r4, #20, 12	; 0x1400000
 138:	16040000 	strne	r0, [r4], -r0
 13c:	00008f0d 	andeq	r8, r0, sp, lsl #30
 140:	00061500 	andeq	r1, r6, r0, lsl #10
 144:	04000000 	streq	r0, [r0], #-0
 148:	009b0e17 	addseq	r0, fp, r7, lsl lr
 14c:	00160000 	andseq	r0, r6, r0
 150:	0001a003 	andeq	sl, r1, r3
 154:	02180400 	andseq	r0, r8, #0, 8
 158:	000000b3 	strheq	r0, [r0], -r3
 15c:	00002807 	andeq	r2, r0, r7, lsl #16
 160:	06aa0100 	strteq	r0, [sl], r0, lsl #2
 164:	200004be 			; <UNDEFINED> instruction: 0x200004be
 168:	00000056 	andeq	r0, r0, r6, asr r0
 16c:	61089c01 	tstvs	r8, r1, lsl #24
 170:	01000000 	mrseq	r0, (UNDEF: 0)
 174:	0458069f 	ldrbeq	r0, [r8], #-1695	; 0xfffff961
 178:	00662000 	rsbeq	r2, r6, r0
 17c:	9c010000 	stcls	0, cr0, [r1], {-0}
 180:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 184:	00045e09 	andeq	r5, r4, r9, lsl #28
 188:	00005820 	andeq	r5, r0, r0, lsr #16
 18c:	00b60a00 	adcseq	r0, r6, r0, lsl #20
 190:	a0010000 	andge	r0, r1, r0
 194:	00008f12 	andeq	r8, r0, r2, lsl pc
 198:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 19c:	00048209 	andeq	r8, r4, r9, lsl #4
 1a0:	00002220 	andeq	r2, r0, r0, lsr #4
 1a4:	64610b00 	strbtvs	r0, [r1], #-2816	; 0xfffff500
 1a8:	a3010064 	movwge	r0, #4196	; 0x1064
 1ac:	00008f16 	andeq	r8, r0, r6, lsl pc
 1b0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 1b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 1b8:	0000000d 	andeq	r0, r0, sp
 1bc:	20068601 	andcs	r8, r6, r1, lsl #12
 1c0:	38200003 	stmdacc	r0!, {r0, r1}
 1c4:	01000001 	tsteq	r0, r1
 1c8:	0002339c 	muleq	r2, ip, r3
 1cc:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 1d0:	8f148601 	svchi	0x00148601
 1d4:	02000000 	andeq	r0, r0, #0
 1d8:	790c5f91 	stmdbvc	ip, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 1dc:	1f860100 	svcne	0x00860100
 1e0:	0000008f 	andeq	r0, r0, pc, lsl #1
 1e4:	0c5e9102 	ldfeqp	f1, [lr], {2}
 1e8:	00746573 	rsbseq	r6, r4, r3, ror r5
 1ec:	33278601 			; <UNDEFINED> instruction: 0x33278601
 1f0:	02000002 	andeq	r0, r0, #2
 1f4:	130a5d91 	movwne	r5, #44433	; 0xad91
 1f8:	01000000 	mrseq	r0, (UNDEF: 0)
 1fc:	008f0d88 	addeq	r0, pc, r8, lsl #27
 200:	91020000 	mrsls	r0, (UNDEF: 2)
 204:	021f0a65 	andseq	r0, pc, #413696	; 0x65000
 208:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
 20c:	00008f14 	andeq	r8, r0, r4, lsl pc
 210:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 214:	0002010a 	andeq	r0, r2, sl, lsl #2
 218:	1a880100 	bne	fe200620 <ball_geometry.4359+0xde1ffe24>
 21c:	0000008f 	andeq	r0, r0, pc, lsl #1
 220:	0a669102 	beq	19a4630 <startup-0x1e65b9d0>
 224:	00000019 	andeq	r0, r0, r9, lsl r0
 228:	8f0d9501 	svchi	0x000d9501
 22c:	02000000 	andeq	r0, r0, #0
 230:	02006491 	andeq	r6, r0, #-1862270976	; 0x91000000
 234:	01ba0201 			; <UNDEFINED> instruction: 0x01ba0201
 238:	c10d0000 	mrsgt	r0, (UNDEF: 13)
 23c:	01000000 	mrseq	r0, (UNDEF: 0)
 240:	008f0981 	addeq	r0, pc, r1, lsl #19
 244:	02f60000 	rscseq	r0, r6, #0
 248:	002a2000 	eoreq	r2, sl, r0
 24c:	9c010000 	stcls	0, cr0, [r1], {-0}
 250:	00000264 	andeq	r0, r0, r4, ror #4
 254:	0002010e 	andeq	r0, r2, lr, lsl #2
 258:	23810100 	orrcs	r0, r1, #0, 2
 25c:	0000008f 	andeq	r0, r0, pc, lsl #1
 260:	00779102 	rsbseq	r9, r7, r2, lsl #2
 264:	0000e308 	andeq	lr, r0, r8, lsl #6
 268:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
 26c:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 270:	00000046 	andeq	r0, r0, r6, asr #32
 274:	02999c01 	addseq	r9, r9, #256	; 0x100
 278:	ce0e0000 	cdpgt	0, 0, cr0, cr14, cr0, {0}
 27c:	01000000 	mrseq	r0, (UNDEF: 0)
 280:	008f2179 	addeq	r2, pc, r9, ror r1	; <UNPREDICTABLE>
 284:	91020000 	mrsls	r0, (UNDEF: 2)
 288:	02010e77 	andeq	r0, r1, #1904	; 0x770
 28c:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
 290:	00008f2f 	andeq	r8, r0, pc, lsr #30
 294:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 298:	004b0800 	subeq	r0, fp, r0, lsl #16
 29c:	72010000 	andvc	r0, r1, #0
 2a0:	00027006 	andeq	r7, r2, r6
 2a4:	00004020 	andeq	r4, r0, r0, lsr #32
 2a8:	ce9c0100 	fmlgte	f0, f4, f0
 2ac:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 2b0:	00000059 	andeq	r0, r0, r9, asr r0
 2b4:	8f247201 	svchi	0x00247201
 2b8:	02000000 	andeq	r0, r0, #0
 2bc:	010e7791 			; <UNDEFINED> instruction: 0x010e7791
 2c0:	01000002 	tsteq	r0, r2
 2c4:	008f3572 	addeq	r3, pc, r2, ror r5	; <UNPREDICTABLE>
 2c8:	91020000 	mrsls	r0, (UNDEF: 2)
 2cc:	23080076 	movwcs	r0, #32886	; 0x8076
 2d0:	01000001 	tsteq	r0, r1
 2d4:	01f0065e 	mvnseq	r0, lr, asr r6
 2d8:	00802000 	addeq	r2, r0, r0
 2dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 2e0:	00000303 	andeq	r0, r0, r3, lsl #6
 2e4:	0002890e 	andeq	r8, r2, lr, lsl #18
 2e8:	1c5e0100 	ldfnee	f0, [lr], {-0}
 2ec:	0000008f 	andeq	r0, r0, pc, lsl #1
 2f0:	0e779102 	expeqs	f1, f2
 2f4:	00000201 	andeq	r0, r0, r1, lsl #4
 2f8:	8f2b5e01 	svchi	0x002b5e01
 2fc:	02000000 	andeq	r0, r0, #0
 300:	0d007691 	stceq	6, cr7, [r0, #-580]	; 0xfffffdbc
 304:	00000086 	andeq	r0, r0, r6, lsl #1
 308:	8f094801 	svchi	0x00094801
 30c:	60000000 	andvs	r0, r0, r0
 310:	90200001 	eorls	r0, r0, r1
 314:	01000000 	mrseq	r0, (UNDEF: 0)
 318:	00033c9c 	muleq	r3, ip, ip
 31c:	02010e00 	andeq	r0, r1, #0, 28
 320:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 324:	00008f1e 	andeq	r8, r0, lr, lsl pc
 328:	6f910200 	svcvs	0x00910200
 32c:	0002830a 	andeq	r8, r2, sl, lsl #6
 330:	0d500100 	ldfeqe	f0, [r0, #-0]
 334:	0000008f 	andeq	r0, r0, pc, lsl #1
 338:	00779102 	rsbseq	r9, r7, r2, lsl #2
 33c:	00020c0f 	andeq	r0, r2, pc, lsl #24
 340:	06340100 	ldrteq	r0, [r4], -r0, lsl #2
 344:	200000f2 	strdcs	r0, [r0], -r2
 348:	0000006e 	andeq	r0, r0, lr, rrx
 34c:	03609c01 	cmneq	r0, #256	; 0x100
 350:	630b0000 	movwvs	r0, #45056	; 0xb000
 354:	0d3b0100 	ldfeqs	f0, [fp, #-0]
 358:	0000008f 	andeq	r0, r0, pc, lsl #1
 35c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 360:	0001fa08 	andeq	pc, r1, r8, lsl #20
 364:	06210100 	strteq	r0, [r1], -r0, lsl #2
 368:	20000098 	mulcs	r0, r8, r0
 36c:	0000005a 	andeq	r0, r0, sl, asr r0
 370:	03869c01 	orreq	r9, r6, #256	; 0x100
 374:	010e0000 	mrseq	r0, (UNDEF: 14)
 378:	01000002 	tsteq	r0, r2
 37c:	008f2021 	addeq	r2, pc, r1, lsr #32
 380:	91020000 	mrsls	r0, (UNDEF: 2)
 384:	0c100077 	ldceq	0, cr0, [r0], {119}	; 0x77
 388:	01000001 	tsteq	r0, r1
 38c:	0054061b 	subseq	r0, r4, fp, lsl r6
 390:	00442000 	subeq	r2, r4, r0
 394:	9c010000 	stcls	0, cr0, [r1], {-0}
 398:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
 39c:	0100780c 	tsteq	r0, ip, lsl #16
 3a0:	008f251b 	addeq	r2, pc, fp, lsl r5	; <UNPREDICTABLE>
 3a4:	91020000 	mrsls	r0, (UNDEF: 2)
 3a8:	00630b6f 	rsbeq	r0, r3, pc, ror #22
 3ac:	8f0d1c01 	svchi	0x000d1c01
 3b0:	02000000 	andeq	r0, r0, #0
 3b4:	11007791 			; <UNDEFINED> instruction: 0x11007791
 3b8:	000001a5 	andeq	r0, r0, r5, lsr #3
 3bc:	10061501 	andne	r1, r6, r1, lsl #10
 3c0:	44200000 	strtmi	r0, [r0], #-0
 3c4:	01000000 	mrseq	r0, (UNDEF: 0)
 3c8:	00780c9c 			; <UNDEFINED> instruction: 0x00780c9c
 3cc:	8f231501 	svchi	0x00231501
 3d0:	02000000 	andeq	r0, r0, #0
 3d4:	630b6f91 	movwvs	r6, #49041	; 0xbf91
 3d8:	0d160100 	ldfeqs	f0, [r6, #-0]
 3dc:	0000008f 	andeq	r0, r0, pc, lsl #1
 3e0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 3e4:	00049200 	andeq	r9, r4, r0, lsl #4
 3e8:	4c000400 	cfstrsmi	mvf0, [r0], {-0}
 3ec:	04000001 	streq	r0, [r0], #-1
 3f0:	00013901 	andeq	r3, r1, r1, lsl #18
 3f4:	032f0c00 			; <UNDEFINED> instruction: 0x032f0c00
 3f8:	01c00000 	biceq	r0, r0, r0
	...
 404:	02c80000 	sbceq	r0, r8, #0
 408:	01020000 	mrseq	r0, (UNDEF: 2)
 40c:	00010006 	andeq	r0, r1, r6
 410:	00d30300 	sbcseq	r0, r3, r0, lsl #6
 414:	2b020000 	blcs	8041c <startup-0x1ff7fbe4>
 418:	00003818 	andeq	r3, r0, r8, lsl r8
 41c:	08010200 	stmdaeq	r1, {r9}
 420:	000000fe 	strdeq	r0, [r0], -lr
 424:	1e050202 	cdpne	2, 0, cr0, cr5, cr2, {0}
 428:	03000000 	movweq	r0, #0
 42c:	00000040 	andeq	r0, r0, r0, asr #32
 430:	52193902 	andspl	r3, r9, #32768	; 0x8000
 434:	02000000 	andeq	r0, r0, #0
 438:	018d0702 	orreq	r0, sp, r2, lsl #14
 43c:	04020000 	streq	r0, [r2], #-0
 440:	0000a505 	andeq	sl, r0, r5, lsl #10
 444:	00350300 	eorseq	r0, r5, r0, lsl #6
 448:	4f020000 	svcmi	0x00020000
 44c:	00006c19 	andeq	r6, r0, r9, lsl ip
 450:	07040200 	streq	r0, [r4, -r0, lsl #4]
 454:	0000017b 	andeq	r0, r0, fp, ror r1
 458:	a0050802 	andge	r0, r5, r2, lsl #16
 45c:	02000000 	andeq	r0, r0, #0
 460:	01760708 	cmneq	r6, r8, lsl #14
 464:	04040000 	streq	r0, [r4], #-0
 468:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 46c:	07040200 	streq	r0, [r4, -r0, lsl #4]
 470:	00000180 	andeq	r0, r0, r0, lsl #3
 474:	0000d503 	andeq	sp, r0, r3, lsl #10
 478:	13180300 	tstne	r8, #0, 6
 47c:	0000002c 	andeq	r0, r0, ip, lsr #32
 480:	00004203 	andeq	r4, r0, r3, lsl #4
 484:	14240300 	strtne	r0, [r4], #-768	; 0xfffffd00
 488:	00000046 	andeq	r0, r0, r6, asr #32
 48c:	00003703 	andeq	r3, r0, r3, lsl #14
 490:	14300300 	ldrtne	r0, [r0], #-768	; 0xfffffd00
 494:	00000060 	andeq	r0, r0, r0, rrx
 498:	00022d05 	andeq	r2, r2, r5, lsl #26
 49c:	0c041800 	stceq	8, cr1, [r4], {-0}
 4a0:	00015010 	andeq	r5, r1, r0, lsl r0
 4a4:	00bb0600 	adcseq	r0, fp, r0, lsl #12
 4a8:	0d040000 	stceq	0, cr0, [r4, #-0]
 4ac:	0000a70e 	andeq	sl, r0, lr, lsl #14
 4b0:	76060000 	strvc	r0, [r6], -r0
 4b4:	04000000 	streq	r0, [r0], #-0
 4b8:	009b0e0e 	addseq	r0, fp, lr, lsl #28
 4bc:	06040000 	streq	r0, [r4], -r0
 4c0:	00000232 	andeq	r0, r0, r2, lsr r2
 4c4:	9b0e0f04 	blls	3840dc <startup-0x1fc7bf24>
 4c8:	06000000 	streq	r0, [r0], -r0
 4cc:	0000ae06 	andeq	sl, r0, r6, lsl #28
 4d0:	0e100400 	cfmulseq	mvf0, mvf0, mvf0
 4d4:	000000a7 	andeq	r0, r0, r7, lsr #1
 4d8:	00dd0608 	sbcseq	r0, sp, r8, lsl #12
 4dc:	11040000 	mrsne	r0, (UNDEF: 4)
 4e0:	0000a70e 	andeq	sl, r0, lr, lsl #14
 4e4:	31060c00 	tstcc	r6, r0, lsl #24
 4e8:	04000001 	streq	r0, [r0], #-1
 4ec:	008f0d12 	addeq	r0, pc, r2, lsl sp	; <UNPREDICTABLE>
 4f0:	06100000 	ldreq	r0, [r0], -r0
 4f4:	0000007d 	andeq	r0, r0, sp, ror r0
 4f8:	8f0d1304 	svchi	0x000d1304
 4fc:	11000000 	mrsne	r0, (UNDEF: 0)
 500:	00009306 	andeq	r9, r0, r6, lsl #6
 504:	0e140400 	cfmulseq	mvf0, mvf4, mvf0
 508:	0000009b 	muleq	r0, fp, r0
 50c:	00f60612 	rscseq	r0, r6, r2, lsl r6
 510:	15040000 	strne	r0, [r4, #-0]
 514:	00008f0d 	andeq	r8, r0, sp, lsl #30
 518:	24061400 	strcs	r1, [r6], #-1024	; 0xfffffc00
 51c:	04000002 	streq	r0, [r0], #-2
 520:	008f0d16 	addeq	r0, pc, r6, lsl sp	; <UNPREDICTABLE>
 524:	06150000 	ldreq	r0, [r5], -r0
 528:	00000000 	andeq	r0, r0, r0
 52c:	9b0e1704 	blls	386144 <startup-0x1fc79ebc>
 530:	16000000 	strne	r0, [r0], -r0
 534:	01a00300 	lsleq	r0, r0, #6
 538:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
 53c:	0000b302 	andeq	fp, r0, r2, lsl #6
 540:	02f70500 	rscseq	r0, r7, #0, 10
 544:	01020000 	mrseq	r0, (UNDEF: 2)
 548:	0180100e 	orreq	r1, r0, lr
 54c:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
 550:	0d0f0100 	stfeqs	f0, [pc, #-0]	; 558 <startup-0x1ffffaa8>
 554:	0000008f 	andeq	r0, r0, pc, lsl #1
 558:	00790700 	rsbseq	r0, r9, r0, lsl #14
 55c:	8f0d1001 	svchi	0x000d1001
 560:	01000000 	mrseq	r0, (UNDEF: 0)
 564:	02c70300 	sbceq	r0, r7, #0, 6
 568:	11010000 	mrsne	r0, (UNDEF: 1)
 56c:	00015c02 	andeq	r5, r1, r2, lsl #24
 570:	02a00500 	adceq	r0, r0, #0, 10
 574:	012b0000 			; <UNDEFINED> instruction: 0x012b0000
 578:	01c11013 	biceq	r1, r1, r3, lsl r0
 57c:	ed060000 	stc	0, cr0, [r6, #-0]
 580:	01000002 	tsteq	r0, r2
 584:	008f0d14 	addeq	r0, pc, r4, lsl sp	; <UNPREDICTABLE>
 588:	06000000 	streq	r0, [r0], -r0
 58c:	0000031a 	andeq	r0, r0, sl, lsl r3
 590:	800b1501 	andhi	r1, fp, r1, lsl #10
 594:	01000001 	tsteq	r0, r1
 598:	0002cd06 	andeq	ip, r2, r6, lsl #26
 59c:	0b160100 	bleq	5809a4 <startup-0x1fa7f65c>
 5a0:	000001c1 	andeq	r0, r0, r1, asr #3
 5a4:	80080003 	andhi	r0, r8, r3
 5a8:	d1000001 	tstle	r0, r1
 5ac:	09000001 	stmdbeq	r0, {r0}
 5b0:	00000088 	andeq	r0, r0, r8, lsl #1
 5b4:	79030013 	stmdbvc	r3, {r0, r1, r4}
 5b8:	01000003 	tsteq	r0, r3
 5bc:	018c0217 	orreq	r0, ip, r7, lsl r2
 5c0:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
 5c4:	18000002 	stmdane	r0, {r1}
 5c8:	46101901 	ldrmi	r1, [r0], -r1, lsl #18
 5cc:	06000002 	streq	r0, [r0], -r2
 5d0:	00000373 	andeq	r0, r0, r3, ror r3
 5d4:	460c1a01 	strmi	r1, [ip], -r1, lsl #20
 5d8:	00000002 	andeq	r0, r0, r2
 5dc:	0002a706 	andeq	sl, r2, r6, lsl #14
 5e0:	0b1b0100 	bleq	6c09e8 <startup-0x1f93f618>
 5e4:	00000180 	andeq	r0, r0, r0, lsl #3
 5e8:	02b00604 	adcseq	r0, r0, #4, 12	; 0x400000
 5ec:	1c010000 	stcne	0, cr0, [r1], {-0}
 5f0:	0001800b 	andeq	r8, r1, fp
 5f4:	fe060600 	cdp2	6, 0, cr0, cr6, cr0, {0}
 5f8:	01000002 	tsteq	r0, r2
 5fc:	025d0d1d 	subseq	r0, sp, #1856	; 0x740
 600:	06080000 	streq	r0, [r8], -r0
 604:	0000011d 	andeq	r0, r0, sp, lsl r1
 608:	5d0d1e01 	stcpl	14, cr1, [sp, #-4]
 60c:	0c000002 	stceq	0, cr0, [r0], {2}
 610:	00039306 	andeq	r9, r3, r6, lsl #6
 614:	0d1f0100 	ldfeqs	f0, [pc, #-0]	; 61c <startup-0x1ffff9e4>
 618:	0000025d 	andeq	r0, r0, sp, asr r2
 61c:	03030610 	movweq	r0, #13840	; 0x3610
 620:	20010000 	andcs	r0, r1, r0
 624:	0002730d 	andeq	r7, r2, sp, lsl #6
 628:	0a001400 	beq	5630 <startup-0x1fffa9d0>
 62c:	0001d104 	andeq	sp, r1, r4, lsl #2
 630:	02570b00 	subseq	r0, r7, #0, 22
 634:	570c0000 	strpl	r0, [ip, -r0]
 638:	00000002 	andeq	r0, r0, r2
 63c:	01dd040a 	bicseq	r0, sp, sl, lsl #8
 640:	040a0000 	streq	r0, [sl], #-0
 644:	0000024c 	andeq	r0, r0, ip, asr #4
 648:	0002730b 	andeq	r7, r2, fp, lsl #6
 64c:	02570c00 	subseq	r0, r7, #0, 24
 650:	800c0000 	andhi	r0, ip, r0
 654:	00000001 	andeq	r0, r0, r1
 658:	0263040a 	rsbeq	r0, r3, #167772160	; 0xa000000
 65c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 660:	01000003 	tsteq	r0, r3
 664:	01dd0221 	bicseq	r0, sp, r1, lsr #4
 668:	e30d0000 	movw	r0, #53248	; 0xd000
 66c:	01000002 	tsteq	r0, r2
 670:	00810567 	addeq	r0, r1, r7, ror #10
 674:	07280000 	streq	r0, [r8, -r0]!
 678:	00242000 	eoreq	r2, r4, r0
 67c:	9c010000 	stcls	0, cr0, [r1], {-0}
 680:	000002c4 	andeq	r0, r0, r4, asr #5
 684:	0002b90e 	andeq	fp, r2, lr, lsl #18
 688:	126f0100 	rsbne	r0, pc, #0, 2
 68c:	000001d1 	ldrdeq	r0, [r0], -r1
 690:	07fc0305 	ldrbeq	r0, [ip, r5, lsl #6]!
 694:	9b0e2000 	blls	38869c <startup-0x1fc77964>
 698:	01000002 	tsteq	r0, r2
 69c:	0279137a 	rsbseq	r1, r9, #-402653183	; 0xe8000001
 6a0:	03050000 	movweq	r0, #20480	; 0x5000
 6a4:	200007e4 	andcs	r0, r0, r4, ror #15
 6a8:	031f0f00 	tsteq	pc, #0, 30
 6ac:	63010000 	movwvs	r0, #4096	; 0x1000
 6b0:	00071006 	andeq	r1, r7, r6
 6b4:	00001820 	andeq	r1, r0, r0, lsr #16
 6b8:	109c0100 	addsne	r0, ip, r0, lsl #2
 6bc:	00000387 	andeq	r0, r0, r7, lsl #7
 6c0:	5c064b01 			; <UNDEFINED> instruction: 0x5c064b01
 6c4:	b4200006 	strtlt	r0, [r0], #-6
 6c8:	01000000 	mrseq	r0, (UNDEF: 0)
 6cc:	0003299c 	muleq	r3, ip, r9
 6d0:	02d41100 	sbcseq	r1, r4, #0, 2
 6d4:	4b010000 	blmi	406dc <startup-0x1ffbf924>
 6d8:	0003291a 	andeq	r2, r3, sl, lsl r9
 6dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
 6e0:	0002d90e 	andeq	sp, r2, lr, lsl #18
 6e4:	0d4c0100 	stfeqe	f0, [ip, #-0]
 6e8:	0000008f 	andeq	r0, r0, pc, lsl #1
 6ec:	0e769102 	expeqs	f1, f2
 6f0:	000002de 	ldrdeq	r0, [r0], -lr
 6f4:	8f0d4d01 	svchi	0x000d4d01
 6f8:	02000000 	andeq	r0, r0, #0
 6fc:	8f0e7591 	svchi	0x000e7591
 700:	01000002 	tsteq	r0, r2
 704:	032f0a4e 			; <UNDEFINED> instruction: 0x032f0a4e
 708:	91020000 	mrsls	r0, (UNDEF: 2)
 70c:	040a0077 	streq	r0, [sl], #-119	; 0xffffff89
 710:	00000279 	andeq	r0, r0, r9, ror r2
 714:	ba020102 	blt	80b24 <startup-0x1ff7f4dc>
 718:	12000001 	andne	r0, r0, #1
 71c:	00000303 	andeq	r0, r0, r3, lsl #6
 720:	40064701 	andmi	r4, r6, r1, lsl #14
 724:	1c200006 	stcne	0, cr0, [r0], #-24	; 0xffffffe8
 728:	01000000 	mrseq	r0, (UNDEF: 0)
 72c:	00036b9c 	muleq	r3, ip, fp
 730:	02d41100 	sbcseq	r1, r4, #0, 2
 734:	47010000 	strmi	r0, [r1, -r0]
 738:	00032918 	andeq	r2, r3, r8, lsl r9
 73c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 740:	0002a711 	andeq	sl, r2, r1, lsl r7
 744:	24470100 	strbcs	r0, [r7], #-256	; 0xffffff00
 748:	00000180 	andeq	r0, r0, r0, lsl #3
 74c:	00709102 	rsbseq	r9, r0, r2, lsl #2
 750:	00030d10 	andeq	r0, r3, r0, lsl sp
 754:	063c0100 	ldrteq	r0, [ip], -r0, lsl #2
 758:	200005aa 	andcs	r0, r0, sl, lsr #11
 75c:	00000096 	muleq	r0, r6, r0
 760:	03f79c01 	mvnseq	r9, #256	; 0x100
 764:	d4110000 	ldrle	r0, [r1], #-0
 768:	01000002 	tsteq	r0, r2
 76c:	03291b3c 			; <UNDEFINED> instruction: 0x03291b3c
 770:	91020000 	mrsls	r0, (UNDEF: 2)
 774:	03730e54 	cmneq	r3, #84, 28	; 0x540
 778:	3d010000 	stccc	0, cr0, [r1, #-0]
 77c:	0002460c 	andeq	r4, r2, ip, lsl #12
 780:	60910200 	addsvs	r0, r1, r0, lsl #4
 784:	0005b813 	andeq	fp, r5, r3, lsl r8
 788:	00008020 	andeq	r8, r0, r0, lsr #32
 78c:	00691400 	rsbeq	r1, r9, r0, lsl #8
 790:	8f123e01 	svchi	0x00123e01
 794:	02000000 	andeq	r0, r0, #0
 798:	c2136791 	andsgt	r6, r3, #38010880	; 0x2440000
 79c:	5e200005 	cdppl	0, 2, cr0, cr0, cr5, {0}
 7a0:	14000000 	strne	r0, [r0], #-0
 7a4:	3f010078 	svccc	0x00010078
 7a8:	00008f11 	andeq	r8, r0, r1, lsl pc
 7ac:	5f910200 	svcpl	0x00910200
 7b0:	01007914 	tsteq	r0, r4, lsl r9
 7b4:	008f1140 	addeq	r1, pc, r0, asr #2
 7b8:	91020000 	mrsls	r0, (UNDEF: 2)
 7bc:	7870145e 	ldmdavc	r0!, {r1, r2, r3, r4, r6, sl, ip}^
 7c0:	11410100 	mrsne	r0, (UNDEF: 81)
 7c4:	0000008f 	andeq	r0, r0, pc, lsl #1
 7c8:	145d9102 	ldrbne	r9, [sp], #-258	; 0xfffffefe
 7cc:	01007970 	tsteq	r0, r0, ror r9
 7d0:	008f1142 	addeq	r1, pc, r2, asr #2
 7d4:	91020000 	mrsls	r0, (UNDEF: 2)
 7d8:	0000005c 	andeq	r0, r0, ip, asr r0
 7dc:	00039810 	andeq	r9, r3, r0, lsl r8
 7e0:	06310100 	ldrteq	r0, [r1], -r0, lsl #2
 7e4:	20000514 	andcs	r0, r0, r4, lsl r5
 7e8:	00000096 	muleq	r0, r6, r0
 7ec:	04839c01 	streq	r9, [r3], #3073	; 0xc01
 7f0:	d4110000 	ldrle	r0, [r1], #-0
 7f4:	01000002 	tsteq	r0, r2
 7f8:	03291a31 			; <UNDEFINED> instruction: 0x03291a31
 7fc:	91020000 	mrsls	r0, (UNDEF: 2)
 800:	03730e54 	cmneq	r3, #84, 28	; 0x540
 804:	32010000 	andcc	r0, r1, #0
 808:	0002460c 	andeq	r4, r2, ip, lsl #12
 80c:	60910200 	addsvs	r0, r1, r0, lsl #4
 810:	00052213 	andeq	r2, r5, r3, lsl r2
 814:	00008020 	andeq	r8, r0, r0, lsr #32
 818:	00691400 	rsbeq	r1, r9, r0, lsl #8
 81c:	8f123301 	svchi	0x00123301
 820:	02000000 	andeq	r0, r0, #0
 824:	2c136791 	ldccs	7, cr6, [r3], {145}	; 0x91
 828:	5e200005 	cdppl	0, 2, cr0, cr0, cr5, {0}
 82c:	14000000 	strne	r0, [r0], #-0
 830:	34010078 	strcc	r0, [r1], #-120	; 0xffffff88
 834:	00008f11 	andeq	r8, r0, r1, lsl pc
 838:	5f910200 	svcpl	0x00910200
 83c:	01007914 	tsteq	r0, r4, lsl r9
 840:	008f1135 	addeq	r1, pc, r5, lsr r1	; <UNPREDICTABLE>
 844:	91020000 	mrsls	r0, (UNDEF: 2)
 848:	7870145e 	ldmdavc	r0!, {r1, r2, r3, r4, r6, sl, ip}^
 84c:	11360100 	teqne	r6, r0, lsl #2
 850:	0000008f 	andeq	r0, r0, pc, lsl #1
 854:	145d9102 	ldrbne	r9, [sp], #-258	; 0xfffffefe
 858:	01007970 	tsteq	r0, r0, ror r9
 85c:	008f1137 	addeq	r1, pc, r7, lsr r1	; <UNPREDICTABLE>
 860:	91020000 	mrsls	r0, (UNDEF: 2)
 864:	0000005c 	andeq	r0, r0, ip, asr r0
 868:	00037f0f 	andeq	r7, r3, pc, lsl #30
 86c:	06250100 	strteq	r0, [r5], -r0, lsl #2
 870:	20000000 	andcs	r0, r0, r0
 874:	0000000c 	andeq	r0, r0, ip
 878:	Address 0x0000000000000878 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000803 	andeq	r0, r0, r3, lsl #16
  38:	03011305 	movweq	r1, #4869	; 0x1305
  3c:	3a0b0b0e 	bcc	2c2c7c <startup-0x1fd3d384>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0013010b 	andseq	r0, r3, fp, lsl #2
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	0b390b3b 	bleq	e42d44 <startup-0x1f1bd2bc>
  54:	0b381349 	bleq	e04d80 <startup-0x1f1fb280>
  58:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  5c:	03193f00 	tsteq	r9, #0, 30
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  6c:	96184006 	ldrls	r4, [r8], -r6
  70:	00001942 	andeq	r1, r0, r2, asr #18
  74:	3f012e08 	svccc	0x00012e08
  78:	3a0e0319 	bcc	380ce4 <startup-0x1fc7f31c>
  7c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	1119270b 	tstne	r9, fp, lsl #14
  84:	40061201 	andmi	r1, r6, r1, lsl #4
  88:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  8c:	00001301 	andeq	r1, r0, r1, lsl #6
  90:	11010b09 	tstne	r1, r9, lsl #22
  94:	00061201 	andeq	r1, r6, r1, lsl #4
  98:	00340a00 	eorseq	r0, r4, r0, lsl #20
  9c:	0b3a0e03 	bleq	e838b0 <startup-0x1f17c750>
  a0:	0b390b3b 	bleq	e42d94 <startup-0x1f1bd26c>
  a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  a8:	340b0000 	strcc	r0, [fp], #-0
  ac:	3a080300 	bcc	200cb4 <startup-0x1fdff34c>
  b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  b8:	0c000018 	stceq	0, cr0, [r0], {24}
  bc:	08030005 	stmdaeq	r3, {r0, r2}
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	13490b39 	movtne	r0, #39737	; 0x9b39
  c8:	00001802 	andeq	r1, r0, r2, lsl #16
  cc:	3f012e0d 	svccc	0x00012e0d
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  e0:	96184006 	ldrls	r4, [r8], -r6
  e4:	13011942 	movwne	r1, #6466	; 0x1942
  e8:	050e0000 	streq	r0, [lr, #-0]
  ec:	3a0e0300 	bcc	380cf4 <startup-0x1fc7f30c>
  f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  f8:	0f000018 	svceq	0x00000018
  fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 100:	0b3a0e03 	bleq	e83914 <startup-0x1f17c6ec>
 104:	0b390b3b 	bleq	e42df8 <startup-0x1f1bd208>
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 110:	00130119 	andseq	r0, r3, r9, lsl r1
 114:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 118:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 124:	06120111 			; <UNDEFINED> instruction: 0x06120111
 128:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 12c:	00130119 	andseq	r0, r3, r9, lsl r1
 130:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 138:	0b3b0b3a 	bleq	ec2e28 <startup-0x1f13d1d8>
 13c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 148:	00000019 	andeq	r0, r0, r9, lsl r0
 14c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 150:	030b130e 	movweq	r1, #45838	; 0xb30e
 154:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 158:	10011117 	andne	r1, r1, r7, lsl r1
 15c:	02000017 	andeq	r0, r0, #23
 160:	0b0b0024 	bleq	2c01f8 <startup-0x1fd3fe08>
 164:	0e030b3e 	vmoveq.16	d3[0], r0
 168:	16030000 	strne	r0, [r3], -r0
 16c:	3a0e0300 	bcc	380d74 <startup-0x1fc7f28c>
 170:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	0013490b 	andseq	r4, r3, fp, lsl #18
 178:	00240400 	eoreq	r0, r4, r0, lsl #8
 17c:	0b3e0b0b 	bleq	f82db0 <startup-0x1f07d250>
 180:	00000803 	andeq	r0, r0, r3, lsl #16
 184:	03011305 	movweq	r1, #4869	; 0x1305
 188:	3a0b0b0e 	bcc	2c2dc8 <startup-0x1fd3d238>
 18c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	0013010b 	andseq	r0, r3, fp, lsl #2
 194:	000d0600 	andeq	r0, sp, r0, lsl #12
 198:	0b3a0e03 	bleq	e839ac <startup-0x1f17c654>
 19c:	0b390b3b 	bleq	e42e90 <startup-0x1f1bd170>
 1a0:	0b381349 	bleq	e04ecc <startup-0x1f1fb134>
 1a4:	0d070000 	stceq	0, cr0, [r7, #-0]
 1a8:	3a080300 	bcc	200db0 <startup-0x1fdff250>
 1ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1b4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 1b8:	13490101 	movtne	r0, #37121	; 0x9101
 1bc:	00001301 	andeq	r1, r0, r1, lsl #6
 1c0:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 1c4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 1c8:	000f0a00 	andeq	r0, pc, r0, lsl #20
 1cc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 1d0:	150b0000 	strne	r0, [fp, #-0]
 1d4:	01192701 	tsteq	r9, r1, lsl #14
 1d8:	0c000013 	stceq	0, cr0, [r0], {19}
 1dc:	13490005 	movtne	r0, #36869	; 0x9005
 1e0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 1e4:	03193f01 	tsteq	r9, #1, 30
 1e8:	3b0b3a0e 	blcc	2cea28 <startup-0x1fd315d8>
 1ec:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1f0:	11134919 	tstne	r3, r9, lsl r9
 1f4:	40061201 	andmi	r1, r6, r1, lsl #4
 1f8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1fc:	00001301 	andeq	r1, r0, r1, lsl #6
 200:	0300340e 	movweq	r3, #1038	; 0x40e
 204:	3b0b3a0e 	blcc	2cea44 <startup-0x1fd315bc>
 208:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 20c:	00180213 	andseq	r0, r8, r3, lsl r2
 210:	002e0f00 	eoreq	r0, lr, r0, lsl #30
 214:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 218:	0b3b0b3a 	bleq	ec2f08 <startup-0x1f13d0f8>
 21c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 220:	06120111 			; <UNDEFINED> instruction: 0x06120111
 224:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 228:	10000019 	andne	r0, r0, r9, lsl r0
 22c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 230:	0b3a0e03 	bleq	e83a44 <startup-0x1f17c5bc>
 234:	0b390b3b 	bleq	e42f28 <startup-0x1f1bd0d8>
 238:	01111927 	tsteq	r1, r7, lsr #18
 23c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 240:	01194296 			; <UNDEFINED> instruction: 0x01194296
 244:	11000013 	tstne	r0, r3, lsl r0
 248:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 24c:	0b3b0b3a 	bleq	ec2f3c <startup-0x1f13d0c4>
 250:	13490b39 	movtne	r0, #39737	; 0x9b39
 254:	00001802 	andeq	r1, r0, r2, lsl #16
 258:	3f012e12 	svccc	0x00012e12
 25c:	3a0e0319 	bcc	380ec8 <startup-0x1fc7f138>
 260:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 264:	1119270b 	tstne	r9, fp, lsl #14
 268:	40061201 	andmi	r1, r6, r1, lsl #4
 26c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 270:	00001301 	andeq	r1, r0, r1, lsl #6
 274:	11010b13 	tstne	r1, r3, lsl fp
 278:	00061201 	andeq	r1, r6, r1, lsl #4
 27c:	00341400 	eorseq	r1, r4, r0, lsl #8
 280:	0b3a0803 	bleq	e82294 <startup-0x1f17dd6c>
 284:	0b390b3b 	bleq	e42f78 <startup-0x1f1bd088>
 288:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 28c:	Address 0x000000000000028c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000504 	andeq	r0, r0, r4, lsl #10
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	03e50002 	mvneq	r0, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000514 	andcs	r0, r0, r4, lsl r5
  34:	00000238 	andeq	r0, r0, r8, lsr r2
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000002c4 	andeq	r0, r0, r4, asr #5
   4:	00fa0003 	rscseq	r0, sl, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
  24:	6f442f65 	svcvs	0x00442f65
  28:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  2c:	2f73746e 	svccs	0x0073746e
  30:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
  34:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
  38:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  3c:	33564c2f 	cmpcc	r6, #12032	; 0x2f00
  40:	646f632f 	strbtvs	r6, [pc], #-815	; 48 <startup-0x1fffffb8>
  44:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  48:	636c2f65 	cmnvs	ip, #404	; 0x194
  4c:	73696464 	cmnvc	r9, #100, 8	; 0x64000000
  50:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  54:	73752f00 	cmnvc	r5, #0, 30
  58:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
  5c:	6f6e2d6d 	svcvs	0x006e2d6d
  60:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  64:	2f696261 	svccs	0x00696261
  68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  6c:	2f656475 	svccs	0x00656475
  70:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  74:	00656e69 	rsbeq	r6, r5, r9, ror #28
  78:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
  7c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  80:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  84:	61652d65 	cmnvs	r5, r5, ror #26
  88:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
  8c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  90:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
  94:	2f007379 	svccs	0x00007379
  98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  9c:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
  a0:	6f442f65 	svcvs	0x00442f65
  a4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  a8:	2f73746e 	svccs	0x0073746e
  ac:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
  b0:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
  b4:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  b8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
  bc:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
  c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  c4:	67000065 	strvs	r0, [r0, -r5, rrx]
  c8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  cc:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
  d0:	00010063 	andeq	r0, r1, r3, rrx
  d4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
  d8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
  dc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  e0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
  e4:	00020068 	andeq	r0, r2, r8, rrx
  e8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
  ec:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
  f0:	0300682e 	movweq	r6, #2094	; 0x82e
  f4:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
  f8:	49504762 	ldmdbmi	r0, {r1, r5, r6, r8, r9, sl, lr}^
  fc:	00682e4f 	rsbeq	r2, r8, pc, asr #28
 100:	00000004 	andeq	r0, r0, r4
 104:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
 108:	00001002 	andeq	r1, r0, r2
 10c:	01140320 	tsteq	r4, r0, lsr #6
 110:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
 114:	054b200d 	strbeq	r2, [fp, #-13]
 118:	0b056607 	bleq	15993c <startup-0x1fea66c4>
 11c:	20150575 	andscs	r0, r5, r5, ror r5
 120:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 124:	17056828 	strne	r6, [r5, -r8, lsr #16]
 128:	200d0567 	andcs	r0, sp, r7, ror #10
 12c:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 130:	1505c90b 	strne	ip, [r5, #-2315]	; 0xfffff6f5
 134:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 138:	05682c05 	strbeq	r2, [r8, #-3077]!	; 0xfffff3fb
 13c:	01056705 	tsteq	r5, r5, lsl #14
 140:	05741003 	ldrbeq	r1, [r4, #-3]!
 144:	20700305 	rsbscs	r0, r0, r5, lsl #6
 148:	10030105 	andne	r0, r3, r5, lsl #2
 14c:	030d054a 	movweq	r0, #54602	; 0xd54a
 150:	223d2072 	eorscs	r2, sp, #114	; 0x72
 154:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 158:	053d223d 	ldreq	r2, [sp, #-573]!	; 0xfffffdc3
 15c:	1b052201 	blne	148968 <startup-0x1feb7698>
 160:	3d05054c 	cfstr32cc	mvfx0, [r5, #-304]	; 0xfffffed0
 164:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 168:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 16c:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 170:	04020009 	streq	r0, [r2], #-9
 174:	02003201 	andeq	r3, r0, #268435456	; 0x10000000
 178:	053d0104 	ldreq	r0, [sp, #-260]!	; 0xfffffefc
 17c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 180:	0b052f01 	bleq	14bd8c <startup-0x1feb4274>
 184:	01040200 	mrseq	r0, R12_usr
 188:	0009053c 	andeq	r0, r9, ip, lsr r5
 18c:	4b010402 	blmi	4119c <startup-0x1ffbee64>
 190:	01040200 	mrseq	r0, R12_usr
 194:	0005053d 	andeq	r0, r5, sp, lsr r5
 198:	2f010402 	svccs	0x00010402
 19c:	3d0b054c 	cfstr32cc	mvfx0, [fp, #-304]	; 0xfffffed0
 1a0:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 1a4:	2a052f01 	bcs	14bdb0 <startup-0x1feb4250>
 1a8:	670505ae 	strvs	r0, [r5, -lr, lsr #11]
 1ac:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 1b0:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
 1b4:	2f593d2f 	svccs	0x00593d2f
 1b8:	2f21053d 	svccs	0x0021053d
 1bc:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 1c0:	0b054b05 	bleq	152ddc <startup-0x1fead224>
 1c4:	2013053d 	andscs	r0, r3, sp, lsr r5
 1c8:	4a07052f 	bmi	1c168c <startup-0x1fe3e974>
 1cc:	3d210905 			; <UNDEFINED> instruction: 0x3d210905
 1d0:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 1d4:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 1d8:	0c053d21 	stceq	13, cr3, [r5], {33}	; 0x21
 1dc:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 1e0:	05ae3705 	streq	r3, [lr, #1797]!	; 0x705
 1e4:	1605910b 	strne	r9, [r5], -fp, lsl #2
 1e8:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 1ec:	2f3d2f59 	svccs	0x003d2f59
 1f0:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 1f4:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 1f8:	13053d21 	movwne	r3, #23841	; 0x5d21
 1fc:	4a070530 	bmi	1c16c4 <startup-0x1fe3e93c>
 200:	3d210905 			; <UNDEFINED> instruction: 0x3d210905
 204:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 208:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
 20c:	01053d2f 	tsteq	r5, pc, lsr #26
 210:	7641053d 			; <UNDEFINED> instruction: 0x7641053d
 214:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 218:	01053d59 	tsteq	r5, r9, asr sp
 21c:	4c3b0583 	cfldr32mi	mvfx0, [fp], #-524	; 0xfffffdf4
 220:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 224:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 228:	2f058301 	svccs	0x00058301
 22c:	670c054c 	strvs	r0, [ip, -ip, asr #10]
 230:	67010559 	smlsdvs	r1, r9, r5, r0
 234:	054c2c05 	strbeq	r2, [ip, #-3077]	; 0xfffff3fb
 238:	1305e70f 	movwne	lr, #22287	; 0x570f
 23c:	580b053c 	stmdapl	fp, {r2, r3, r4, r5, r8, sl}
 240:	053d1605 	ldreq	r1, [sp, #-1541]!	; 0xfffff9fb
 244:	10053c1a 	andne	r3, r5, sl, lsl ip
 248:	3c0a0590 	cfstr32cc	mvfx0, [sl], {144}	; 0x90
 24c:	053d0805 	ldreq	r0, [sp, #-2053]!	; 0xfffff7fb
 250:	0b054b14 	bleq	152ea8 <startup-0x1fead158>
 254:	6814054b 	ldmdavs	r4, {r0, r1, r3, r6, r8, sl}
 258:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 25c:	05bb5b05 	ldreq	r5, [fp, #2821]!	; 0xb05
 260:	0505c914 	streq	ip, [r5, #-2324]	; 0xfffff6ec
 264:	ad080591 	cfstr32ge	mvfx0, [r8, #-580]	; 0xfffffdbc
 268:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 26c:	0e059216 	mcreq	2, 0, r9, cr5, cr6, {0}
 270:	300505ba 			; <UNDEFINED> instruction: 0x300505ba
 274:	059f0105 	ldreq	r0, [pc, #261]	; 381 <startup-0x1ffffc7f>
 278:	12057621 	andne	r7, r5, #34603008	; 0x2100000
 27c:	3c05053d 	cfstr32cc	mvfx0, [r5], {61}	; 0x3d
 280:	9f210905 	svcls	0x00210905
 284:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
 288:	0d053c09 	stceq	12, cr3, [r5, #-36]	; 0xffffffdc
 28c:	03040200 	movweq	r0, #16896	; 0x4200
 290:	002c0521 	eoreq	r0, ip, r1, lsr #10
 294:	49030402 	stmdbmi	r3, {r1, sl}
 298:	02000905 	andeq	r0, r0, #81920	; 0x14000
 29c:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 2a0:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 2a4:	05054702 	streq	r4, [r5, #-1794]	; 0xfffff8fe
 2a8:	01040200 	mrseq	r0, R12_usr
 2ac:	51010558 	tstpl	r1, r8, asr r5
 2b0:	054d1905 	strbeq	r1, [sp, #-2309]	; 0xfffff6fb
 2b4:	3d3d2f05 	ldccc	15, cr2, [sp, #-20]!	; 0xffffffec
 2b8:	4b3f3d3d 	blmi	fcf7b4 <startup-0x1f03084c>
 2bc:	4c4c4c4c 	mcrrmi	12, 4, r4, ip, cr12
 2c0:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
 2c4:	01010003 	tsteq	r1, r3
 2c8:	0000024a 	andeq	r0, r0, sl, asr #4
 2cc:	00f90003 	rscseq	r0, r9, r3
 2d0:	01020000 	mrseq	r0, (UNDEF: 2)
 2d4:	000d0efb 	strdeq	r0, [sp], -fp
 2d8:	01010101 	tsteq	r1, r1, lsl #2
 2dc:	01000000 	mrseq	r0, (UNDEF: 0)
 2e0:	2f010000 	svccs	0x00010000
 2e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 2e8:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 2ec:	6f442f65 	svcvs	0x00442f65
 2f0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 2f4:	2f73746e 	svccs	0x0073746e
 2f8:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 2fc:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 300:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 304:	33564c2f 	cmpcc	r6, #12032	; 0x2f00
 308:	646f632f 	strbtvs	r6, [pc], #-815	; 310 <startup-0x1ffffcf0>
 30c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 310:	636c2f65 	cmnvs	ip, #404	; 0x194
 314:	73696464 	cmnvc	r9, #100, 8	; 0x64000000
 318:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 31c:	73752f00 	cmnvc	r5, #0, 30
 320:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 324:	6f6e2d6d 	svcvs	0x006e2d6d
 328:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 32c:	2f696261 	svccs	0x00696261
 330:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 334:	2f656475 	svccs	0x00656475
 338:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 33c:	00656e69 	rsbeq	r6, r5, r9, ror #28
 340:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
 344:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 348:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 34c:	61652d65 	cmnvs	r5, r5, ror #26
 350:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
 354:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 358:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
 35c:	2f007379 	svccs	0x00007379
 360:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 364:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 368:	6f442f65 	svcvs	0x00442f65
 36c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 370:	2f73746e 	svccs	0x0073746e
 374:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 378:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 37c:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 380:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
 384:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
 388:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 38c:	73000065 	movwvc	r0, #101	; 0x65
 390:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 394:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 398:	00000100 	andeq	r0, r0, r0, lsl #2
 39c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 3a0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 3a4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 3a8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 3ac:	00000200 	andeq	r0, r0, r0, lsl #4
 3b0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 3b4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 3b8:	00030068 	andeq	r0, r3, r8, rrx
 3bc:	62696c00 	rsbvs	r6, r9, #0, 24
 3c0:	4f495047 	svcmi	0x00495047
 3c4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 3c8:	05000000 	streq	r0, [r0, #-0]
 3cc:	02050001 	andeq	r0, r5, #1
 3d0:	20000000 	andcs	r0, r0, r0
 3d4:	13012503 	movwne	r2, #5379	; 0x1503
 3d8:	0003025e 	andeq	r0, r3, lr, asr r2
 3dc:	20050101 	andcs	r0, r5, r1, lsl #2
 3e0:	14020500 	strne	r0, [r2], #-1280	; 0xfffffb00
 3e4:	03200005 			; <UNDEFINED> instruction: 0x03200005
 3e8:	0c050130 	stfeqs	f0, [r5], {48}	; 0x30
 3ec:	3d12054b 	cfldr32cc	mvfx0, [r2, #-300]	; 0xfffffed4
 3f0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 3f4:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 3f8:	11052103 	tstne	r5, r3, lsl #2
 3fc:	03040200 	movweq	r0, #16896	; 0x4200
 400:	0025053c 	eoreq	r0, r5, ip, lsr r5
 404:	83030402 	movwhi	r0, #13314	; 0x3402
 408:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 40c:	002e0304 	eoreq	r0, lr, r4, lsl #6
 410:	83030402 	movwhi	r0, #13314	; 0x3402
 414:	03040200 	movweq	r0, #16896	; 0x4200
 418:	00090559 	andeq	r0, r9, r9, asr r5
 41c:	59030402 	stmdbpl	r3, {r1, sl}
 420:	02003005 	andeq	r3, r0, #5
 424:	05ed0304 	strbeq	r0, [sp, #772]!	; 0x304
 428:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 42c:	05055801 	streq	r5, [r5, #-2049]	; 0xfffff7ff
 430:	01040200 	mrseq	r0, R12_usr
 434:	5f01052e 	svcpl	0x0001052e
 438:	054c2105 	strbeq	r2, [ip, #-261]	; 0xfffffefb
 43c:	12054b0c 	andne	r4, r5, #12, 22	; 0x3000
 440:	4a05053d 	bmi	14193c <startup-0x1febe6c4>
 444:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 448:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 44c:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 450:	25053c03 	strcs	r3, [r5, #-3075]	; 0xfffff3fd
 454:	03040200 	movweq	r0, #16896	; 0x4200
 458:	00110583 	andseq	r0, r1, r3, lsl #11
 45c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 460:	03040200 	movweq	r0, #16896	; 0x4200
 464:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
 468:	09055903 	stmdbeq	r5, {r0, r1, r8, fp, ip, lr}
 46c:	03040200 	movweq	r0, #16896	; 0x4200
 470:	00300559 	eorseq	r0, r0, r9, asr r5
 474:	ed030402 	cfstrs	mvf0, [r3, #-8]
 478:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 47c:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 480:	04020005 	streq	r0, [r2], #-5
 484:	01052e01 	tsteq	r5, r1, lsl #28
 488:	4c2e055f 	cfstr32mi	mvfx0, [lr], #-380	; 0xfffffe84
 48c:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
 490:	20054b01 	andcs	r4, r5, r1, lsl #22
 494:	4b22054c 	blmi	8819cc <startup-0x1f77e634>
 498:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
 49c:	22052e0d 	andcs	r2, r5, #13, 28	; 0xd0
 4a0:	2e35054b 	cdpcs	5, 3, cr0, cr5, cr11, {2}
 4a4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 4a8:	08054b0a 	stmdaeq	r5, {r1, r3, r8, r9, fp, lr}
 4ac:	0012054c 	andseq	r0, r2, ip, asr #10
 4b0:	4a010402 	bmi	414c0 <startup-0x1ffbeb40>
 4b4:	054b2b05 	strbeq	r2, [fp, #-2821]	; 0xfffff4fb
 4b8:	15052e1a 	strne	r2, [r5, #-3610]	; 0xfffff1e6
 4bc:	4c08054b 	cfstr32mi	mvfx0, [r8], {75}	; 0x4b
 4c0:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
 4c4:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 4c8:	1a054b2b 	bne	15317c <startup-0x1feace84>
 4cc:	4b15052e 	blmi	54198c <startup-0x1fabe674>
 4d0:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
 4d4:	0905590d 	stmdbeq	r5, {r0, r2, r3, r8, fp, ip, lr}
 4d8:	3d1a052e 	cfldr32cc	mvfx0, [sl, #-184]	; 0xffffff48
 4dc:	590d0559 	stmdbpl	sp, {r0, r3, r4, r6, r8, sl}
 4e0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 4e4:	15053f01 	strne	r3, [r5, #-3841]	; 0xfffff0ff
 4e8:	2f0b054e 	svccs	0x000b054e
 4ec:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 4f0:	05772f01 	ldrbeq	r2, [r7, #-3841]!	; 0xfffff0ff
 4f4:	052f2f05 	streq	r2, [pc, #-3845]!	; fffff5f7 <ball_geometry.4359+0xdfffedfb>
 4f8:	0402000d 	streq	r0, [r2], #-13
 4fc:	2e1a0301 	cdpcs	3, 1, cr0, cr10, cr1, {0}
 500:	02000905 	andeq	r0, r0, #81920	; 0x14000
 504:	002e0104 	eoreq	r0, lr, r4, lsl #2
 508:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 50c:	01040200 	mrseq	r0, R12_usr
 510:	0004023b 	andeq	r0, r4, fp, lsr r2
 514:	Address 0x0000000000000514 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f52444f 	svcpl	0x0052444f
   4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
   8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
   c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
  10:	69006c65 	stmdbvs	r0, {r0, r2, r5, r6, sl, fp, sp, lr}
  14:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
  18:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  1c:	68730070 	ldmdavs	r3!, {r4, r5, r6}^
  20:	2074726f 	rsbscs	r7, r4, pc, ror #4
  24:	00746e69 	rsbseq	r6, r4, r9, ror #28
  28:	70617267 	rsbvc	r7, r1, r7, ror #4
  2c:	5f636968 	svcpl	0x00636968
  30:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  34:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff13c <ball_geometry.4359+0xdfffe940>
  38:	33746e69 	cmncc	r4, #1680	; 0x690
  3c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
  40:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  44:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
  48:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
  4c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  50:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  54:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  58:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffee4 <ball_geometry.4359+0xdffff6e8>
  5c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  60:	61726700 	cmnvs	r2, r0, lsl #14
  64:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  68:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  6c:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
  70:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  74:	746f006e 	strbtvc	r0, [pc], #-110	; 7c <startup-0x1fffff84>
  78:	72657079 	rsbvc	r7, r5, #121	; 0x79
  7c:	72646900 	rsbvc	r6, r4, #0, 18
  80:	6769685f 			; <UNDEFINED> instruction: 0x6769685f
  84:	72670068 	rsbvc	r0, r7, #104	; 0x68
  88:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  8c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  90:	49006461 	stmdbmi	r0, {r0, r5, r6, sl, sp, lr}
  94:	525f5244 	subspl	r5, pc, #68, 4	; 0x40000004
  98:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
  9c:	00444556 	subeq	r4, r4, r6, asr r5
  a0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  a4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
  a8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
  ac:	736f0074 	cmnvc	pc, #116	; 0x74
  b0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  b4:	61700072 	cmnvs	r0, r2, ror r0
  b8:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
  bc:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
  c0:	61726700 	cmnvs	r2, r0, lsl #14
  c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  c8:	6165725f 	cmnvs	r5, pc, asr r2
  cc:	61645f64 	cmnvs	r4, r4, ror #30
  d0:	5f006174 	svcpl	0x00006174
  d4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  d8:	745f3874 	ldrbvc	r3, [pc], #-2164	; e0 <startup-0x1fffff20>
  dc:	64757000 	ldrbtvs	r7, [r5], #-0
  e0:	67007270 	smlsdxvs	r0, r0, r2, r7
  e4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  e8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  ec:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  f0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  f4:	646f0061 	strbtvs	r0, [pc], #-97	; fc <startup-0x1fffff04>
  f8:	6f6c5f72 	svcvs	0x006c5f72
  fc:	6e750077 	mrcvs	0, 3, r0, cr5, cr7, {3}
 100:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 104:	63206465 			; <UNDEFINED> instruction: 0x63206465
 108:	00726168 	rsbseq	r6, r2, r8, ror #2
 10c:	70617267 	rsbvc	r7, r1, r7, ror #4
 110:	5f636968 	svcpl	0x00636968
 114:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 118:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 11c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 120:	67007261 	strvs	r7, [r0, -r1, ror #4]
 124:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 128:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 12c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 130:	72646900 	rsbvc	r6, r4, #0, 18
 134:	776f6c5f 			; <UNDEFINED> instruction: 0x776f6c5f
 138:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 13c:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
 140:	332e3820 			; <UNDEFINED> instruction: 0x332e3820
 144:	2d20302e 	stccs	0, cr3, [r0, #-184]!	; 0xffffff48
 148:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 14c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 150:	6f6c666d 	svcvs	0x006c666d
 154:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 158:	733d6962 	teqvc	sp, #1605632	; 0x188000
 15c:	2074666f 	rsbscs	r6, r4, pc, ror #12
 160:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 164:	613d6863 	teqvs	sp, r3, ror #16
 168:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 16c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 170:	4f2d2067 	svcmi	0x002d2067
 174:	6f6c0030 	svcvs	0x006c0030
 178:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 17c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 180:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 184:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 188:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 18c:	6f687300 	svcvs	0x00687300
 190:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 194:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 198:	2064656e 	rsbcs	r6, r4, lr, ror #10
 19c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1a0:	4f495047 	svcmi	0x00495047
 1a4:	61726700 	cmnvs	r2, r0, lsl #14
 1a8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1ac:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1b0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b4:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 1b8:	425f0074 	subsmi	r0, pc, #116	; 0x74
 1bc:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
 1c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 10c <startup-0x1ffffef4>
 1c4:	6f6c2f65 	svcvs	0x006c2f65
 1c8:	442f6576 	strtmi	r6, [pc], #-1398	; 1d0 <startup-0x1ffffe30>
 1cc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1d0:	73746e65 	cmnvc	r4, #1616	; 0x650
 1d4:	6f6b732f 	svcvs	0x006b732f
 1d8:	452f616c 	strmi	r6, [pc, #-364]!	; 74 <startup-0x1fffff8c>
 1dc:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 1e0:	564c2f32 			; <UNDEFINED> instruction: 0x564c2f32
 1e4:	6f632f33 	svcvs	0x00632f33
 1e8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 1ec:	6c2f6574 	cfstr32vs	mvfx6, [pc], #-464	; 24 <startup-0x1fffffdc>
 1f0:	69646463 	stmdbvs	r4!, {r0, r1, r5, r6, sl, sp, lr}^
 1f4:	616c7073 	smcvs	50947	; 0xc703
 1f8:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 1fc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 200:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 204:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 3c <startup-0x1fffffc4>
 208:	0072656c 	rsbseq	r6, r2, ip, ror #10
 20c:	70617267 	rsbvc	r7, r1, r7, ror #4
 210:	5f636968 	svcpl	0x00636968
 214:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 218:	6165725f 	cmnvs	r5, pc, asr r2
 21c:	6d007964 	vstrvs.16	s14, [r0, #-200]	; 0xffffff38	; <UNPREDICTABLE>
 220:	006b7361 	rsbeq	r7, fp, r1, ror #6
 224:	5f72646f 	svcpl	0x0072646f
 228:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
 22c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 230:	544f006f 	strbpl	r0, [pc], #-111	; 238 <startup-0x1ffffdc8>
 234:	5345525f 	movtpl	r5, #21087	; 0x525f
 238:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 23c:	682f0044 	stmdavs	pc!, {r2, r6}	; <UNPREDICTABLE>
 240:	2f656d6f 	svccs	0x00656d6f
 244:	65766f6c 	ldrbvs	r6, [r6, #-3948]!	; 0xfffff094
 248:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 24c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 250:	732f7374 			; <UNDEFINED> instruction: 0x732f7374
 254:	616c6f6b 	cmnvs	ip, fp, ror #30
 258:	4144452f 	cmpmi	r4, pc, lsr #10
 25c:	2f323834 	svccs	0x00323834
 260:	2f33564c 	svccs	0x0033564c
 264:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 268:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 26c:	64636c2f 	strbtvs	r6, [r3], #-3119	; 0xfffff3d1
 270:	70736964 	rsbsvc	r6, r3, r4, ror #18
 274:	2f79616c 	svccs	0x0079616c
 278:	70617267 	rsbvc	r7, r1, r7, ror #4
 27c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 280:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 284:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
 288:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
 28c:	73006575 	movwvc	r6, #1397	; 0x575
 290:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
 294:	6f4d4964 	svcvs	0x004d4964
 298:	62006576 	andvs	r6, r0, #494927872	; 0x1d800000
 29c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 2a0:	61685374 	smcvs	34100	; 0x8534
 2a4:	76006570 			; <UNDEFINED> instruction: 0x76006570
 2a8:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 2ac:	00797469 	rsbseq	r7, r9, r9, ror #8
 2b0:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2b4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 2b8:	6c616200 	sfmvs	f6, 2, [r1], #-0
 2bc:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 2c0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 2c4:	50007972 	andpl	r7, r0, r2, ror r9
 2c8:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 2cc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 2d0:	0073746e 	rsbseq	r7, r3, lr, ror #8
 2d4:	666c6573 			; <UNDEFINED> instruction: 0x666c6573
 2d8:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 2dc:	656e0058 	strbvs	r0, [lr, #-88]!	; 0xffffffa8
 2e0:	6d005977 	vstrvs.16	s10, [r0, #-238]	; 0xffffff12	; <UNPREDICTABLE>
 2e4:	006e6961 	rsbeq	r6, lr, r1, ror #18
 2e8:	6a624f74 	bvs	18940c0 <startup-0x1e76bf40>
 2ec:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 2f0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 2f4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
 2f8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 2fc:	72640074 	rsbvc	r0, r4, #116	; 0x74
 300:	73007761 	movwvc	r7, #1889	; 0x761
 304:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 308:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 30c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 310:	6f5f7261 	svcvs	0x005f7261
 314:	63656a62 	cmnvs	r5, #401408	; 0x62000
 318:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 31c:	6100657a 	tstvs	r0, sl, ror r5
 320:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 324:	0074696e 	rsbseq	r6, r4, lr, ror #18
 328:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 32c:	2f005443 	svccs	0x00005443
 330:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 334:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 338:	6f442f65 	svcvs	0x00442f65
 33c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 340:	2f73746e 	svccs	0x0073746e
 344:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 348:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 34c:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 350:	33564c2f 	cmpcc	r6, #12032	; 0x2f00
 354:	646f632f 	strbtvs	r6, [pc], #-815	; 35c <startup-0x1ffffca4>
 358:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 35c:	636c2f65 	cmnvs	ip, #404	; 0x194
 360:	73696464 	cmnvc	r9, #100, 8	; 0x64000000
 364:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 368:	6174732f 	cmnvs	r4, pc, lsr #6
 36c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 370:	7300632e 	movwvc	r6, #814	; 0x32e
 374:	65706168 	ldrbvs	r6, [r0, #-360]!	; 0xfffffe98
 378:	41485300 	mrsmi	r5, (UNDEF: 120)
 37c:	73004550 	movwvc	r4, #1360	; 0x550
 380:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 384:	6d007075 	stcvs	0, cr7, [r0, #-468]	; 0xfffffe2c
 388:	5f65766f 	svcpl	0x0065766f
 38c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 390:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 394:	0065766f 	rsbeq	r7, r5, pc, ror #12
 398:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 39c:	6a626f5f 	bvs	189c120 <startup-0x1e763ee0>
 3a0:	00746365 	rsbseq	r6, r4, r5, ror #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	72412820 	subvc	r2, r1, #32, 16	; 0x200000
   8:	52206863 	eorpl	r6, r0, #6488064	; 0x630000
   c:	736f7065 	cmnvc	pc, #101	; 0x65
  10:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
  14:	38202979 	stmdacc	r0!, {r0, r3, r4, r5, r6, r8, fp, sp}
  18:	302e332e 	eorcc	r3, lr, lr, lsr #6
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000054 	andcs	r0, r0, r4, asr r0
  3c:	00000044 	andeq	r0, r0, r4, asr #32
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000098 	mulcs	r0, r8, r0
  5c:	0000005a 	andeq	r0, r0, sl, asr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000f2 	strdcs	r0, [r0], -r2
  7c:	0000006e 	andeq	r0, r0, lr, rrx
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000160 	andcs	r0, r0, r0, ror #2
  9c:	00000090 	muleq	r0, r0, r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  bc:	00000080 	andeq	r0, r0, r0, lsl #1
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000270 	andcs	r0, r0, r0, ror r2
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
  fc:	00000046 	andeq	r0, r0, r6, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200002f6 	strdcs	r0, [r0], -r6
 11c:	0000002a 	andeq	r0, r0, sl, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	00000024 	andeq	r0, r0, r4, lsr #32
 134:	00000000 	andeq	r0, r0, r0
 138:	20000320 	andcs	r0, r0, r0, lsr #6
 13c:	00000138 	andeq	r0, r0, r8, lsr r1
 140:	40140e41 	andsmi	r0, r4, r1, asr #28
 144:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 148:	03864004 	orreq	r4, r6, #4
 14c:	40028740 	andmi	r8, r2, r0, asr #14
 150:	0e41018e 	dvfeqd	f0, f1, #0.5
 154:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000458 	andcs	r0, r0, r8, asr r4
 164:	00000066 	andeq	r0, r0, r6, rrx
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	00000018 	andeq	r0, r0, r8, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	200004be 			; <UNDEFINED> instruction: 0x200004be
 184:	00000056 	andeq	r0, r0, r6, asr r0
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 194:	0000000c 	andeq	r0, r0, ip
 198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a4:	0000000c 	andeq	r0, r0, ip
 1a8:	00000194 	muleq	r0, r4, r1
 1ac:	20000000 	andcs	r0, r0, r0
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000024 	andeq	r0, r0, r4, lsr #32
 1b8:	00000194 	muleq	r0, r4, r1
 1bc:	20000514 	andcs	r0, r0, r4, lsl r5
 1c0:	00000096 	muleq	r0, r6, r0
 1c4:	40140e41 	andsmi	r0, r4, r1, asr #28
 1c8:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 1cc:	03864004 	orreq	r4, r6, #4
 1d0:	40028740 	andmi	r8, r2, r0, asr #14
 1d4:	0e41018e 	dvfeqd	f0, f1, #0.5
 1d8:	070d4130 	smladxeq	sp, r0, r1, r4
 1dc:	00000024 	andeq	r0, r0, r4, lsr #32
 1e0:	00000194 	muleq	r0, r4, r1
 1e4:	200005aa 	andcs	r0, r0, sl, lsr #11
 1e8:	00000096 	muleq	r0, r6, r0
 1ec:	40140e41 	andsmi	r0, r4, r1, asr #28
 1f0:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 1f4:	03864004 	orreq	r4, r6, #4
 1f8:	40028740 	andmi	r8, r2, r0, asr #14
 1fc:	0e41018e 	dvfeqd	f0, f1, #0.5
 200:	070d4130 	smladxeq	sp, r0, r1, r4
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	00000194 	muleq	r0, r4, r1
 20c:	20000640 	andcs	r0, r0, r0, asr #12
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	40080e41 	andmi	r0, r8, r1, asr #28
 218:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 21c:	100e4101 	andne	r4, lr, r1, lsl #2
 220:	00070d41 	andeq	r0, r7, r1, asr #26
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	00000194 	muleq	r0, r4, r1
 22c:	2000065c 	andcs	r0, r0, ip, asr r6
 230:	000000b4 	strheq	r0, [r0], -r4
 234:	40080e41 	andmi	r0, r8, r1, asr #28
 238:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 23c:	180e4101 	stmdane	lr, {r0, r8, lr}
 240:	00070d41 	andeq	r0, r7, r1, asr #26
 244:	00000018 	andeq	r0, r0, r8, lsl r0
 248:	00000194 	muleq	r0, r4, r1
 24c:	20000710 	andcs	r0, r0, r0, lsl r7
 250:	00000018 	andeq	r0, r0, r8, lsl r0
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 260:	00000018 	andeq	r0, r0, r8, lsl r0
 264:	00000194 	muleq	r0, r4, r1
 268:	20000728 	andcs	r0, r0, r8, lsr #14
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	070d4101 	streq	r4, [sp, -r1, lsl #2]

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000514 	andcs	r0, r0, r4, lsl r5
   4:	2000074c 	andcs	r0, r0, ip, asr #14
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
