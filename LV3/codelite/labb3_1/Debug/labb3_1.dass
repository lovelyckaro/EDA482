
./Debug/labb3_1.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:

int main(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
    GPIO_output(GPIO_E);
20000016:	4b28      	ldr	r3, [pc, #160]	; (200000b8 <main+0xa8>)
20000018:	0018      	movs	r0, r3
2000001a:	f000 fae9 	bl	200005f0 <GPIO_output>
    graphic_init();
2000001e:	f000 faa5 	bl	2000056c <graphic_init>
    for (uint8_t x = 0; x < 128; x++) {
20000022:	1dfb      	adds	r3, r7, #7
20000024:	2200      	movs	r2, #0
20000026:	701a      	strb	r2, [r3, #0]
20000028:	e016      	b.n	20000058 <main+0x48>
        pixel(x, 10, true);
2000002a:	1dfb      	adds	r3, r7, #7
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	2201      	movs	r2, #1
20000030:	210a      	movs	r1, #10
20000032:	0018      	movs	r0, r3
20000034:	f000 f9ca 	bl	200003cc <pixel>
        if (x < 64) {
20000038:	1dfb      	adds	r3, r7, #7
2000003a:	781b      	ldrb	r3, [r3, #0]
2000003c:	2b3f      	cmp	r3, #63	; 0x3f
2000003e:	d806      	bhi.n	2000004e <main+0x3e>
            pixel(10, x, true);
20000040:	1dfb      	adds	r3, r7, #7
20000042:	781b      	ldrb	r3, [r3, #0]
20000044:	2201      	movs	r2, #1
20000046:	0019      	movs	r1, r3
20000048:	200a      	movs	r0, #10
2000004a:	f000 f9bf 	bl	200003cc <pixel>
    for (uint8_t x = 0; x < 128; x++) {
2000004e:	1dfb      	adds	r3, r7, #7
20000050:	781a      	ldrb	r2, [r3, #0]
20000052:	1dfb      	adds	r3, r7, #7
20000054:	3201      	adds	r2, #1
20000056:	701a      	strb	r2, [r3, #0]
20000058:	1dfb      	adds	r3, r7, #7
2000005a:	781b      	ldrb	r3, [r3, #0]
2000005c:	b25b      	sxtb	r3, r3
2000005e:	2b00      	cmp	r3, #0
20000060:	dae3      	bge.n	2000002a <main+0x1a>
        }
    }
    delay_millis(1000);
20000062:	23fa      	movs	r3, #250	; 0xfa
20000064:	009b      	lsls	r3, r3, #2
20000066:	0018      	movs	r0, r3
20000068:	f000 fbda 	bl	20000820 <delay_millis>
    for (uint8_t x = 0; x < 128; x++) {
2000006c:	1dbb      	adds	r3, r7, #6
2000006e:	2200      	movs	r2, #0
20000070:	701a      	strb	r2, [r3, #0]
20000072:	e016      	b.n	200000a2 <main+0x92>
        pixel(x, 10, false);
20000074:	1dbb      	adds	r3, r7, #6
20000076:	781b      	ldrb	r3, [r3, #0]
20000078:	2200      	movs	r2, #0
2000007a:	210a      	movs	r1, #10
2000007c:	0018      	movs	r0, r3
2000007e:	f000 f9a5 	bl	200003cc <pixel>
        if (x < 64) {
20000082:	1dbb      	adds	r3, r7, #6
20000084:	781b      	ldrb	r3, [r3, #0]
20000086:	2b3f      	cmp	r3, #63	; 0x3f
20000088:	d806      	bhi.n	20000098 <main+0x88>
            pixel(10,x, false);
2000008a:	1dbb      	adds	r3, r7, #6
2000008c:	781b      	ldrb	r3, [r3, #0]
2000008e:	2200      	movs	r2, #0
20000090:	0019      	movs	r1, r3
20000092:	200a      	movs	r0, #10
20000094:	f000 f99a 	bl	200003cc <pixel>
    for (uint8_t x = 0; x < 128; x++) {
20000098:	1dbb      	adds	r3, r7, #6
2000009a:	781a      	ldrb	r2, [r3, #0]
2000009c:	1dbb      	adds	r3, r7, #6
2000009e:	3201      	adds	r2, #1
200000a0:	701a      	strb	r2, [r3, #0]
200000a2:	1dbb      	adds	r3, r7, #6
200000a4:	781b      	ldrb	r3, [r3, #0]
200000a6:	b25b      	sxtb	r3, r3
200000a8:	2b00      	cmp	r3, #0
200000aa:	dae3      	bge.n	20000074 <main+0x64>
200000ac:	2300      	movs	r3, #0
        }
    }
}
200000ae:	0018      	movs	r0, r3
200000b0:	46bd      	mov	sp, r7
200000b2:	b002      	add	sp, #8
200000b4:	bd80      	pop	{r7, pc}
200000b6:	46c0      	nop			; (mov r8, r8)
200000b8:	40021000 	andmi	r1, r2, r0

200000bc <graphic_ctrl_bit_set>:
#define LCD_SET_PAGE 0xB8
#define LCD_DISP_START 0xC0
#define LCD_BUSY 0x80

// choose graphic display, and set the bits from x
void graphic_ctrl_bit_set(uint8_t x) {
200000bc:	b580      	push	{r7, lr}
200000be:	b084      	sub	sp, #16
200000c0:	af00      	add	r7, sp, #0
200000c2:	0002      	movs	r2, r0
200000c4:	1dfb      	adds	r3, r7, #7
200000c6:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
200000c8:	4a0c      	ldr	r2, [pc, #48]	; (200000fc <graphic_ctrl_bit_set+0x40>)
200000ca:	210f      	movs	r1, #15
200000cc:	187b      	adds	r3, r7, r1
200000ce:	7d12      	ldrb	r2, [r2, #20]
200000d0:	701a      	strb	r2, [r3, #0]
    c |= (x & ~BITMASK_SELECT);
200000d2:	1dfb      	adds	r3, r7, #7
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b25b      	sxtb	r3, r3
200000d8:	2204      	movs	r2, #4
200000da:	4393      	bics	r3, r2
200000dc:	b25a      	sxtb	r2, r3
200000de:	187b      	adds	r3, r7, r1
200000e0:	781b      	ldrb	r3, [r3, #0]
200000e2:	b25b      	sxtb	r3, r3
200000e4:	4313      	orrs	r3, r2
200000e6:	b25a      	sxtb	r2, r3
200000e8:	187b      	adds	r3, r7, r1
200000ea:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
200000ec:	4a03      	ldr	r2, [pc, #12]	; (200000fc <graphic_ctrl_bit_set+0x40>)
200000ee:	187b      	adds	r3, r7, r1
200000f0:	781b      	ldrb	r3, [r3, #0]
200000f2:	7513      	strb	r3, [r2, #20]
}
200000f4:	46c0      	nop			; (mov r8, r8)
200000f6:	46bd      	mov	sp, r7
200000f8:	b004      	add	sp, #16
200000fa:	bd80      	pop	{r7, pc}
200000fc:	40021000 	andmi	r1, r2, r0

20000100 <graphic_ctrl_bit_clear>:
// Choose graphic display, and clear the bits from x
void graphic_ctrl_bit_clear(uint8_t x) {
20000100:	b580      	push	{r7, lr}
20000102:	b084      	sub	sp, #16
20000104:	af00      	add	r7, sp, #0
20000106:	0002      	movs	r2, r0
20000108:	1dfb      	adds	r3, r7, #7
2000010a:	701a      	strb	r2, [r3, #0]
    uint8_t c = GPIO_E->odr_low;
2000010c:	4a0c      	ldr	r2, [pc, #48]	; (20000140 <graphic_ctrl_bit_clear+0x40>)
2000010e:	210f      	movs	r1, #15
20000110:	187b      	adds	r3, r7, r1
20000112:	7d12      	ldrb	r2, [r2, #20]
20000114:	701a      	strb	r2, [r3, #0]
    c &= (~x & ~BITMASK_SELECT); 
20000116:	1dfb      	adds	r3, r7, #7
20000118:	781b      	ldrb	r3, [r3, #0]
2000011a:	43db      	mvns	r3, r3
2000011c:	b2db      	uxtb	r3, r3
2000011e:	187a      	adds	r2, r7, r1
20000120:	7812      	ldrb	r2, [r2, #0]
20000122:	4013      	ands	r3, r2
20000124:	b2da      	uxtb	r2, r3
20000126:	0008      	movs	r0, r1
20000128:	187b      	adds	r3, r7, r1
2000012a:	2104      	movs	r1, #4
2000012c:	438a      	bics	r2, r1
2000012e:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_low = c;
20000130:	4a03      	ldr	r2, [pc, #12]	; (20000140 <graphic_ctrl_bit_clear+0x40>)
20000132:	183b      	adds	r3, r7, r0
20000134:	781b      	ldrb	r3, [r3, #0]
20000136:	7513      	strb	r3, [r2, #20]
}
20000138:	46c0      	nop			; (mov r8, r8)
2000013a:	46bd      	mov	sp, r7
2000013c:	b004      	add	sp, #16
2000013e:	bd80      	pop	{r7, pc}
20000140:	40021000 	andmi	r1, r2, r0

20000144 <select_controller>:
// Select chip
void select_controller(uint8_t controller) {
20000144:	b580      	push	{r7, lr}
20000146:	b082      	sub	sp, #8
20000148:	af00      	add	r7, sp, #0
2000014a:	0002      	movs	r2, r0
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	701a      	strb	r2, [r3, #0]
    switch (controller) {
20000150:	1dfb      	adds	r3, r7, #7
20000152:	781b      	ldrb	r3, [r3, #0]
20000154:	2b18      	cmp	r3, #24
20000156:	d01a      	beq.n	2000018e <select_controller+0x4a>
20000158:	dc1d      	bgt.n	20000196 <select_controller+0x52>
2000015a:	2b10      	cmp	r3, #16
2000015c:	d010      	beq.n	20000180 <select_controller+0x3c>
2000015e:	dc1a      	bgt.n	20000196 <select_controller+0x52>
20000160:	2b00      	cmp	r3, #0
20000162:	d002      	beq.n	2000016a <select_controller+0x26>
20000164:	2b08      	cmp	r3, #8
20000166:	d004      	beq.n	20000172 <select_controller+0x2e>
            break;
        case BITMASK_CS1 | BITMASK_CS2:
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
            break;
    }
}
20000168:	e015      	b.n	20000196 <select_controller+0x52>
            graphic_ctrl_bit_clear (BITMASK_CS1 | BITMASK_CS2);
2000016a:	2018      	movs	r0, #24
2000016c:	f7ff ffc8 	bl	20000100 <graphic_ctrl_bit_clear>
            break;
20000170:	e011      	b.n	20000196 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1);
20000172:	2008      	movs	r0, #8
20000174:	f7ff ffa2 	bl	200000bc <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS2);
20000178:	2010      	movs	r0, #16
2000017a:	f7ff ffc1 	bl	20000100 <graphic_ctrl_bit_clear>
            break;
2000017e:	e00a      	b.n	20000196 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS2);
20000180:	2010      	movs	r0, #16
20000182:	f7ff ff9b 	bl	200000bc <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(BITMASK_CS1);
20000186:	2008      	movs	r0, #8
20000188:	f7ff ffba 	bl	20000100 <graphic_ctrl_bit_clear>
            break;
2000018c:	e003      	b.n	20000196 <select_controller+0x52>
            graphic_ctrl_bit_set(BITMASK_CS1 | BITMASK_CS2);
2000018e:	2018      	movs	r0, #24
20000190:	f7ff ff94 	bl	200000bc <graphic_ctrl_bit_set>
            break;
20000194:	46c0      	nop			; (mov r8, r8)
}
20000196:	46c0      	nop			; (mov r8, r8)
20000198:	46bd      	mov	sp, r7
2000019a:	b002      	add	sp, #8
2000019c:	bd80      	pop	{r7, pc}

2000019e <graphic_wait_ready>:

void graphic_wait_ready() {
2000019e:	b580      	push	{r7, lr}
200001a0:	b082      	sub	sp, #8
200001a2:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_clear(BITMASK_E);
200001a4:	2040      	movs	r0, #64	; 0x40
200001a6:	f7ff ffab 	bl	20000100 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
200001aa:	4b15      	ldr	r3, [pc, #84]	; (20000200 <graphic_wait_ready+0x62>)
200001ac:	4a15      	ldr	r2, [pc, #84]	; (20000204 <graphic_wait_ready+0x66>)
200001ae:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RW);
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff83 	bl	200000bc <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(BITMASK_RS);
200001b6:	2001      	movs	r0, #1
200001b8:	f7ff ffa2 	bl	20000100 <graphic_ctrl_bit_clear>
    delay_500ns();
200001bc:	f000 fb00 	bl	200007c0 <delay_500ns>
    
    uint8_t c;
    do {
        graphic_ctrl_bit_set(BITMASK_E);
200001c0:	2040      	movs	r0, #64	; 0x40
200001c2:	f7ff ff7b 	bl	200000bc <graphic_ctrl_bit_set>
        delay_500ns();
200001c6:	f000 fafb 	bl	200007c0 <delay_500ns>
        c = GPIO_E->idr_high & LCD_BUSY;
200001ca:	4b0d      	ldr	r3, [pc, #52]	; (20000200 <graphic_wait_ready+0x62>)
200001cc:	7c5b      	ldrb	r3, [r3, #17]
200001ce:	b2da      	uxtb	r2, r3
200001d0:	1dfb      	adds	r3, r7, #7
200001d2:	217f      	movs	r1, #127	; 0x7f
200001d4:	438a      	bics	r2, r1
200001d6:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(BITMASK_E);
200001d8:	2040      	movs	r0, #64	; 0x40
200001da:	f7ff ff91 	bl	20000100 <graphic_ctrl_bit_clear>
        delay_500ns();
200001de:	f000 faef 	bl	200007c0 <delay_500ns>
    }while(c);
200001e2:	1dfb      	adds	r3, r7, #7
200001e4:	781b      	ldrb	r3, [r3, #0]
200001e6:	2b00      	cmp	r3, #0
200001e8:	d1ea      	bne.n	200001c0 <graphic_wait_ready+0x22>
    
    graphic_ctrl_bit_set(BITMASK_E);
200001ea:	2040      	movs	r0, #64	; 0x40
200001ec:	f7ff ff66 	bl	200000bc <graphic_ctrl_bit_set>
    GPIO_E->moder = 0x55555555;
200001f0:	4b03      	ldr	r3, [pc, #12]	; (20000200 <graphic_wait_ready+0x62>)
200001f2:	4a05      	ldr	r2, [pc, #20]	; (20000208 <graphic_wait_ready+0x6a>)
200001f4:	601a      	str	r2, [r3, #0]
}
200001f6:	46c0      	nop			; (mov r8, r8)
200001f8:	46bd      	mov	sp, r7
200001fa:	b002      	add	sp, #8
200001fc:	bd80      	pop	{r7, pc}
200001fe:	46c0      	nop			; (mov r8, r8)
20000200:	40021000 	andmi	r1, r2, r0
20000204:	00005555 	andeq	r5, r0, r5, asr r5
20000208:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000020c <graphic_read>:

uint8_t graphic_read(uint8_t controller) {
2000020c:	b580      	push	{r7, lr}
2000020e:	b084      	sub	sp, #16
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
20000218:	2040      	movs	r0, #64	; 0x40
2000021a:	f7ff ff71 	bl	20000100 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555;
2000021e:	4b1c      	ldr	r3, [pc, #112]	; (20000290 <graphic_read+0x84>)
20000220:	4a1c      	ldr	r2, [pc, #112]	; (20000294 <graphic_read+0x88>)
20000222:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(BITMASK_RS | BITMASK_RW);
20000224:	2003      	movs	r0, #3
20000226:	f7ff ff49 	bl	200000bc <graphic_ctrl_bit_set>
    select_controller(controller);
2000022a:	1dfb      	adds	r3, r7, #7
2000022c:	781b      	ldrb	r3, [r3, #0]
2000022e:	0018      	movs	r0, r3
20000230:	f7ff ff88 	bl	20000144 <select_controller>
    delay_500ns();
20000234:	f000 fac4 	bl	200007c0 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
20000238:	2040      	movs	r0, #64	; 0x40
2000023a:	f7ff ff3f 	bl	200000bc <graphic_ctrl_bit_set>
    delay_500ns();
2000023e:	f000 fabf 	bl	200007c0 <delay_500ns>
    uint8_t returnvalue = GPIO_E->idr_high;
20000242:	4a13      	ldr	r2, [pc, #76]	; (20000290 <graphic_read+0x84>)
20000244:	230f      	movs	r3, #15
20000246:	18fb      	adds	r3, r7, r3
20000248:	7c52      	ldrb	r2, [r2, #17]
2000024a:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
2000024c:	2040      	movs	r0, #64	; 0x40
2000024e:	f7ff ff57 	bl	20000100 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555;
20000252:	4b0f      	ldr	r3, [pc, #60]	; (20000290 <graphic_read+0x84>)
20000254:	4a10      	ldr	r2, [pc, #64]	; (20000298 <graphic_read+0x8c>)
20000256:	601a      	str	r2, [r3, #0]
    if(controller & BITMASK_CS1) {
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	781b      	ldrb	r3, [r3, #0]
2000025c:	2208      	movs	r2, #8
2000025e:	4013      	ands	r3, r2
20000260:	d004      	beq.n	2000026c <graphic_read+0x60>
        select_controller(BITMASK_CS1);
20000262:	2008      	movs	r0, #8
20000264:	f7ff ff6e 	bl	20000144 <select_controller>
        graphic_wait_ready();
20000268:	f7ff ff99 	bl	2000019e <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	2210      	movs	r2, #16
20000272:	4013      	ands	r3, r2
20000274:	d004      	beq.n	20000280 <graphic_read+0x74>
        select_controller(BITMASK_CS1);
20000276:	2008      	movs	r0, #8
20000278:	f7ff ff64 	bl	20000144 <select_controller>
        graphic_wait_ready();
2000027c:	f7ff ff8f 	bl	2000019e <graphic_wait_ready>
    }
    return returnvalue;
20000280:	230f      	movs	r3, #15
20000282:	18fb      	adds	r3, r7, r3
20000284:	781b      	ldrb	r3, [r3, #0]
}
20000286:	0018      	movs	r0, r3
20000288:	46bd      	mov	sp, r7
2000028a:	b004      	add	sp, #16
2000028c:	bd80      	pop	{r7, pc}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	40021000 	andmi	r1, r2, r0
20000294:	00005555 	andeq	r5, r0, r5, asr r5
20000298:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000029c <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000029c:	b580      	push	{r7, lr}
2000029e:	b082      	sub	sp, #8
200002a0:	af00      	add	r7, sp, #0
200002a2:	0002      	movs	r2, r0
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	701a      	strb	r2, [r3, #0]
200002a8:	1dbb      	adds	r3, r7, #6
200002aa:	1c0a      	adds	r2, r1, #0
200002ac:	701a      	strb	r2, [r3, #0]
    GPIO_E->odr_high = value;
200002ae:	4a1a      	ldr	r2, [pc, #104]	; (20000318 <graphic_write+0x7c>)
200002b0:	1dfb      	adds	r3, r7, #7
200002b2:	781b      	ldrb	r3, [r3, #0]
200002b4:	7553      	strb	r3, [r2, #21]
    select_controller(controller);
200002b6:	1dbb      	adds	r3, r7, #6
200002b8:	781b      	ldrb	r3, [r3, #0]
200002ba:	0018      	movs	r0, r3
200002bc:	f7ff ff42 	bl	20000144 <select_controller>
    delay_500ns();
200002c0:	f000 fa7e 	bl	200007c0 <delay_500ns>
    graphic_ctrl_bit_set(BITMASK_E);
200002c4:	2040      	movs	r0, #64	; 0x40
200002c6:	f7ff fef9 	bl	200000bc <graphic_ctrl_bit_set>
    delay_500ns();
200002ca:	f000 fa79 	bl	200007c0 <delay_500ns>
    graphic_ctrl_bit_clear(BITMASK_E);
200002ce:	2040      	movs	r0, #64	; 0x40
200002d0:	f7ff ff16 	bl	20000100 <graphic_ctrl_bit_clear>
    if(controller & BITMASK_CS1) {
200002d4:	1dbb      	adds	r3, r7, #6
200002d6:	781b      	ldrb	r3, [r3, #0]
200002d8:	2208      	movs	r2, #8
200002da:	4013      	ands	r3, r2
200002dc:	d004      	beq.n	200002e8 <graphic_write+0x4c>
        select_controller(BITMASK_CS1);
200002de:	2008      	movs	r0, #8
200002e0:	f7ff ff30 	bl	20000144 <select_controller>
        graphic_wait_ready();
200002e4:	f7ff ff5b 	bl	2000019e <graphic_wait_ready>
    }
    if(controller & BITMASK_CS2) {
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	2210      	movs	r2, #16
200002ee:	4013      	ands	r3, r2
200002f0:	d004      	beq.n	200002fc <graphic_write+0x60>
        select_controller(BITMASK_CS2);
200002f2:	2010      	movs	r0, #16
200002f4:	f7ff ff26 	bl	20000144 <select_controller>
        graphic_wait_ready();
200002f8:	f7ff ff51 	bl	2000019e <graphic_wait_ready>
    }
    GPIO_E->odr_high = 0;
200002fc:	4b06      	ldr	r3, [pc, #24]	; (20000318 <graphic_write+0x7c>)
200002fe:	2200      	movs	r2, #0
20000300:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(BITMASK_E);
20000302:	2040      	movs	r0, #64	; 0x40
20000304:	f7ff feda 	bl	200000bc <graphic_ctrl_bit_set>
    select_controller(0);
20000308:	2000      	movs	r0, #0
2000030a:	f7ff ff1b 	bl	20000144 <select_controller>
}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	46bd      	mov	sp, r7
20000312:	b002      	add	sp, #8
20000314:	bd80      	pop	{r7, pc}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	40021000 	andmi	r1, r2, r0

2000031c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller) {
2000031c:	b580      	push	{r7, lr}
2000031e:	b082      	sub	sp, #8
20000320:	af00      	add	r7, sp, #0
20000322:	0002      	movs	r2, r0
20000324:	1dfb      	adds	r3, r7, #7
20000326:	701a      	strb	r2, [r3, #0]
20000328:	1dbb      	adds	r3, r7, #6
2000032a:	1c0a      	adds	r2, r1, #0
2000032c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
2000032e:	2040      	movs	r0, #64	; 0x40
20000330:	f7ff fee6 	bl	20000100 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000334:	1dbb      	adds	r3, r7, #6
20000336:	781b      	ldrb	r3, [r3, #0]
20000338:	0018      	movs	r0, r3
2000033a:	f7ff ff03 	bl	20000144 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RS | BITMASK_RW);
2000033e:	2003      	movs	r0, #3
20000340:	f7ff fede 	bl	20000100 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000344:	1dbb      	adds	r3, r7, #6
20000346:	781a      	ldrb	r2, [r3, #0]
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	0011      	movs	r1, r2
2000034e:	0018      	movs	r0, r3
20000350:	f7ff ffa4 	bl	2000029c <graphic_write>
}
20000354:	46c0      	nop			; (mov r8, r8)
20000356:	46bd      	mov	sp, r7
20000358:	b002      	add	sp, #8
2000035a:	bd80      	pop	{r7, pc}

2000035c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller) {
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(BITMASK_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fec6 	bl	20000100 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff fee3 	bl	20000144 <select_controller>
    graphic_ctrl_bit_clear(BITMASK_RW);
2000037e:	2002      	movs	r0, #2
20000380:	f7ff febe 	bl	20000100 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(BITMASK_RS);
20000384:	2001      	movs	r0, #1
20000386:	f7ff fe99 	bl	200000bc <graphic_ctrl_bit_set>
    graphic_write(data, controller);
2000038a:	1dbb      	adds	r3, r7, #6
2000038c:	781a      	ldrb	r2, [r3, #0]
2000038e:	1dfb      	adds	r3, r7, #7
20000390:	781b      	ldrb	r3, [r3, #0]
20000392:	0011      	movs	r1, r2
20000394:	0018      	movs	r0, r3
20000396:	f7ff ff81 	bl	2000029c <graphic_write>
}
2000039a:	46c0      	nop			; (mov r8, r8)
2000039c:	46bd      	mov	sp, r7
2000039e:	b002      	add	sp, #8
200003a0:	bd80      	pop	{r7, pc}

200003a2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller) {
200003a2:	b580      	push	{r7, lr}
200003a4:	b082      	sub	sp, #8
200003a6:	af00      	add	r7, sp, #0
200003a8:	0002      	movs	r2, r0
200003aa:	1dfb      	adds	r3, r7, #7
200003ac:	701a      	strb	r2, [r3, #0]
    (void) graphic_read(controller);
200003ae:	1dfb      	adds	r3, r7, #7
200003b0:	781b      	ldrb	r3, [r3, #0]
200003b2:	0018      	movs	r0, r3
200003b4:	f7ff ff2a 	bl	2000020c <graphic_read>
    return graphic_read(controller);
200003b8:	1dfb      	adds	r3, r7, #7
200003ba:	781b      	ldrb	r3, [r3, #0]
200003bc:	0018      	movs	r0, r3
200003be:	f7ff ff25 	bl	2000020c <graphic_read>
200003c2:	0003      	movs	r3, r0
}
200003c4:	0018      	movs	r0, r3
200003c6:	46bd      	mov	sp, r7
200003c8:	b002      	add	sp, #8
200003ca:	bd80      	pop	{r7, pc}

200003cc <pixel>:

void pixel(uint8_t x, uint8_t y, bool set) {
200003cc:	b5f0      	push	{r4, r5, r6, r7, lr}
200003ce:	b085      	sub	sp, #20
200003d0:	af00      	add	r7, sp, #0
200003d2:	0004      	movs	r4, r0
200003d4:	0008      	movs	r0, r1
200003d6:	0011      	movs	r1, r2
200003d8:	1dfb      	adds	r3, r7, #7
200003da:	1c22      	adds	r2, r4, #0
200003dc:	701a      	strb	r2, [r3, #0]
200003de:	1dbb      	adds	r3, r7, #6
200003e0:	1c02      	adds	r2, r0, #0
200003e2:	701a      	strb	r2, [r3, #0]
200003e4:	1d7b      	adds	r3, r7, #5
200003e6:	1c0a      	adds	r2, r1, #0
200003e8:	701a      	strb	r2, [r3, #0]
    // Create bitmask for the pixel
    uint8_t index, mask, controller;
    index = (y-1) / 8;
200003ea:	1dbb      	adds	r3, r7, #6
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	3b01      	subs	r3, #1
200003f0:	2b00      	cmp	r3, #0
200003f2:	da00      	bge.n	200003f6 <pixel+0x2a>
200003f4:	3307      	adds	r3, #7
200003f6:	10db      	asrs	r3, r3, #3
200003f8:	001a      	movs	r2, r3
200003fa:	230d      	movs	r3, #13
200003fc:	18fb      	adds	r3, r7, r3
200003fe:	701a      	strb	r2, [r3, #0]
    mask = 0x1 << ((y-1) % 8);
20000400:	1dbb      	adds	r3, r7, #6
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	3b01      	subs	r3, #1
20000406:	4a3e      	ldr	r2, [pc, #248]	; (20000500 <pixel+0x134>)
20000408:	4013      	ands	r3, r2
2000040a:	d504      	bpl.n	20000416 <pixel+0x4a>
2000040c:	3b01      	subs	r3, #1
2000040e:	2208      	movs	r2, #8
20000410:	4252      	negs	r2, r2
20000412:	4313      	orrs	r3, r2
20000414:	3301      	adds	r3, #1
20000416:	001a      	movs	r2, r3
20000418:	2301      	movs	r3, #1
2000041a:	4093      	lsls	r3, r2
2000041c:	001a      	movs	r2, r3
2000041e:	230f      	movs	r3, #15
20000420:	18fb      	adds	r3, r7, r3
20000422:	701a      	strb	r2, [r3, #0]
    if (x > 64) {
20000424:	1dfb      	adds	r3, r7, #7
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	2b40      	cmp	r3, #64	; 0x40
2000042a:	d909      	bls.n	20000440 <pixel+0x74>
        controller = BITMASK_CS2;
2000042c:	230e      	movs	r3, #14
2000042e:	18fb      	adds	r3, r7, r3
20000430:	2210      	movs	r2, #16
20000432:	701a      	strb	r2, [r3, #0]
        x -= 65;
20000434:	1dfb      	adds	r3, r7, #7
20000436:	1dfa      	adds	r2, r7, #7
20000438:	7812      	ldrb	r2, [r2, #0]
2000043a:	3a41      	subs	r2, #65	; 0x41
2000043c:	701a      	strb	r2, [r3, #0]
2000043e:	e008      	b.n	20000452 <pixel+0x86>
    }else {
        controller = BITMASK_CS1;
20000440:	230e      	movs	r3, #14
20000442:	18fb      	adds	r3, r7, r3
20000444:	2208      	movs	r2, #8
20000446:	701a      	strb	r2, [r3, #0]
        x--;
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	781a      	ldrb	r2, [r3, #0]
2000044c:	1dfb      	adds	r3, r7, #7
2000044e:	3a01      	subs	r2, #1
20000450:	701a      	strb	r2, [r3, #0]
    }
    
    graphic_write_command(LCD_SET_ADD | x, controller);
20000452:	1dfb      	adds	r3, r7, #7
20000454:	781b      	ldrb	r3, [r3, #0]
20000456:	2240      	movs	r2, #64	; 0x40
20000458:	4313      	orrs	r3, r2
2000045a:	b2da      	uxtb	r2, r3
2000045c:	250e      	movs	r5, #14
2000045e:	197b      	adds	r3, r7, r5
20000460:	781b      	ldrb	r3, [r3, #0]
20000462:	0019      	movs	r1, r3
20000464:	0010      	movs	r0, r2
20000466:	f7ff ff59 	bl	2000031c <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
2000046a:	230d      	movs	r3, #13
2000046c:	18fb      	adds	r3, r7, r3
2000046e:	781b      	ldrb	r3, [r3, #0]
20000470:	2248      	movs	r2, #72	; 0x48
20000472:	4252      	negs	r2, r2
20000474:	4313      	orrs	r3, r2
20000476:	b2da      	uxtb	r2, r3
20000478:	197b      	adds	r3, r7, r5
2000047a:	781b      	ldrb	r3, [r3, #0]
2000047c:	0019      	movs	r1, r3
2000047e:	0010      	movs	r0, r2
20000480:	f7ff ff4c 	bl	2000031c <graphic_write_command>
    uint8_t temp = graphic_read_data(controller);
20000484:	260c      	movs	r6, #12
20000486:	19bc      	adds	r4, r7, r6
20000488:	197b      	adds	r3, r7, r5
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	0018      	movs	r0, r3
2000048e:	f7ff ff88 	bl	200003a2 <graphic_read_data>
20000492:	0003      	movs	r3, r0
20000494:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
20000496:	1dfb      	adds	r3, r7, #7
20000498:	781b      	ldrb	r3, [r3, #0]
2000049a:	2240      	movs	r2, #64	; 0x40
2000049c:	4313      	orrs	r3, r2
2000049e:	b2da      	uxtb	r2, r3
200004a0:	197b      	adds	r3, r7, r5
200004a2:	781b      	ldrb	r3, [r3, #0]
200004a4:	0019      	movs	r1, r3
200004a6:	0010      	movs	r0, r2
200004a8:	f7ff ff38 	bl	2000031c <graphic_write_command>
    if (set) {
200004ac:	1d7b      	adds	r3, r7, #5
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	2b00      	cmp	r3, #0
200004b2:	d008      	beq.n	200004c6 <pixel+0xfa>
        mask |= temp;
200004b4:	220f      	movs	r2, #15
200004b6:	18bb      	adds	r3, r7, r2
200004b8:	18b9      	adds	r1, r7, r2
200004ba:	19ba      	adds	r2, r7, r6
200004bc:	7809      	ldrb	r1, [r1, #0]
200004be:	7812      	ldrb	r2, [r2, #0]
200004c0:	430a      	orrs	r2, r1
200004c2:	701a      	strb	r2, [r3, #0]
200004c4:	e00d      	b.n	200004e2 <pixel+0x116>
    }else {
        mask = ~mask & temp;
200004c6:	210f      	movs	r1, #15
200004c8:	187b      	adds	r3, r7, r1
200004ca:	781b      	ldrb	r3, [r3, #0]
200004cc:	b25b      	sxtb	r3, r3
200004ce:	43db      	mvns	r3, r3
200004d0:	b25b      	sxtb	r3, r3
200004d2:	220c      	movs	r2, #12
200004d4:	18ba      	adds	r2, r7, r2
200004d6:	7812      	ldrb	r2, [r2, #0]
200004d8:	b252      	sxtb	r2, r2
200004da:	4013      	ands	r3, r2
200004dc:	b25a      	sxtb	r2, r3
200004de:	187b      	adds	r3, r7, r1
200004e0:	701a      	strb	r2, [r3, #0]
    }
    graphic_write_data(mask, controller);
200004e2:	230e      	movs	r3, #14
200004e4:	18fb      	adds	r3, r7, r3
200004e6:	781a      	ldrb	r2, [r3, #0]
200004e8:	230f      	movs	r3, #15
200004ea:	18fb      	adds	r3, r7, r3
200004ec:	781b      	ldrb	r3, [r3, #0]
200004ee:	0011      	movs	r1, r2
200004f0:	0018      	movs	r0, r3
200004f2:	f7ff ff33 	bl	2000035c <graphic_write_data>
}
200004f6:	46c0      	nop			; (mov r8, r8)
200004f8:	46bd      	mov	sp, r7
200004fa:	b005      	add	sp, #20
200004fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
200004fe:	46c0      	nop			; (mov r8, r8)
20000500:	80000007 	andhi	r0, r0, r7

20000504 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000504:	b580      	push	{r7, lr}
20000506:	b082      	sub	sp, #8
20000508:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++ ) {
2000050a:	1dfb      	adds	r3, r7, #7
2000050c:	2200      	movs	r2, #0
2000050e:	701a      	strb	r2, [r3, #0]
20000510:	e023      	b.n	2000055a <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | page, BITMASK_CS1 | BITMASK_CS2);
20000512:	1dfb      	adds	r3, r7, #7
20000514:	781b      	ldrb	r3, [r3, #0]
20000516:	2248      	movs	r2, #72	; 0x48
20000518:	4252      	negs	r2, r2
2000051a:	4313      	orrs	r3, r2
2000051c:	b2db      	uxtb	r3, r3
2000051e:	2118      	movs	r1, #24
20000520:	0018      	movs	r0, r3
20000522:	f7ff fefb 	bl	2000031c <graphic_write_command>
        graphic_write_command(LCD_SET_ADD  | 0, BITMASK_CS1 | BITMASK_CS2);
20000526:	2118      	movs	r1, #24
20000528:	2040      	movs	r0, #64	; 0x40
2000052a:	f7ff fef7 	bl	2000031c <graphic_write_command>
        for (uint8_t add = 0; add < 64; add++) {
2000052e:	1dbb      	adds	r3, r7, #6
20000530:	2200      	movs	r2, #0
20000532:	701a      	strb	r2, [r3, #0]
20000534:	e008      	b.n	20000548 <graphic_clear_screen+0x44>
            graphic_write_data(0, BITMASK_CS1 | BITMASK_CS2);
20000536:	2118      	movs	r1, #24
20000538:	2000      	movs	r0, #0
2000053a:	f7ff ff0f 	bl	2000035c <graphic_write_data>
        for (uint8_t add = 0; add < 64; add++) {
2000053e:	1dbb      	adds	r3, r7, #6
20000540:	781a      	ldrb	r2, [r3, #0]
20000542:	1dbb      	adds	r3, r7, #6
20000544:	3201      	adds	r2, #1
20000546:	701a      	strb	r2, [r3, #0]
20000548:	1dbb      	adds	r3, r7, #6
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	2b3f      	cmp	r3, #63	; 0x3f
2000054e:	d9f2      	bls.n	20000536 <graphic_clear_screen+0x32>
    for (uint8_t page = 0; page < 8; page++ ) {
20000550:	1dfb      	adds	r3, r7, #7
20000552:	781a      	ldrb	r2, [r3, #0]
20000554:	1dfb      	adds	r3, r7, #7
20000556:	3201      	adds	r2, #1
20000558:	701a      	strb	r2, [r3, #0]
2000055a:	1dfb      	adds	r3, r7, #7
2000055c:	781b      	ldrb	r3, [r3, #0]
2000055e:	2b07      	cmp	r3, #7
20000560:	d9d7      	bls.n	20000512 <graphic_clear_screen+0xe>
        }
    }
}
20000562:	46c0      	nop			; (mov r8, r8)
20000564:	46c0      	nop			; (mov r8, r8)
20000566:	46bd      	mov	sp, r7
20000568:	b002      	add	sp, #8
2000056a:	bd80      	pop	{r7, pc}

2000056c <graphic_init>:


void graphic_init(void) {
2000056c:	b580      	push	{r7, lr}
2000056e:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(BITMASK_E);
20000570:	2040      	movs	r0, #64	; 0x40
20000572:	f7ff fda3 	bl	200000bc <graphic_ctrl_bit_set>
    delay_micros(10);
20000576:	200a      	movs	r0, #10
20000578:	f000 f934 	bl	200007e4 <delay_micros>
    graphic_ctrl_bit_clear(BITMASK_CS1 | BITMASK_CS2 | BITMASK_RESET | BITMASK_E);
2000057c:	2078      	movs	r0, #120	; 0x78
2000057e:	f7ff fdbf 	bl	20000100 <graphic_ctrl_bit_clear>
    delay_millis(30);
20000582:	201e      	movs	r0, #30
20000584:	f000 f94c 	bl	20000820 <delay_millis>
    graphic_ctrl_bit_set(BITMASK_RESET);
20000588:	2020      	movs	r0, #32
2000058a:	f7ff fd97 	bl	200000bc <graphic_ctrl_bit_set>
    
    // Toggle display
    graphic_write_command(LCD_OFF, BITMASK_CS1 | BITMASK_CS2);
2000058e:	2118      	movs	r1, #24
20000590:	203e      	movs	r0, #62	; 0x3e
20000592:	f7ff fec3 	bl	2000031c <graphic_write_command>
    graphic_write_command(LCD_ON, BITMASK_CS1 | BITMASK_CS2);
20000596:	2118      	movs	r1, #24
20000598:	203f      	movs	r0, #63	; 0x3f
2000059a:	f7ff febf 	bl	2000031c <graphic_write_command>
    //Start = 0
    graphic_write_command(LCD_DISP_START, BITMASK_CS1 | BITMASK_CS2);
2000059e:	2118      	movs	r1, #24
200005a0:	20c0      	movs	r0, #192	; 0xc0
200005a2:	f7ff febb 	bl	2000031c <graphic_write_command>
    // Add = 0
    graphic_write_command(LCD_SET_ADD, BITMASK_CS1 | BITMASK_CS2);
200005a6:	2118      	movs	r1, #24
200005a8:	2040      	movs	r0, #64	; 0x40
200005aa:	f7ff feb7 	bl	2000031c <graphic_write_command>
    // Page = 0
    graphic_write_command(LCD_SET_PAGE, BITMASK_CS1 | BITMASK_CS2);
200005ae:	2118      	movs	r1, #24
200005b0:	20b8      	movs	r0, #184	; 0xb8
200005b2:	f7ff feb3 	bl	2000031c <graphic_write_command>
    // Deactivate both CS signals
    select_controller(0);
200005b6:	2000      	movs	r0, #0
200005b8:	f7ff fdc4 	bl	20000144 <select_controller>
200005bc:	46c0      	nop			; (mov r8, r8)
200005be:	46bd      	mov	sp, r7
200005c0:	bd80      	pop	{r7, pc}
200005c2:	46c0      	nop			; (mov r8, r8)

200005c4 <init_GPIO>:
200005c4:	6001      	str	r1, [r0, #0]
200005c6:	4770      	bx	lr

200005c8 <GPIO_split_mode>:
200005c8:	424b      	negs	r3, r1
200005ca:	4159      	adcs	r1, r3
200005cc:	4b05      	ldr	r3, [pc, #20]	; (200005e4 <GPIO_split_mode+0x1c>)
200005ce:	4249      	negs	r1, r1
200005d0:	4019      	ands	r1, r3
200005d2:	4b05      	ldr	r3, [pc, #20]	; (200005e8 <GPIO_split_mode+0x20>)
200005d4:	469c      	mov	ip, r3
200005d6:	4461      	add	r1, ip
200005d8:	2a00      	cmp	r2, #0
200005da:	d001      	beq.n	200005e0 <GPIO_split_mode+0x18>
200005dc:	4b03      	ldr	r3, [pc, #12]	; (200005ec <GPIO_split_mode+0x24>)
200005de:	4319      	orrs	r1, r3
200005e0:	6001      	str	r1, [r0, #0]
200005e2:	4770      	bx	lr
200005e4:	aaab0000 	bge	1eac05ec <startup-0x153fa14>
200005e8:	55550000 	ldrbpl	r0, [r5, #-0]
200005ec:	00005555 	andeq	r5, r0, r5, asr r5

200005f0 <GPIO_output>:
200005f0:	4b01      	ldr	r3, [pc, #4]	; (200005f8 <GPIO_output+0x8>)
200005f2:	6003      	str	r3, [r0, #0]
200005f4:	4770      	bx	lr
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200005fc <GPIO_input>:
200005fc:	2300      	movs	r3, #0
200005fe:	6003      	str	r3, [r0, #0]
20000600:	4770      	bx	lr
20000602:	46c0      	nop			; (mov r8, r8)

20000604 <GPIO_clock_start>:
20000604:	2218      	movs	r2, #24
20000606:	4b01      	ldr	r3, [pc, #4]	; (2000060c <GPIO_clock_start+0x8>)
20000608:	601a      	str	r2, [r3, #0]
2000060a:	4770      	bx	lr
2000060c:	40023830 	andmi	r3, r2, r0, lsr r8

20000610 <GPIO_init_keypad>:
20000610:	b570      	push	{r4, r5, r6, lr}
20000612:	2900      	cmp	r1, #0
20000614:	d113      	bne.n	2000063e <GPIO_init_keypad+0x2e>
20000616:	23ff      	movs	r3, #255	; 0xff
20000618:	26aa      	movs	r6, #170	; 0xaa
2000061a:	25aa      	movs	r5, #170	; 0xaa
2000061c:	4c0c      	ldr	r4, [pc, #48]	; (20000650 <GPIO_init_keypad+0x40>)
2000061e:	310f      	adds	r1, #15
20000620:	021b      	lsls	r3, r3, #8
20000622:	01f6      	lsls	r6, r6, #7
20000624:	6802      	ldr	r2, [r0, #0]
20000626:	4022      	ands	r2, r4
20000628:	4332      	orrs	r2, r6
2000062a:	6002      	str	r2, [r0, #0]
2000062c:	8882      	ldrh	r2, [r0, #4]
2000062e:	401a      	ands	r2, r3
20000630:	430a      	orrs	r2, r1
20000632:	8082      	strh	r2, [r0, #4]
20000634:	68c3      	ldr	r3, [r0, #12]
20000636:	4023      	ands	r3, r4
20000638:	432b      	orrs	r3, r5
2000063a:	60c3      	str	r3, [r0, #12]
2000063c:	bd70      	pop	{r4, r5, r6, pc}
2000063e:	21f0      	movs	r1, #240	; 0xf0
20000640:	25aa      	movs	r5, #170	; 0xaa
20000642:	26aa      	movs	r6, #170	; 0xaa
20000644:	0109      	lsls	r1, r1, #4
20000646:	23ff      	movs	r3, #255	; 0xff
20000648:	042d      	lsls	r5, r5, #16
2000064a:	05f6      	lsls	r6, r6, #23
2000064c:	4c01      	ldr	r4, [pc, #4]	; (20000654 <GPIO_init_keypad+0x44>)
2000064e:	e7e9      	b.n	20000624 <GPIO_init_keypad+0x14>
20000650:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20000654:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000658 <activate_row>:
20000658:	2308      	movs	r3, #8
2000065a:	4093      	lsls	r3, r2
2000065c:	b2db      	uxtb	r3, r3
2000065e:	2900      	cmp	r1, #0
20000660:	d001      	beq.n	20000666 <activate_row+0xe>
20000662:	7543      	strb	r3, [r0, #21]
20000664:	4770      	bx	lr
20000666:	7503      	strb	r3, [r0, #20]
20000668:	e7fc      	b.n	20000664 <activate_row+0xc>
2000066a:	46c0      	nop			; (mov r8, r8)

2000066c <read_column>:
2000066c:	2900      	cmp	r1, #0
2000066e:	d00a      	beq.n	20000686 <read_column+0x1a>
20000670:	230f      	movs	r3, #15
20000672:	7c42      	ldrb	r2, [r0, #17]
20000674:	4013      	ands	r3, r2
20000676:	2000      	movs	r0, #0
20000678:	2b00      	cmp	r3, #0
2000067a:	d003      	beq.n	20000684 <read_column+0x18>
2000067c:	3001      	adds	r0, #1
2000067e:	b240      	sxtb	r0, r0
20000680:	085b      	lsrs	r3, r3, #1
20000682:	d1fb      	bne.n	2000067c <read_column+0x10>
20000684:	4770      	bx	lr
20000686:	230f      	movs	r3, #15
20000688:	7c02      	ldrb	r2, [r0, #16]
2000068a:	4013      	ands	r3, r2
2000068c:	e7f3      	b.n	20000676 <read_column+0xa>
2000068e:	46c0      	nop			; (mov r8, r8)

20000690 <key_value>:
20000690:	b5f0      	push	{r4, r5, r6, r7, lr}
20000692:	b085      	sub	sp, #20
20000694:	466a      	mov	r2, sp
20000696:	0014      	movs	r4, r2
20000698:	4b0b      	ldr	r3, [pc, #44]	; (200006c8 <key_value+0x38>)
2000069a:	3801      	subs	r0, #1
2000069c:	cbe0      	ldmia	r3!, {r5, r6, r7}
2000069e:	c4e0      	stmia	r4!, {r5, r6, r7}
200006a0:	681b      	ldr	r3, [r3, #0]
200006a2:	6023      	str	r3, [r4, #0]
200006a4:	b2c3      	uxtb	r3, r0
200006a6:	2b03      	cmp	r3, #3
200006a8:	d80a      	bhi.n	200006c0 <key_value+0x30>
200006aa:	1e4b      	subs	r3, r1, #1
200006ac:	b2db      	uxtb	r3, r3
200006ae:	2b03      	cmp	r3, #3
200006b0:	d806      	bhi.n	200006c0 <key_value+0x30>
200006b2:	0080      	lsls	r0, r0, #2
200006b4:	1812      	adds	r2, r2, r0
200006b6:	2001      	movs	r0, #1
200006b8:	1852      	adds	r2, r2, r1
200006ba:	4240      	negs	r0, r0
200006bc:	5610      	ldrsb	r0, [r2, r0]
200006be:	e000      	b.n	200006c2 <key_value+0x32>
200006c0:	2000      	movs	r0, #0
200006c2:	b005      	add	sp, #20
200006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
200006c6:	46c0      	nop			; (mov r8, r8)
200006c8:	20000834 	andcs	r0, r0, r4, lsr r8

200006cc <GPIO_read_keypad>:
200006cc:	2301      	movs	r3, #1
200006ce:	b5f0      	push	{r4, r5, r6, r7, lr}
200006d0:	46c6      	mov	lr, r8
200006d2:	0005      	movs	r5, r0
200006d4:	469c      	mov	ip, r3
200006d6:	2708      	movs	r7, #8
200006d8:	260f      	movs	r6, #15
200006da:	b500      	push	{lr}
200006dc:	b084      	sub	sp, #16
200006de:	003b      	movs	r3, r7
200006e0:	4662      	mov	r2, ip
200006e2:	4093      	lsls	r3, r2
200006e4:	b2db      	uxtb	r3, r3
200006e6:	2900      	cmp	r1, #0
200006e8:	d017      	beq.n	2000071a <GPIO_read_keypad+0x4e>
200006ea:	756b      	strb	r3, [r5, #21]
200006ec:	7c68      	ldrb	r0, [r5, #17]
200006ee:	4030      	ands	r0, r6
200006f0:	2800      	cmp	r0, #0
200006f2:	d007      	beq.n	20000704 <GPIO_read_keypad+0x38>
200006f4:	2300      	movs	r3, #0
200006f6:	b2da      	uxtb	r2, r3
200006f8:	1c53      	adds	r3, r2, #1
200006fa:	b25b      	sxtb	r3, r3
200006fc:	0840      	lsrs	r0, r0, #1
200006fe:	d1fa      	bne.n	200006f6 <GPIO_read_keypad+0x2a>
20000700:	2b00      	cmp	r3, #0
20000702:	d10e      	bne.n	20000722 <GPIO_read_keypad+0x56>
20000704:	2301      	movs	r3, #1
20000706:	4698      	mov	r8, r3
20000708:	44c4      	add	ip, r8
2000070a:	4663      	mov	r3, ip
2000070c:	2b05      	cmp	r3, #5
2000070e:	d1e6      	bne.n	200006de <GPIO_read_keypad+0x12>
20000710:	2010      	movs	r0, #16
20000712:	b004      	add	sp, #16
20000714:	bc04      	pop	{r2}
20000716:	4690      	mov	r8, r2
20000718:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000071a:	752b      	strb	r3, [r5, #20]
2000071c:	7c28      	ldrb	r0, [r5, #16]
2000071e:	4030      	ands	r0, r6
20000720:	e7e6      	b.n	200006f0 <GPIO_read_keypad+0x24>
20000722:	46e8      	mov	r8, sp
20000724:	4646      	mov	r6, r8
20000726:	4d07      	ldr	r5, [pc, #28]	; (20000744 <GPIO_read_keypad+0x78>)
20000728:	cd92      	ldmia	r5!, {r1, r4, r7}
2000072a:	c692      	stmia	r6!, {r1, r4, r7}
2000072c:	682d      	ldr	r5, [r5, #0]
2000072e:	6035      	str	r5, [r6, #0]
20000730:	2a03      	cmp	r2, #3
20000732:	d8ee      	bhi.n	20000712 <GPIO_read_keypad+0x46>
20000734:	4664      	mov	r4, ip
20000736:	3c01      	subs	r4, #1
20000738:	00a4      	lsls	r4, r4, #2
2000073a:	4444      	add	r4, r8
2000073c:	18e3      	adds	r3, r4, r3
2000073e:	3b01      	subs	r3, #1
20000740:	7818      	ldrb	r0, [r3, #0]
20000742:	e7e6      	b.n	20000712 <GPIO_read_keypad+0x46>
20000744:	20000834 	andcs	r0, r0, r4, lsr r8

20000748 <GPIO_init_seven_seg>:
20000748:	1e4b      	subs	r3, r1, #1
2000074a:	4199      	sbcs	r1, r3
2000074c:	4b03      	ldr	r3, [pc, #12]	; (2000075c <GPIO_init_seven_seg+0x14>)
2000074e:	4249      	negs	r1, r1
20000750:	4019      	ands	r1, r3
20000752:	4b03      	ldr	r3, [pc, #12]	; (20000760 <GPIO_init_seven_seg+0x18>)
20000754:	469c      	mov	ip, r3
20000756:	4461      	add	r1, ip
20000758:	6001      	str	r1, [r0, #0]
2000075a:	4770      	bx	lr
2000075c:	5554aaab 	ldrbpl	sl, [r4, #-2731]	; 0xfffff555
20000760:	00005555 	andeq	r5, r0, r5, asr r5

20000764 <GPIO_put_seven_seg>:
20000764:	b5f0      	push	{r4, r5, r6, r7, lr}
20000766:	b085      	sub	sp, #20
20000768:	466c      	mov	r4, sp
2000076a:	468c      	mov	ip, r1
2000076c:	0025      	movs	r5, r4
2000076e:	4b0a      	ldr	r3, [pc, #40]	; (20000798 <GPIO_put_seven_seg+0x34>)
20000770:	3310      	adds	r3, #16
20000772:	cbc2      	ldmia	r3!, {r1, r6, r7}
20000774:	c5c2      	stmia	r5!, {r1, r6, r7}
20000776:	4661      	mov	r1, ip
20000778:	681b      	ldr	r3, [r3, #0]
2000077a:	602b      	str	r3, [r5, #0]
2000077c:	1e4b      	subs	r3, r1, #1
2000077e:	4199      	sbcs	r1, r3
20000780:	1841      	adds	r1, r0, r1
20000782:	3114      	adds	r1, #20
20000784:	2a0f      	cmp	r2, #15
20000786:	d803      	bhi.n	20000790 <GPIO_put_seven_seg+0x2c>
20000788:	5ca3      	ldrb	r3, [r4, r2]
2000078a:	700b      	strb	r3, [r1, #0]
2000078c:	b005      	add	sp, #20
2000078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000790:	2300      	movs	r3, #0
20000792:	700b      	strb	r3, [r1, #0]
20000794:	e7fa      	b.n	2000078c <GPIO_put_seven_seg+0x28>
20000796:	46c0      	nop			; (mov r8, r8)
20000798:	20000834 	andcs	r0, r0, r4, lsr r8

2000079c <delay_250ns>:
2000079c:	2300      	movs	r3, #0
2000079e:	2129      	movs	r1, #41	; 0x29
200007a0:	4a06      	ldr	r2, [pc, #24]	; (200007bc <delay_250ns+0x20>)
200007a2:	6013      	str	r3, [r2, #0]
200007a4:	6051      	str	r1, [r2, #4]
200007a6:	2180      	movs	r1, #128	; 0x80
200007a8:	6093      	str	r3, [r2, #8]
200007aa:	3305      	adds	r3, #5
200007ac:	6013      	str	r3, [r2, #0]
200007ae:	0249      	lsls	r1, r1, #9
200007b0:	6813      	ldr	r3, [r2, #0]
200007b2:	420b      	tst	r3, r1
200007b4:	d0fc      	beq.n	200007b0 <delay_250ns+0x14>
200007b6:	2300      	movs	r3, #0
200007b8:	6013      	str	r3, [r2, #0]
200007ba:	4770      	bx	lr
200007bc:	e000e010 	and	lr, r0, r0, lsl r0

200007c0 <delay_500ns>:
200007c0:	2300      	movs	r3, #0
200007c2:	2153      	movs	r1, #83	; 0x53
200007c4:	4a06      	ldr	r2, [pc, #24]	; (200007e0 <delay_500ns+0x20>)
200007c6:	6013      	str	r3, [r2, #0]
200007c8:	6051      	str	r1, [r2, #4]
200007ca:	2180      	movs	r1, #128	; 0x80
200007cc:	6093      	str	r3, [r2, #8]
200007ce:	3305      	adds	r3, #5
200007d0:	6013      	str	r3, [r2, #0]
200007d2:	0249      	lsls	r1, r1, #9
200007d4:	6813      	ldr	r3, [r2, #0]
200007d6:	420b      	tst	r3, r1
200007d8:	d0fc      	beq.n	200007d4 <delay_500ns+0x14>
200007da:	2300      	movs	r3, #0
200007dc:	6013      	str	r3, [r2, #0]
200007de:	4770      	bx	lr
200007e0:	e000e010 	and	lr, r0, r0, lsl r0

200007e4 <delay_micros>:
200007e4:	2280      	movs	r2, #128	; 0x80
200007e6:	b5f0      	push	{r4, r5, r6, r7, lr}
200007e8:	2400      	movs	r4, #0
200007ea:	2700      	movs	r7, #0
200007ec:	2653      	movs	r6, #83	; 0x53
200007ee:	2505      	movs	r5, #5
200007f0:	4b0a      	ldr	r3, [pc, #40]	; (2000081c <delay_micros+0x38>)
200007f2:	0a80      	lsrs	r0, r0, #10
200007f4:	0252      	lsls	r2, r2, #9
200007f6:	601f      	str	r7, [r3, #0]
200007f8:	605e      	str	r6, [r3, #4]
200007fa:	609f      	str	r7, [r3, #8]
200007fc:	601d      	str	r5, [r3, #0]
200007fe:	6819      	ldr	r1, [r3, #0]
20000800:	4211      	tst	r1, r2
20000802:	d0fc      	beq.n	200007fe <delay_micros+0x1a>
20000804:	601c      	str	r4, [r3, #0]
20000806:	601c      	str	r4, [r3, #0]
20000808:	605e      	str	r6, [r3, #4]
2000080a:	609c      	str	r4, [r3, #8]
2000080c:	601d      	str	r5, [r3, #0]
2000080e:	6819      	ldr	r1, [r3, #0]
20000810:	4211      	tst	r1, r2
20000812:	d0fc      	beq.n	2000080e <delay_micros+0x2a>
20000814:	601c      	str	r4, [r3, #0]
20000816:	3801      	subs	r0, #1
20000818:	d2ed      	bcs.n	200007f6 <delay_micros+0x12>
2000081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000081c:	e000e010 	and	lr, r0, r0, lsl r0

20000820 <delay_millis>:
20000820:	b510      	push	{r4, lr}
20000822:	0143      	lsls	r3, r0, #5
20000824:	1a1b      	subs	r3, r3, r0
20000826:	009b      	lsls	r3, r3, #2
20000828:	1818      	adds	r0, r3, r0
2000082a:	00c0      	lsls	r0, r0, #3
2000082c:	f7ff ffda 	bl	200007e4 <delay_micros>
20000830:	bd10      	pop	{r4, pc}
20000832:	46c0      	nop			; (mov r8, r8)
20000834:	0a030201 	beq	200c1040 <delay_millis+0xc0820>
20000838:	0b060504 	bleq	20181c50 <delay_millis+0x181430>
2000083c:	0c090807 	stceq	8, cr0, [r9], {7}
20000840:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000810 <delay_micros+0x2c>
20000844:	4f5b063f 	svcmi	0x005b063f
20000848:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
2000084c:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20000850:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	00008e0c 	andeq	r8, r0, ip, lsl #28
  14:	00012800 	andeq	r2, r1, r0, lsl #16
	...
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	00000061 	andeq	r0, r0, r1, rrx
  2c:	00000003 	andeq	r0, r0, r3
  30:	182b0200 	stmdane	fp!, {r9}
  34:	00000038 	andeq	r0, r0, r8, lsr r0
  38:	5f080102 	svcpl	0x00080102
  3c:	02000000 	andeq	r0, r0, #0
  40:	017b0502 	cmneq	fp, r2, lsl #10
  44:	d4030000 	strle	r0, [r3], #-0
  48:	02000000 	andeq	r0, r0, #0
  4c:	00521939 	subseq	r1, r2, r9, lsr r9
  50:	02020000 	andeq	r0, r2, #0
  54:	00007607 	andeq	r7, r0, r7, lsl #12
  58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
  5c:	00000172 	andeq	r0, r0, r2, ror r1
  60:	0000ec03 	andeq	lr, r0, r3, lsl #24
  64:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
  68:	0000006c 	andeq	r0, r0, ip, rrx
  6c:	16070402 	strne	r0, [r7], -r2, lsl #8
  70:	02000001 	andeq	r0, r0, #1
  74:	016d0508 	cmneq	sp, r8, lsl #10
  78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  7c:	00011107 	andeq	r1, r1, r7, lsl #2
  80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
  84:	00746e69 	rsbseq	r6, r4, r9, ror #28
  88:	1b070402 	blne	1c1098 <startup-0x1fe3ef68>
  8c:	03000001 	movweq	r0, #1
  90:	00000002 	andeq	r0, r0, r2
  94:	2c131803 	ldccs	8, cr1, [r3], {3}
  98:	03000000 	movweq	r0, #0
  9c:	000000d6 	ldrdeq	r0, [r0], -r6
  a0:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
  a4:	03000000 	movweq	r0, #0
  a8:	000000ee 	andeq	r0, r0, lr, ror #1
  ac:	60143003 	andsvs	r3, r4, r3
  b0:	05000000 	streq	r0, [r0, #-0]
  b4:	000000cf 	andeq	r0, r0, pc, asr #1
  b8:	100c0418 	andne	r0, ip, r8, lsl r4
  bc:	00000150 	andeq	r0, r0, r0, asr r1
  c0:	00018506 	andeq	r8, r1, r6, lsl #10
  c4:	0e0d0400 	cfcpyseq	mvf0, mvf13
  c8:	000000a7 	andeq	r0, r0, r7, lsr #1
  cc:	001b0600 	andseq	r0, fp, r0, lsl #12
  d0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
  d4:	00009b0e 	andeq	r9, r0, lr, lsl #22
  d8:	93060400 	movwls	r0, #25600	; 0x6400
  dc:	04000001 	streq	r0, [r0], #-1
  e0:	009b0e0f 	addseq	r0, fp, pc, lsl #28
  e4:	06060000 	streq	r0, [r6], -r0
  e8:	0000000a 	andeq	r0, r0, sl
  ec:	a70e1004 	strge	r1, [lr, -r4]
  f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  f4:	00016706 	andeq	r6, r1, r6, lsl #14
  f8:	0e110400 	cfmulseq	mvf0, mvf1, mvf0
  fc:	000000a7 	andeq	r0, r0, r7, lsr #1
 100:	018b060c 	orreq	r0, fp, ip, lsl #12
 104:	12040000 	andne	r0, r4, #0
 108:	00008f0d 	andeq	r8, r0, sp, lsl #30
 10c:	6d061000 	stcvs	0, cr1, [r6, #-0]
 110:	04000000 	streq	r0, [r0], #-0
 114:	008f0d13 	addeq	r0, pc, r3, lsl sp	; <UNPREDICTABLE>
 118:	06110000 	ldreq	r0, [r1], -r0
 11c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 120:	9b0e1404 	blls	385138 <startup-0x1fc7aec8>
 124:	12000000 	andne	r0, r0, #0
 128:	0000f706 	andeq	pc, r0, r6, lsl #14
 12c:	0d150400 	cfldrseq	mvf0, [r5, #-0]
 130:	0000008f 	andeq	r0, r0, pc, lsl #1
 134:	00120614 	andseq	r0, r2, r4, lsl r6
 138:	16040000 	strne	r0, [r4], -r0
 13c:	00008f0d 	andeq	r8, r0, sp, lsl #30
 140:	ff061500 			; <UNDEFINED> instruction: 0xff061500
 144:	04000000 	streq	r0, [r0], #-0
 148:	009b0e17 	addseq	r0, fp, r7, lsl lr
 14c:	00160000 	andseq	r0, r6, r0
 150:	00008903 	andeq	r8, r0, r3, lsl #18
 154:	02180400 	andseq	r0, r8, #0, 8
 158:	000000b3 	strheq	r0, [r0], -r3
 15c:	00010c07 	andeq	r0, r1, r7, lsl #24
 160:	05170100 	ldreq	r0, [r7, #-256]	; 0xffffff00
 164:	00000081 	andeq	r0, r0, r1, lsl #1
 168:	20000010 	andcs	r0, r0, r0, lsl r0
 16c:	000000ac 	andeq	r0, r0, ip, lsr #1
 170:	01a99c01 			; <UNDEFINED> instruction: 0x01a99c01
 174:	22080000 	andcs	r0, r8, #0
 178:	40200000 	eormi	r0, r0, r0
 17c:	91000000 	mrsls	r0, (UNDEF: 0)
 180:	09000001 	stmdbeq	r0, {r0}
 184:	1b010078 	blne	4036c <startup-0x1ffbfc94>
 188:	00008f12 	andeq	r8, r0, r2, lsl pc
 18c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 190:	006c0a00 	rsbeq	r0, ip, r0, lsl #20
 194:	00402000 	subeq	r2, r0, r0
 198:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
 19c:	12220100 	eorne	r0, r2, #0, 2
 1a0:	0000008f 	andeq	r0, r0, pc, lsl #1
 1a4:	00769102 	rsbseq	r9, r6, r2, lsl #2
 1a8:	015f0b00 	cmpeq	pc, r0, lsl #22
 1ac:	0d010000 	stceq	0, cr0, [r1, #-0]
 1b0:	00000006 	andeq	r0, r0, r6
 1b4:	00000c20 	andeq	r0, r0, r0, lsr #24
 1b8:	009c0100 	addseq	r0, ip, r0, lsl #2
 1bc:	000003e1 	andeq	r0, r0, r1, ror #7
 1c0:	00b80004 	adcseq	r0, r8, r4
 1c4:	01040000 	mrseq	r0, (UNDEF: 4)
 1c8:	00000022 	andeq	r0, r0, r2, lsr #32
 1cc:	0001bd0c 	andeq	fp, r1, ip, lsl #26
 1d0:	00012800 	andeq	r2, r1, r0, lsl #16
 1d4:	0000bc00 	andeq	fp, r0, r0, lsl #24
 1d8:	00050620 	andeq	r0, r5, r0, lsr #12
 1dc:	00017400 	andeq	r7, r1, r0, lsl #8
 1e0:	06010200 	streq	r0, [r1], -r0, lsl #4
 1e4:	00000061 	andeq	r0, r0, r1, rrx
 1e8:	00000003 	andeq	r0, r0, r3
 1ec:	182b0200 	stmdane	fp!, {r9}
 1f0:	00000038 	andeq	r0, r0, r8, lsr r0
 1f4:	5f080102 	svcpl	0x00080102
 1f8:	02000000 	andeq	r0, r0, #0
 1fc:	017b0502 	cmneq	fp, r2, lsl #10
 200:	d4030000 	strle	r0, [r3], #-0
 204:	02000000 	andeq	r0, r0, #0
 208:	00521939 	subseq	r1, r2, r9, lsr r9
 20c:	02020000 	andeq	r0, r2, #0
 210:	00007607 	andeq	r7, r0, r7, lsl #12
 214:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 218:	00000172 	andeq	r0, r0, r2, ror r1
 21c:	0000ec03 	andeq	lr, r0, r3, lsl #24
 220:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
 224:	0000006c 	andeq	r0, r0, ip, rrx
 228:	16070402 	strne	r0, [r7], -r2, lsl #8
 22c:	02000001 	andeq	r0, r0, #1
 230:	016d0508 	cmneq	sp, r8, lsl #10
 234:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 238:	00011107 	andeq	r1, r1, r7, lsl #2
 23c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
 240:	00746e69 	rsbseq	r6, r4, r9, ror #28
 244:	1b070402 	blne	1c1254 <startup-0x1fe3edac>
 248:	03000001 	movweq	r0, #1
 24c:	00000002 	andeq	r0, r0, r2
 250:	2c131803 	ldccs	8, cr1, [r3], {3}
 254:	03000000 	movweq	r0, #0
 258:	000000d6 	ldrdeq	r0, [r0], -r6
 25c:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
 260:	03000000 	movweq	r0, #0
 264:	000000ee 	andeq	r0, r0, lr, ror #1
 268:	60143003 	andsvs	r3, r4, r3
 26c:	05000000 	streq	r0, [r0, #-0]
 270:	000000cf 	andeq	r0, r0, pc, asr #1
 274:	100c0418 	andne	r0, ip, r8, lsl r4
 278:	00000150 	andeq	r0, r0, r0, asr r1
 27c:	00018506 	andeq	r8, r1, r6, lsl #10
 280:	0e0d0400 	cfcpyseq	mvf0, mvf13
 284:	000000a7 	andeq	r0, r0, r7, lsr #1
 288:	001b0600 	andseq	r0, fp, r0, lsl #12
 28c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
 290:	00009b0e 	andeq	r9, r0, lr, lsl #22
 294:	93060400 	movwls	r0, #25600	; 0x6400
 298:	04000001 	streq	r0, [r0], #-1
 29c:	009b0e0f 	addseq	r0, fp, pc, lsl #28
 2a0:	06060000 	streq	r0, [r6], -r0
 2a4:	0000000a 	andeq	r0, r0, sl
 2a8:	a70e1004 	strge	r1, [lr, -r4]
 2ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 2b0:	00016706 	andeq	r6, r1, r6, lsl #14
 2b4:	0e110400 	cfmulseq	mvf0, mvf1, mvf0
 2b8:	000000a7 	andeq	r0, r0, r7, lsr #1
 2bc:	018b060c 	orreq	r0, fp, ip, lsl #12
 2c0:	12040000 	andne	r0, r4, #0
 2c4:	00008f0d 	andeq	r8, r0, sp, lsl #30
 2c8:	6d061000 	stcvs	0, cr1, [r6, #-0]
 2cc:	04000000 	streq	r0, [r0], #-0
 2d0:	008f0d13 	addeq	r0, pc, r3, lsl sp	; <UNPREDICTABLE>
 2d4:	06110000 	ldreq	r0, [r1], -r0
 2d8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 2dc:	9b0e1404 	blls	3852f4 <startup-0x1fc7ad0c>
 2e0:	12000000 	andne	r0, r0, #0
 2e4:	0000f706 	andeq	pc, r0, r6, lsl #14
 2e8:	0d150400 	cfldrseq	mvf0, [r5, #-0]
 2ec:	0000008f 	andeq	r0, r0, pc, lsl #1
 2f0:	00120614 	andseq	r0, r2, r4, lsl r6
 2f4:	16040000 	strne	r0, [r4], -r0
 2f8:	00008f0d 	andeq	r8, r0, sp, lsl #30
 2fc:	ff061500 			; <UNDEFINED> instruction: 0xff061500
 300:	04000000 	streq	r0, [r0], #-0
 304:	009b0e17 	addseq	r0, fp, r7, lsl lr
 308:	00160000 	andseq	r0, r6, r0
 30c:	00008903 	andeq	r8, r0, r3, lsl #18
 310:	02180400 	andseq	r0, r8, #0, 8
 314:	000000b3 	strheq	r0, [r0], -r3
 318:	0001b007 	andeq	fp, r1, r7
 31c:	06aa0100 	strteq	r0, [sl], r0, lsl #2
 320:	2000056c 	andcs	r0, r0, ip, ror #10
 324:	00000056 	andeq	r0, r0, r6, asr r0
 328:	15089c01 	strne	r9, [r8, #-3073]	; 0xfffff3ff
 32c:	01000002 	tsteq	r0, r2
 330:	0504069f 	streq	r0, [r4, #-1695]	; 0xfffff961
 334:	00682000 	rsbeq	r2, r8, r0
 338:	9c010000 	stcls	0, cr0, [r1], {-0}
 33c:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 340:	00050a09 	andeq	r0, r5, r9, lsl #20
 344:	00005820 	andeq	r5, r0, r0, lsr #16
 348:	02370a00 	eorseq	r0, r7, #0, 20
 34c:	a0010000 	andge	r0, r1, r0
 350:	00008f12 	andeq	r8, r0, r2, lsl pc
 354:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 358:	00052e09 	andeq	r2, r5, r9, lsl #28
 35c:	00002220 	andeq	r2, r0, r0, lsr #4
 360:	64610b00 	strbtvs	r0, [r1], #-2816	; 0xfffff500
 364:	a3010064 	movwge	r0, #4196	; 0x1064
 368:	00008f16 	andeq	r8, r0, r6, lsl pc
 36c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 370:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 374:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 378:	cc068601 	stcgt	6, cr8, [r6], {1}
 37c:	38200003 	stmdacc	r0!, {r0, r1}
 380:	01000001 	tsteq	r0, r1
 384:	0002339c 	muleq	r2, ip, r3
 388:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 38c:	8f148601 	svchi	0x00148601
 390:	02000000 	andeq	r0, r0, #0
 394:	790c5f91 	stmdbvc	ip, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 398:	1f860100 	svcne	0x00860100
 39c:	0000008f 	andeq	r0, r0, pc, lsl #1
 3a0:	0c5e9102 	ldfeqp	f1, [lr], {2}
 3a4:	00746573 	rsbseq	r6, r4, r3, ror r5
 3a8:	33278601 			; <UNDEFINED> instruction: 0x33278601
 3ac:	02000002 	andeq	r0, r0, #2
 3b0:	a50a5d91 	strge	r5, [sl, #-3473]	; 0xfffff26f
 3b4:	01000001 	tsteq	r0, r1
 3b8:	008f0d88 	addeq	r0, pc, r8, lsl #27
 3bc:	91020000 	mrsls	r0, (UNDEF: 2)
 3c0:	02c60a65 	sbceq	r0, r6, #413696	; 0x65000
 3c4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
 3c8:	00008f14 	andeq	r8, r0, r4, lsl pc
 3cc:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 3d0:	0002a80a 	andeq	sl, r2, sl, lsl #16
 3d4:	1a880100 	bne	fe2007dc <delay_millis+0xde1fffbc>
 3d8:	0000008f 	andeq	r0, r0, pc, lsl #1
 3dc:	0a669102 	beq	19a47ec <startup-0x1e65b814>
 3e0:	000001ab 	andeq	r0, r0, fp, lsr #3
 3e4:	8f0d9501 	svchi	0x000d9501
 3e8:	02000000 	andeq	r0, r0, #0
 3ec:	02006491 	andeq	r6, r0, #-1862270976	; 0x91000000
 3f0:	029b0201 	addseq	r0, fp, #268435456	; 0x10000000
 3f4:	3c0d0000 	stccc	0, cr0, [sp], {-0}
 3f8:	01000002 	tsteq	r0, r2
 3fc:	008f0981 	addeq	r0, pc, r1, lsl #19
 400:	03a20000 			; <UNDEFINED> instruction: 0x03a20000
 404:	002a2000 	eoreq	r2, sl, r0
 408:	9c010000 	stcls	0, cr0, [r1], {-0}
 40c:	00000264 	andeq	r0, r0, r4, ror #4
 410:	0002a80e 	andeq	sl, r2, lr, lsl #16
 414:	23810100 	orrcs	r0, r1, #0, 2
 418:	0000008f 	andeq	r0, r0, pc, lsl #1
 41c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 420:	00024e08 	andeq	r4, r2, r8, lsl #28
 424:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
 428:	2000035c 	andcs	r0, r0, ip, asr r3
 42c:	00000046 	andeq	r0, r0, r6, asr #32
 430:	02999c01 	addseq	r9, r9, #256	; 0x100
 434:	490e0000 	stmdbmi	lr, {}	; <UNPREDICTABLE>
 438:	01000002 	tsteq	r0, r2
 43c:	008f2179 	addeq	r2, pc, r9, ror r1	; <UNPREDICTABLE>
 440:	91020000 	mrsls	r0, (UNDEF: 2)
 444:	02a80e77 	adceq	r0, r8, #1904	; 0x770
 448:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
 44c:	00008f2f 	andeq	r8, r0, pc, lsr #30
 450:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 454:	01ff0800 	mvnseq	r0, r0, lsl #16
 458:	72010000 	andvc	r0, r1, #0
 45c:	00031c06 	andeq	r1, r3, r6, lsl #24
 460:	00004020 	andeq	r4, r0, r0, lsr #32
 464:	ce9c0100 	fmlgte	f0, f4, f0
 468:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 46c:	0000020d 	andeq	r0, r0, sp, lsl #4
 470:	8f247201 	svchi	0x00247201
 474:	02000000 	andeq	r0, r0, #0
 478:	a80e7791 	stmdage	lr, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 47c:	01000002 	tsteq	r0, r2
 480:	008f3572 	addeq	r3, pc, r2, ror r5	; <UNPREDICTABLE>
 484:	91020000 	mrsls	r0, (UNDEF: 2)
 488:	78080076 	stmdavc	r8, {r1, r2, r4, r5, r6}
 48c:	01000002 	tsteq	r0, r2
 490:	029c065e 	addseq	r0, ip, #98566144	; 0x5e00000
 494:	00802000 	addeq	r2, r0, r0
 498:	9c010000 	stcls	0, cr0, [r1], {-0}
 49c:	00000303 	andeq	r0, r0, r3, lsl #6
 4a0:	0002d10e 	andeq	sp, r2, lr, lsl #2
 4a4:	1c5e0100 	ldfnee	f0, [lr], {-0}
 4a8:	0000008f 	andeq	r0, r0, pc, lsl #1
 4ac:	0e779102 	expeqs	f1, f2
 4b0:	000002a8 	andeq	r0, r0, r8, lsr #5
 4b4:	8f2b5e01 	svchi	0x002b5e01
 4b8:	02000000 	andeq	r0, r0, #0
 4bc:	0d007691 	stceq	6, cr7, [r0, #-580]	; 0xfffffdbc
 4c0:	0000022a 	andeq	r0, r0, sl, lsr #4
 4c4:	8f094801 	svchi	0x00094801
 4c8:	0c000000 	stceq	0, cr0, [r0], {-0}
 4cc:	90200002 	eorls	r0, r0, r2
 4d0:	01000000 	mrseq	r0, (UNDEF: 0)
 4d4:	00033c9c 	muleq	r3, ip, ip
 4d8:	02a80e00 	adceq	r0, r8, #0, 28
 4dc:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 4e0:	00008f1e 	andeq	r8, r0, lr, lsl pc
 4e4:	6f910200 	svcvs	0x00910200
 4e8:	0002cb0a 	andeq	ip, r2, sl, lsl #22
 4ec:	0d500100 	ldfeqe	f0, [r0, #-0]
 4f0:	0000008f 	andeq	r0, r0, pc, lsl #1
 4f4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 4f8:	0002b30f 	andeq	fp, r2, pc, lsl #6
 4fc:	06340100 	ldrteq	r0, [r4], -r0, lsl #2
 500:	2000019e 	mulcs	r0, lr, r1
 504:	0000006e 	andeq	r0, r0, lr, rrx
 508:	03609c01 	cmneq	r0, #256	; 0x100
 50c:	630b0000 	movwvs	r0, #45056	; 0xb000
 510:	0d3b0100 	ldfeqs	f0, [fp, #-0]
 514:	0000008f 	andeq	r0, r0, pc, lsl #1
 518:	00779102 	rsbseq	r9, r7, r2, lsl #2
 51c:	0002a108 	andeq	sl, r2, r8, lsl #2
 520:	06210100 	strteq	r0, [r1], -r0, lsl #2
 524:	20000144 	andcs	r0, r0, r4, asr #2
 528:	0000005a 	andeq	r0, r0, sl, asr r0
 52c:	03869c01 	orreq	r9, r6, #256	; 0x100
 530:	a80e0000 	stmdage	lr, {}	; <UNPREDICTABLE>
 534:	01000002 	tsteq	r0, r2
 538:	008f2021 	addeq	r2, pc, r1, lsr #32
 53c:	91020000 	mrsls	r0, (UNDEF: 2)
 540:	61100077 	tstvs	r0, r7, ror r0
 544:	01000002 	tsteq	r0, r2
 548:	0100061b 	tsteq	r0, fp, lsl r6
 54c:	00442000 	subeq	r2, r4, r0
 550:	9c010000 	stcls	0, cr0, [r1], {-0}
 554:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
 558:	0100780c 	tsteq	r0, ip, lsl #16
 55c:	008f251b 	addeq	r2, pc, fp, lsl r5	; <UNPREDICTABLE>
 560:	91020000 	mrsls	r0, (UNDEF: 2)
 564:	00630b6f 	rsbeq	r0, r3, pc, ror #22
 568:	8f0d1c01 	svchi	0x000d1c01
 56c:	02000000 	andeq	r0, r0, #0
 570:	11007791 			; <UNDEFINED> instruction: 0x11007791
 574:	00000286 	andeq	r0, r0, r6, lsl #5
 578:	bc061501 	cfstr32lt	mvfx1, [r6], {1}
 57c:	44200000 	strtmi	r0, [r0], #-0
 580:	01000000 	mrseq	r0, (UNDEF: 0)
 584:	00780c9c 			; <UNDEFINED> instruction: 0x00780c9c
 588:	8f231501 	svchi	0x00231501
 58c:	02000000 	andeq	r0, r0, #0
 590:	630b6f91 	movwvs	r6, #49041	; 0xbf91
 594:	0d160100 	ldfeqs	f0, [r6, #-0]
 598:	0000008f 	andeq	r0, r0, pc, lsl #1
 59c:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000803 	andeq	r0, r0, r3, lsl #16
  38:	03011305 	movweq	r1, #4869	; 0x1305
  3c:	3a0b0b0e 	bcc	2c2c7c <startup-0x1fd3d384>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0013010b 	andseq	r0, r3, fp, lsl #2
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	0b390b3b 	bleq	e42d44 <startup-0x1f1bd2bc>
  54:	0b381349 	bleq	e04d80 <startup-0x1f1fb280>
  58:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  5c:	03193f01 	tsteq	r9, #1, 30
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  68:	11134919 	tstne	r3, r9, lsl r9
  6c:	40061201 	andmi	r1, r6, r1, lsl #4
  70:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  74:	00001301 	andeq	r1, r0, r1, lsl #6
  78:	11010b08 	tstne	r1, r8, lsl #22
  7c:	01061201 	tsteq	r6, r1, lsl #4
  80:	09000013 	stmdbeq	r0, {r0, r1, r4}
  84:	08030034 	stmdaeq	r3, {r2, r4, r5}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	13490b39 	movtne	r0, #39737	; 0x9b39
  90:	00001802 	andeq	r1, r0, r2, lsl #16
  94:	11010b0a 	tstne	r1, sl, lsl #22
  98:	00061201 	andeq	r1, r6, r1, lsl #4
  9c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
  a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
  b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  b4:	00000019 	andeq	r0, r0, r9, lsl r0
  b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  bc:	030b130e 	movweq	r1, #45838	; 0xb30e
  c0:	110e1b0e 	tstne	lr, lr, lsl #22
  c4:	10061201 	andne	r1, r6, r1, lsl #4
  c8:	02000017 	andeq	r0, r0, #23
  cc:	0b0b0024 	bleq	2c0164 <startup-0x1fd3fe9c>
  d0:	0e030b3e 	vmoveq.16	d3[0], r0
  d4:	16030000 	strne	r0, [r3], -r0
  d8:	3a0e0300 	bcc	380ce0 <startup-0x1fc7f320>
  dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	0013490b 	andseq	r4, r3, fp, lsl #18
  e4:	00240400 	eoreq	r0, r4, r0, lsl #8
  e8:	0b3e0b0b 	bleq	f82d1c <startup-0x1f07d2e4>
  ec:	00000803 	andeq	r0, r0, r3, lsl #16
  f0:	03011305 	movweq	r1, #4869	; 0x1305
  f4:	3a0b0b0e 	bcc	2c2d34 <startup-0x1fd3d2cc>
  f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  fc:	0013010b 	andseq	r0, r3, fp, lsl #2
 100:	000d0600 	andeq	r0, sp, r0, lsl #12
 104:	0b3a0e03 	bleq	e83918 <startup-0x1f17c6e8>
 108:	0b390b3b 	bleq	e42dfc <startup-0x1f1bd204>
 10c:	0b381349 	bleq	e04e38 <startup-0x1f1fb1c8>
 110:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 114:	03193f00 	tsteq	r9, #0, 30
 118:	3b0b3a0e 	blcc	2ce958 <startup-0x1fd316a8>
 11c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 120:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 124:	96184006 	ldrls	r4, [r8], -r6
 128:	00001942 	andeq	r1, r0, r2, asr #18
 12c:	3f012e08 	svccc	0x00012e08
 130:	3a0e0319 	bcc	380d9c <startup-0x1fc7f264>
 134:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 138:	1119270b 	tstne	r9, fp, lsl #14
 13c:	40061201 	andmi	r1, r6, r1, lsl #4
 140:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 144:	00001301 	andeq	r1, r0, r1, lsl #6
 148:	11010b09 	tstne	r1, r9, lsl #22
 14c:	00061201 	andeq	r1, r6, r1, lsl #4
 150:	00340a00 	eorseq	r0, r4, r0, lsl #20
 154:	0b3a0e03 	bleq	e83968 <startup-0x1f17c698>
 158:	0b390b3b 	bleq	e42e4c <startup-0x1f1bd1b4>
 15c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 160:	340b0000 	strcc	r0, [fp], #-0
 164:	3a080300 	bcc	200d6c <startup-0x1fdff294>
 168:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 16c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 170:	0c000018 	stceq	0, cr0, [r0], {24}
 174:	08030005 	stmdaeq	r3, {r0, r2}
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	13490b39 	movtne	r0, #39737	; 0x9b39
 180:	00001802 	andeq	r1, r0, r2, lsl #16
 184:	3f012e0d 	svccc	0x00012e0d
 188:	3a0e0319 	bcc	380df4 <startup-0x1fc7f20c>
 18c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 194:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 198:	96184006 	ldrls	r4, [r8], -r6
 19c:	13011942 	movwne	r1, #6466	; 0x1942
 1a0:	050e0000 	streq	r0, [lr, #-0]
 1a4:	3a0e0300 	bcc	380dac <startup-0x1fc7f254>
 1a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1b0:	0f000018 	svceq	0x00000018
 1b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	0b390b3b 	bleq	e42eb0 <startup-0x1f1bd150>
 1c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1c8:	00130119 	andseq	r0, r3, r9, lsl r1
 1cc:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 1d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d4:	0b3b0b3a 	bleq	ec2ec4 <startup-0x1f13d13c>
 1d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1e4:	00130119 	andseq	r0, r3, r9, lsl r1
 1e8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 1ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f0:	0b3b0b3a 	bleq	ec2ee0 <startup-0x1f13d120>
 1f4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 200:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000ac 	andeq	r0, r0, ip, lsr #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	01bc0002 			; <UNDEFINED> instruction: 0x01bc0002
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000bc 	strhcs	r0, [r0], -ip
  3c:	00000506 	andeq	r0, r0, r6, lsl #10
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000bc 	strhcs	r0, [r0], -ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000170 	andeq	r0, r0, r0, ror r1
   4:	00f60003 	rscseq	r0, r6, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
  24:	6f442f65 	svcvs	0x00442f65
  28:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  2c:	2f73746e 	svccs	0x0073746e
  30:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
  34:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
  38:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
  3c:	33564c2f 	cmpcc	r6, #12032	; 0x2f00
  40:	646f632f 	strbtvs	r6, [pc], #-815	; 48 <startup-0x1fffffb8>
  44:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  48:	616c2f65 	cmnvs	ip, r5, ror #30
  4c:	5f336262 	svcpl	0x00336262
  50:	752f0031 	strvc	r0, [pc, #-49]!	; 27 <startup-0x1fffffd9>
  54:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
  58:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  5c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  60:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  64:	636e692f 	cmnvs	lr, #770048	; 0xbc000
  68:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  6c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
  70:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
  74:	73752f00 	cmnvc	r5, #0, 30
  78:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
  7c:	6f6e2d6d 	svcvs	0x006e2d6d
  80:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  84:	2f696261 	svccs	0x00696261
  88:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  8c:	2f656475 	svccs	0x00656475
  90:	00737973 	rsbseq	r7, r3, r3, ror r9
  94:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffe0 <delay_millis+0xdffff7c0>
  98:	6f6c2f65 	svcvs	0x006c2f65
  9c:	442f6576 	strtmi	r6, [pc], #-1398	; a4 <startup-0x1fffff5c>
  a0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  a4:	73746e65 	cmnvc	r4, #1616	; 0x650
  a8:	6f6b732f 	svcvs	0x006b732f
  ac:	452f616c 	strmi	r6, [pc, #-364]!	; ffffff48 <delay_millis+0xdffff728>
  b0:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
  b4:	696c2f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, sp}^
  b8:	692f7362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  c0:	00006564 	andeq	r6, r0, r4, ror #10
  c4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  c8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  cc:	00010063 	andeq	r0, r1, r3, rrx
  d0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
  d4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
  d8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  dc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
  e0:	00020068 	andeq	r0, r2, r8, rrx
  e4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
  e8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
  ec:	0300682e 	movweq	r6, #2094	; 0x82e
  f0:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
  f4:	49504762 	ldmdbmi	r0, {r1, r5, r6, r8, r9, sl, lr}^
  f8:	00682e4f 	rsbeq	r2, r8, pc, asr #28
  fc:	00000004 	andeq	r0, r0, r4
 100:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 104:	00000002 	andeq	r0, r0, r2
 108:	010d0320 	tsteq	sp, r0, lsr #6
 10c:	03025e13 	movweq	r5, #11795	; 0x2e13
 110:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
 114:	02050001 	andeq	r0, r5, #1
 118:	20000010 	andcs	r0, r0, r0, lsl r0
 11c:	05011703 	streq	r1, [r1, #-1795]	; 0xfffff8fd
 120:	054b3d05 	strbeq	r3, [fp, #-3333]	; 0xfffff2fb
 124:	05052f12 	streq	r2, [r5, #-3858]	; 0xfffff0ee
 128:	2109053c 	tstcs	r9, ip, lsr r5
 12c:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
 130:	23054b0d 	movwcs	r4, #23309	; 0x5b0d
 134:	02040200 	andeq	r0, r4, #0, 4
 138:	001b0571 	andseq	r0, fp, r1, ror r5
 13c:	58010402 	stmdapl	r1, {r1, sl}
 140:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 144:	343c0104 	ldrtcc	r0, [ip], #-260	; 0xfffffefc
 148:	05591205 	ldrbeq	r1, [r9, #-517]	; 0xfffffdfb
 14c:	09053c05 	stmdbeq	r5, {r0, r2, sl, fp, ip, sp}
 150:	750c0521 	strvc	r0, [ip, #-1313]	; 0xfffffadf
 154:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
 158:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 15c:	1b057102 	blne	15c56c <startup-0x1fea3a94>
 160:	01040200 	mrseq	r0, R12_usr
 164:	00050558 	andeq	r0, r5, r8, asr r5
 168:	3c010402 	cfstrscc	mvf0, [r1], {2}
 16c:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
 170:	01010007 	tsteq	r1, r7
 174:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
 178:	00f70003 	rscseq	r0, r7, r3
 17c:	01020000 	mrseq	r0, (UNDEF: 2)
 180:	000d0efb 	strdeq	r0, [sp], -fp
 184:	01010101 	tsteq	r1, r1, lsl #2
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	2f010000 	svccs	0x00010000
 190:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 194:	766f6c2f 	strbtvc	r6, [pc], -pc, lsr #24
 198:	6f442f65 	svcvs	0x00442f65
 19c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 1a0:	2f73746e 	svccs	0x0073746e
 1a4:	6c6f6b73 			; <UNDEFINED> instruction: 0x6c6f6b73
 1a8:	44452f61 	strbmi	r2, [r5], #-3937	; 0xfffff09f
 1ac:	32383441 	eorscc	r3, r8, #1090519040	; 0x41000000
 1b0:	33564c2f 	cmpcc	r6, #12032	; 0x2f00
 1b4:	646f632f 	strbtvs	r6, [pc], #-815	; 1bc <startup-0x1ffffe44>
 1b8:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 1bc:	616c2f65 	cmnvs	ip, r5, ror #30
 1c0:	5f336262 	svcpl	0x00336262
 1c4:	752f0031 	strvc	r0, [pc, #-49]!	; 19b <startup-0x1ffffe65>
 1c8:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
 1cc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 1d0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 1d4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 1d8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 1dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 1e0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
 1e4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 1e8:	73752f00 	cmnvc	r5, #0, 30
 1ec:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
 1f0:	6f6e2d6d 	svcvs	0x006e2d6d
 1f4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 1f8:	2f696261 	svccs	0x00696261
 1fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 200:	2f656475 	svccs	0x00656475
 204:	00737973 	rsbseq	r7, r3, r3, ror r9
 208:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 154 <startup-0x1ffffeac>
 20c:	6f6c2f65 	svcvs	0x006c2f65
 210:	442f6576 	strtmi	r6, [pc], #-1398	; 218 <startup-0x1ffffde8>
 214:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 218:	73746e65 	cmnvc	r4, #1616	; 0x650
 21c:	6f6b732f 	svcvs	0x006b732f
 220:	452f616c 	strmi	r6, [pc, #-364]!	; bc <startup-0x1fffff44>
 224:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 228:	696c2f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, sp}^
 22c:	692f7362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 230:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 234:	00006564 	andeq	r6, r0, r4, ror #10
 238:	70617267 	rsbvc	r7, r1, r7, ror #4
 23c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 240:	0100632e 	tsteq	r0, lr, lsr #6
 244:	645f0000 	ldrbvs	r0, [pc], #-0	; 24c <startup-0x1ffffdb4>
 248:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 24c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 254 <startup-0x1ffffdac>
 250:	73657079 	cmnvc	r5, #121	; 0x79
 254:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 258:	735f0000 	cmpvc	pc, #0
 25c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
 260:	00682e74 	rsbeq	r2, r8, r4, ror lr
 264:	6c000003 	stcvs	0, cr0, [r0], {3}
 268:	50476269 	subpl	r6, r7, r9, ror #4
 26c:	682e4f49 	stmdavs	lr!, {r0, r3, r6, r8, r9, sl, fp, lr}
 270:	00000400 	andeq	r0, r0, r0, lsl #8
 274:	00260500 	eoreq	r0, r6, r0, lsl #10
 278:	00bc0205 	adcseq	r0, ip, r5, lsl #4
 27c:	14032000 	strne	r2, [r3], #-0
 280:	67170501 	ldrvs	r0, [r7, -r1, lsl #10]
 284:	4b200d05 	blmi	8036a0 <startup-0x1f7fc960>
 288:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
 28c:	1505750b 	strne	r7, [r5, #-1291]	; 0xfffffaf5
 290:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 294:	05682805 	strbeq	r2, [r8, #-2053]!	; 0xfffff7fb
 298:	0d056717 	stceq	7, cr6, [r5, #-92]	; 0xffffffa4
 29c:	4b070520 	blmi	1c1724 <startup-0x1fe3e8dc>
 2a0:	05c90b05 	strbeq	r0, [r9, #2821]	; 0xb05
 2a4:	01052015 	tsteq	r5, r5, lsl r0
 2a8:	682c053d 	stmdavs	ip!, {r0, r2, r3, r4, r5, r8, sl}
 2ac:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 2b0:	ba100301 	blt	400ebc <startup-0x1fbff144>
 2b4:	72030d05 	andvc	r0, r3, #320	; 0x140
 2b8:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
 2bc:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 2c0:	01053d22 	tsteq	r5, r2, lsr #26
 2c4:	4c1b0522 	cfldr32mi	mvfx0, [fp], {34}	; 0x22
 2c8:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 2cc:	13053d0b 	movwne	r3, #23819	; 0x5d0b
 2d0:	2f050520 	svccs	0x00050520
 2d4:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 2d8:	01040200 	mrseq	r0, R12_usr
 2dc:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 2e0:	13053d01 	movwne	r3, #23809	; 0x5d01
 2e4:	01040200 	mrseq	r0, R12_usr
 2e8:	000b052f 	andeq	r0, fp, pc, lsr #10
 2ec:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2f0:	02000905 	andeq	r0, r0, #81920	; 0x14000
 2f4:	004b0104 	subeq	r0, fp, r4, lsl #2
 2f8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 2fc:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 300:	4c2f0104 	stfmis	f0, [pc], #-16	; 2f8 <startup-0x1ffffd08>
 304:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 308:	01052013 	tsteq	r5, r3, lsl r0
 30c:	ae2a052f 	cfsh64ge	mvdx0, mvdx10, #31
 310:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 314:	13053d0b 	movwne	r3, #23819	; 0x5d0b
 318:	2f050520 	svccs	0x00050520
 31c:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 320:	052f2105 	streq	r2, [pc, #-261]!	; 223 <startup-0x1ffffddd>
 324:	0505200d 	streq	r2, [r5, #-13]
 328:	3d0b054b 	cfstr32cc	mvfx0, [fp, #-300]	; 0xfffffed4
 32c:	2f201305 	svccs	0x00201305
 330:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 334:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 338:	07053013 	smladeq	r5, r3, r0, r3
 33c:	2109054a 	tstcs	r9, sl, asr #10
 340:	300c053d 	andcc	r0, ip, sp, lsr r5
 344:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 348:	0b05ae37 	bleq	16bc2c <startup-0x1fe943d4>
 34c:	20160591 	mulscs	r6, r1, r5
 350:	593d0505 	ldmdbpl	sp!, {r0, r2, r8, sl}
 354:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffff62d <delay_millis+0xdfffee0d>
 358:	07053d13 	smladeq	r5, r3, sp, r3
 35c:	2109054a 	tstcs	r9, sl, asr #10
 360:	3013053d 	andscc	r0, r3, sp, lsr r5
 364:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 368:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 36c:	1605300b 	strne	r3, [r5], -fp
 370:	2f050520 	svccs	0x00050520
 374:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 378:	05764105 	ldrbeq	r4, [r6, #-261]!	; 0xfffffefb
 37c:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 380:	8301053d 	movwhi	r0, #5437	; 0x153d
 384:	054c3b05 	strbeq	r3, [ip, #-2821]	; 0xfffff4fb
 388:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 38c:	01053d3d 	tsteq	r5, sp, lsr sp
 390:	4c2f0583 	cfstr32mi	mvfx0, [pc], #-524	; 18c <startup-0x1ffffe74>
 394:	59670c05 	stmdbpl	r7!, {r0, r2, sl, fp}^
 398:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 39c:	0f054c2c 	svceq	0x00054c2c
 3a0:	3c1305e7 	cfldr32cc	mvfx0, [r3], {231}	; 0xe7
 3a4:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
 3a8:	1a053d16 	bne	14f808 <startup-0x1feb07f8>
 3ac:	9010053c 	andsls	r0, r0, ip, lsr r5
 3b0:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
 3b4:	14053d08 	strne	r3, [r5], #-3336	; 0xfffff2f8
 3b8:	4b0b054b 	blmi	2c18ec <startup-0x1fd3e714>
 3bc:	05681405 	strbeq	r1, [r8, #-1029]!	; 0xfffffbfb
 3c0:	05054b0a 	streq	r4, [r5, #-2826]	; 0xfffff4f6
 3c4:	1405bb5b 	strne	fp, [r5], #-2907	; 0xfffff4a5
 3c8:	910505c9 	smlabtls	r5, r9, r5, r0
 3cc:	05ad0805 	streq	r0, [sp, #2053]!	; 0x805
 3d0:	16054b0e 	strne	r4, [r5], -lr, lsl #22
 3d4:	ba0e0592 	blt	381a24 <startup-0x1fc7e5dc>
 3d8:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 3dc:	21059f01 	tstcs	r5, r1, lsl #30
 3e0:	3d120576 	cfldr32cc	mvfx0, [r2, #-472]	; 0xfffffe28
 3e4:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 3e8:	059f2109 	ldreq	r2, [pc, #265]	; 4f9 <startup-0x1ffffb07>
 3ec:	09054b16 	stmdbeq	r5, {r1, r2, r4, r8, r9, fp, lr}
 3f0:	000d053c 	andeq	r0, sp, ip, lsr r5
 3f4:	21030402 	tstcs	r3, r2, lsl #8
 3f8:	02002c05 	andeq	r2, r0, #1280	; 0x500
 3fc:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 400:	04020009 	streq	r0, [r2], #-9
 404:	2a055801 	bcs	156410 <startup-0x1fea9bf0>
 408:	02040200 	andeq	r0, r4, #0, 4
 40c:	00050547 	andeq	r0, r5, r7, asr #10
 410:	58010402 	stmdapl	r1, {r1, sl}
 414:	05510105 	ldrbeq	r0, [r1, #-261]	; 0xfffffefb
 418:	05055b19 	streq	r5, [r5, #-2841]	; 0xfffff4e7
 41c:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 420:	4c4b3f3d 	mcrrmi	15, 3, r3, fp, cr13
 424:	054c4c4c 	strbeq	r4, [ip, #-3148]	; 0xfffff3b4
 428:	03023d01 	movweq	r3, #11521	; 0x2d01
 42c:	Address 0x000000000000042c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
   4:	5f38746e 	svcpl	0x0038746e
   8:	736f0074 	cmnvc	pc, #116	; 0x74
   c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  10:	646f0072 	strbtvs	r0, [pc], #-114	; 18 <startup-0x1fffffe8>
  14:	69685f72 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  18:	6f006867 	svcvs	0x00006867
  1c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
  20:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
  24:	31432055 	qdaddcc	r2, r5, r3
  28:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
  2c:	20302e31 	eorscs	r2, r0, r1, lsr lr
  30:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  34:	20626d75 	rsbcs	r6, r2, r5, ror sp
  38:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  3c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  40:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  44:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  48:	616d2d20 	cmnvs	sp, r0, lsr #26
  4c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  50:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  54:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  58:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  5c:	7500304f 	strvc	r3, [r0, #-79]	; 0xffffffb1
  60:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  64:	2064656e 	rsbcs	r6, r4, lr, ror #10
  68:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  6c:	72646900 	rsbvc	r6, r4, #0, 18
  70:	6769685f 			; <UNDEFINED> instruction: 0x6769685f
  74:	68730068 	ldmdavs	r3!, {r3, r5, r6}^
  78:	2074726f 	rsbscs	r7, r4, pc, ror #4
  7c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  80:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  84:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  88:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
  8c:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
  90:	2f656d6f 	svccs	0x00656d6f
  94:	65766f6c 	ldrbvs	r6, [r6, #-3948]!	; 0xfffff094
  98:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  9c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  a0:	732f7374 			; <UNDEFINED> instruction: 0x732f7374
  a4:	616c6f6b 	cmnvs	ip, fp, ror #30
  a8:	4144452f 	cmpmi	r4, pc, lsr #10
  ac:	2f323834 	svccs	0x00323834
  b0:	2f33564c 	svccs	0x0033564c
  b4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  b8:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  bc:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  c0:	315f3362 	cmpcc	pc, r2, ror #6
  c4:	6174732f 	cmnvs	r4, pc, lsr #6
  c8:	70757472 	rsbsvc	r7, r5, r2, ror r4
  cc:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
  d0:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
  d4:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  d8:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
  dc:	4900745f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
  e0:	525f5244 	subspl	r5, pc, #68, 4	; 0x40000004
  e4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
  e8:	00444556 	subeq	r4, r4, r6, asr r5
  ec:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  f0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
  f4:	6f00745f 	svcvs	0x0000745f
  f8:	6c5f7264 	lfmvs	f7, 2, [pc], {100}	; 0x64
  fc:	4f00776f 	svcmi	0x0000776f
 100:	525f5244 	subspl	r5, pc, #68, 4	; 0x40000004
 104:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 108:	00444556 	subeq	r4, r4, r6, asr r5
 10c:	6e69616d 	powvsez	f6, f1, #5.0
 110:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 114:	6f6c2067 	svcvs	0x006c2067
 118:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 11c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 120:	2064656e 	rsbcs	r6, r4, lr, ror #10
 124:	00746e69 	rsbseq	r6, r4, r9, ror #28
 128:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 74 <startup-0x1fffff8c>
 12c:	6f6c2f65 	svcvs	0x006c2f65
 130:	442f6576 	strtmi	r6, [pc], #-1398	; 138 <startup-0x1ffffec8>
 134:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 138:	73746e65 	cmnvc	r4, #1616	; 0x650
 13c:	6f6b732f 	svcvs	0x006b732f
 140:	452f616c 	strmi	r6, [pc, #-364]!	; ffffffdc <delay_millis+0xdffff7bc>
 144:	38344144 	ldmdacc	r4!, {r2, r6, r8, lr}
 148:	564c2f32 			; <UNDEFINED> instruction: 0x564c2f32
 14c:	6f632f33 	svcvs	0x00632f33
 150:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 154:	6c2f6574 	cfstr32vs	mvfx6, [pc], #-464	; ffffff8c <delay_millis+0xdffff76c>
 158:	33626261 	cmncc	r2, #268435462	; 0x10000006
 15c:	7300315f 	movwvc	r3, #351	; 0x15f
 160:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 164:	70007075 	andvc	r7, r0, r5, ror r0
 168:	72706475 	rsbsvc	r6, r0, #1962934272	; 0x75000000
 16c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 170:	6f6c2067 	svcvs	0x006c2067
 174:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 178:	7300746e 	movwvc	r7, #1134	; 0x46e
 17c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 180:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 184:	646f6d00 	strbtvs	r6, [pc], #-3328	; 18c <startup-0x1ffffe74>
 188:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
 18c:	6c5f7264 	lfmvs	f7, 2, [pc], {100}	; 0x64
 190:	4f00776f 	svcmi	0x0000776f
 194:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xfffff0ac
 198:	56524553 			; <UNDEFINED> instruction: 0x56524553
 19c:	70004445 	andvc	r4, r0, r5, asr #8
 1a0:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 1a4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 1a8:	74007865 	strvc	r7, [r0], #-2149	; 0xfffff79b
 1ac:	00706d65 	rsbseq	r6, r0, r5, ror #26
 1b0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1b4:	5f636968 	svcpl	0x00636968
 1b8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1bc:	6f682f00 	svcvs	0x00682f00
 1c0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 14 <startup-0x1fffffec>
 1c4:	2f65766f 	svccs	0x0065766f
 1c8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1cc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1d0:	6b732f73 	blvs	1ccbfa4 <startup-0x1e33405c>
 1d4:	2f616c6f 	svccs	0x00616c6f
 1d8:	34414445 	strbcc	r4, [r1], #-1093	; 0xfffffbbb
 1dc:	4c2f3238 	sfmmi	f3, 4, [pc], #-224	; 104 <startup-0x1ffffefc>
 1e0:	632f3356 			; <UNDEFINED> instruction: 0x632f3356
 1e4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 1e8:	2f657469 	svccs	0x00657469
 1ec:	6262616c 	rsbvs	r6, r2, #108, 2
 1f0:	2f315f33 	svccs	0x00315f33
 1f4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1f8:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 1fc:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 200:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 204:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 208:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 20c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 98 <startup-0x1fffff68>
 210:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 214:	61726700 	cmnvs	r2, r0, lsl #14
 218:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 21c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 220:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 224:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 228:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 22c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 230:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 234:	70006461 	andvc	r6, r0, r1, ror #8
 238:	00656761 	rsbeq	r6, r5, r1, ror #14
 23c:	70617267 	rsbvc	r7, r1, r7, ror #4
 240:	5f636968 	svcpl	0x00636968
 244:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 248:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 24c:	72670061 	rsbvc	r0, r7, #97	; 0x61
 250:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 254:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 258:	5f657469 	svcpl	0x00657469
 25c:	61746164 	cmnvs	r4, r4, ror #2
 260:	61726700 	cmnvs	r2, r0, lsl #14
 264:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 268:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 26c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 270:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 274:	00726165 	rsbseq	r6, r2, r5, ror #2
 278:	70617267 	rsbvc	r7, r1, r7, ror #4
 27c:	5f636968 	svcpl	0x00636968
 280:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 284:	72670065 	rsbvc	r0, r7, #101	; 0x65
 288:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 28c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 290:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 294:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 298:	5f007465 	svcpl	0x00007465
 29c:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 19c <startup-0x1ffffe64>
 2a0:	6c657300 	stclvs	3, cr7, [r5], #-0
 2a4:	5f746365 	svcpl	0x00746365
 2a8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 2ac:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 2b0:	67007265 	strvs	r7, [r0, -r5, ror #4]
 2b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2b8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2bc:	5f746961 	svcpl	0x00746961
 2c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2c4:	616d0079 	smcvs	53257	; 0xd009
 2c8:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
 2cc:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
 2d0:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
 2d4:	Address 0x00000000000002d4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	72412820 	subvc	r2, r1, #32, 16	; 0x200000
   8:	52206863 	eorpl	r6, r0, #6488064	; 0x630000
   c:	736f7065 	cmnvc	pc, #101	; 0x65
  10:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
  14:	39202979 	stmdbcc	r0!, {r0, r3, r4, r5, r6, r8, fp, sp}
  18:	302e312e 	eorcc	r3, lr, lr, lsr #2
  1c:	43434700 	movtmi	r4, #14080	; 0x3700
  20:	4128203a 			; <UNDEFINED> instruction: 0x4128203a
  24:	20686372 	rsbcs	r6, r8, r2, ror r3
  28:	6f706552 	svcvs	0x00706552
  2c:	6f746973 	svcvs	0x00746973
  30:	20297972 	eorcs	r7, r9, r2, ror r9
  34:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
  38:	Address 0x0000000000000038 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000000ac 	andeq	r0, r0, ip, lsr #1
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	100e4101 	andne	r4, lr, r1, lsl #2
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000000c 	andeq	r0, r0, ip
  44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  48:	7c020001 	stcvc	0, cr0, [r2], {1}
  4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000040 	andeq	r0, r0, r0, asr #32
  58:	200000bc 	strhcs	r0, [r0], -ip
  5c:	00000044 	andeq	r0, r0, r4, asr #32
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	180e4101 	stmdane	lr, {r0, r8, lr}
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000040 	andeq	r0, r0, r0, asr #32
  78:	20000100 	andcs	r0, r0, r0, lsl #2
  7c:	00000044 	andeq	r0, r0, r4, asr #32
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000040 	andeq	r0, r0, r0, asr #32
  98:	20000144 	andcs	r0, r0, r4, asr #2
  9c:	0000005a 	andeq	r0, r0, sl, asr r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000040 	andeq	r0, r0, r0, asr #32
  b8:	2000019e 	mulcs	r0, lr, r1
  bc:	0000006e 	andeq	r0, r0, lr, rrx
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000040 	andeq	r0, r0, r0, asr #32
  d8:	2000020c 	andcs	r0, r0, ip, lsl #4
  dc:	00000090 	muleq	r0, r0, r0
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000040 	andeq	r0, r0, r0, asr #32
  f8:	2000029c 	mulcs	r0, ip, r2
  fc:	00000080 	andeq	r0, r0, r0, lsl #1
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000040 	andeq	r0, r0, r0, asr #32
 118:	2000031c 	andcs	r0, r0, ip, lsl r3
 11c:	00000040 	andeq	r0, r0, r0, asr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000040 	andeq	r0, r0, r0, asr #32
 138:	2000035c 	andcs	r0, r0, ip, asr r3
 13c:	00000046 	andeq	r0, r0, r6, asr #32
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	200003a2 	andcs	r0, r0, r2, lsr #7
 15c:	0000002a 	andeq	r0, r0, sl, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	00000024 	andeq	r0, r0, r4, lsr #32
 174:	00000040 	andeq	r0, r0, r0, asr #32
 178:	200003cc 	andcs	r0, r0, ip, asr #7
 17c:	00000138 	andeq	r0, r0, r8, lsr r1
 180:	40140e41 	andsmi	r0, r4, r1, asr #28
 184:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 188:	03864004 	orreq	r4, r6, #4
 18c:	40028740 	andmi	r8, r2, r0, asr #14
 190:	0e41018e 	dvfeqd	f0, f1, #0.5
 194:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000040 	andeq	r0, r0, r0, asr #32
 1a0:	20000504 	andcs	r0, r0, r4, lsl #10
 1a4:	00000068 	andeq	r0, r0, r8, rrx
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000040 	andeq	r0, r0, r0, asr #32
 1c0:	2000056c 	andcs	r0, r0, ip, ror #10
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
